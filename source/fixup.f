C This file is part of PREPRO.
C
C    Author: Dermott (Red) Cullen
C Copyright: (C) International Atomic Energy Agency
C
C PREPRO is free software; you can redistribute it and/or modify it
C under the terms of the MIT License; see LICENSE file for more details.


C=======================================================================
C
C     PROGRAM FIXUP
C     =============
C     VERSION 84-1 (NOVEMBER 1984)
C     VERSION 86-1 (JANUARY 1986) *IMPROVED BASED ON USER COMMENTS
C                                 *FORTRAN-77/H VERSION
C     VERSION 86-2 (JUNE 1986)    *ALLOW CREATION OF SECTIONS OF CROSS
C                                  SECTIONS WHICH ARE NOT PRESENT IN
C                                  THE ORIGINAL EVALUATION
C     VERSION 88-1 (JULY 1988)    *OPTION...INTERNALLY DEFINE REA I/O
C                                  FILE NAMES (SEE, SUBROUTINE FILEIO
C                                  FOR DETAILS).
C                                 *IMPROVED BASED ON USER COMMENTS.
C     VERSION 89-1 (JANUARY 1989) *PSYCHOANALYZED BY PROGRAM FREUD TO
C                                  INSURE PROGRAM WILL NOT DO ANYTHING
C                                  CRAZY.
C                                 *UPDATED TO USE NEW PROGRAM CONVERT
C                                  KEYWORDS.
C                                 *ADDED LIVERMORE CIVIC COMPILER
C                                  CONVENTIONS.
C     VERSION 89-2 (MARCH 1989)   *ADDED ENDF-6 SUMMATION RULES AND
C                                  DEFINED MF AND MT NUMBERS. PROGRAM
C                                  WILL NOW USE MF=1, MT=451 TO DEFINE
C                                  THE ENDF FORMAT OF THE DATA (E.G.,
C                                  ENDF-6 OR EARLIER) AND USE THE
C                                  CORRECT SUMMATION RULES FOR EACH
C                                  VERSION OF THE ENDF FORMAT. IF
C                                  MF=1, MT=451 IS NOT PRESENT PROGRAM
C                                  WILL USE ENDF-6 SUMMATION
C                                  CONVENTIONS AS A DEFAULT.
C     VERSION 90-1 (JUNE 1990)    *UPDATED BASED ON USER COMMENTS
C                                 *ADDED PHOTON INTERACTION, MF=23
C     VERSION 91-1 (JUNE 1991)    *ADDED FORTRAN SAVE OPTION
C                                 *NEW MORE CONSISTENT ENERGY OUTPUT
C                                  ROUTINE
C     VERSION 92-1 (JANUARY 1992) *ADDED OPTION TO CALCULATE RATIOS,
C                                  E.G., CAPTURE/FISSION AND PRODUCTS,
C                                  NU-BAR*FISSION - AND OUTPUT THE
C                                  RESULTS IN THE ENDF FORMAT (SEE,
C                                  BELOW - CREATING RATIOS AND PRODUCTS)
C                                 *ALLOW TOTAL NU-BAR (MF=1, MT=452) TO
C                                  BE USED IN DEFINING RATIOS OR
C                                  PRODUCTS.
C                                 *ALLOW ALL CROSS SECTIONS TO BE PUT
C                                  ON A UNIFORM ENERGY GRID.
C                                 *NOTE, CHANGE IN INPUT FORMAT FOR
C                                  RANGES OF MT NUMBERS
C                                 *COMPLETELY CONSISTENT I/O ROUTINES -
C                                  TO MINIMIZE COMPUTER DEPENDENCE.
C     VERSION 93-1 (JULY 1993)    *CORRECTED ALGORITHM TO CREATE UNIFORM
C                                  ENERGY GRID.
C     VERSION 94-1 (JANUARY 1993) *VARIABLE ENDF/B DATA FILENAMES
C                                  TO ALLOW ACCESS TO FILE STRUCTURES
C                                  (WARNING - INPUT PARAMETER FORMAT
C                                  HAS BEEN CHANGED)
C                                 *INCREASED PAGE SIZE FROM 1002 TO
C                                  12000 DATA POINTS.
C                                 *CLOSE ALL FILES BEFORE TERMINATING
C                                  (SEE, SUBROUTINE ENDIT)
C     VERSION 96-1 (JANUARY 1996) *COMPLETE RE-WRITE
C                                 *IMPROVED COMPUTER INDEPENDENCE
C                                 *ALL DOUBLE PRECISION
C                                 *ON SCREEN OUTPUT
C                                 *UNIFORM TREATMENT OF ENDF I/O
C                                 *IMPROVED OUTPUT PRECISION
C                                 *DEFINED SCRATCH FILE NAMES
C                                 *INCREASED PAGE SIZE FROM 12000 TO
C                                  36000 DATA POINTS.
C     VERSION 99-1 (MARCH 1999)   *CORRECTED CHARACTER TO FLOATING
C                                  POINT READ FOR MORE DIGITS
C                                 *UPDATED TEST FOR ENDF FORMAT
C                                  VERSION BASED ON RECENT FORMAT CHANGE
C                                 *GENERAL IMPROVEMENTS BASED ON
C                                  USER FEEDBACK
C     VERSION 99-2 (JUNE 1999)    *ASSUME ENDF-6, NOT 5, IF MISSING
C                                  MF=1, MT-451.
C                                 *FIXED CREATION OF SECTIONS
C     VERS. 2000-1 (FEBRUARY 2000)*GENERAL IMPROVEMENTS BASED ON
C                                  USER FEEDBACK
C     VERS. 2002-1 (MAY 2002)     *OPTIONAL INPUT PARAMETERS
C                                 *SUMMATION RULES ARE DEFINED BASED
C                                  ON CONTENTS OF TABLES.
C     VERS. 2004-1 (JAN. 2004)    *GENERAL UPDATE BASED ON USER FEEDBACK
C                                 *INCREASED PAGE SIZE FROM 36000 TO
C                                  60000 DATA POINTS.
C     VERS. 2005-1 (JAN. 2005)    *UPDATED MT CREATION TO ALLOW MAT =0
C                                  INDICATING CREATE FOR ALL MATS.
C     VERS. 2007-1 (JAN. 2007)    *CHECKED AGAINST ALL ENDF/B-VII DATA
C                                 *INCREASED PAGE SIZE FROM 60,000 TO
C                                  600,000 DATA POINTS.
C     VERS. 2007-2 (OCT. 2007)    *ADDED MT=16 AS SUM MT=875 THRU 891
C                                 *72 CHARACTER FILE NAMES
C     VERS. 2010-1 (Apr. 2010)    *Defining cross sections by summation
C                                  to now mandatory - either build-in
C                                  rules or by user input.
C     VERS. 2011-1 (March 2011)   *Added new MT # to allowed and
C                                  summation rules.
C     VERS. 2012-1 (Aug.  2012)   *Corrected definition of MT=3 to avoid
C                                  double counting of MT=18.
C                                 *Extended incident particle list to
C                                  include photon (ZA = 0).
C                                 *Added CODENAME
C                                 *32 and 64 bit Compatible
C                                 *Added ERROR stops.
C     VERS. 2015-1 (Jan.  2015)   *Extended OUT9.
C                                 *Replaced ALL 3 way IF Statements
C
C     VERS. 2015-2 (Oct.  2015)   *Threshold Correction no longer
C                                  allowed = TOO DANGEROUS!!!
C     VERS. 2017-1 (May   2017)   *Updated based on user feekback
C                                 *Increased tables to 3,000,000.
C                                 *All floating input parameters changed
C                                  to character input + IN9 conversion.
C                                 *Ignore attempts to "correct" reaction
C                                  threshold = cannot be done for
C                                  temperature dependent (MF=3) data.
C     VERS. 2017-2 (Oct.  2017)   *Updated to insure sharp edges for
C                                  photon interaction cross sections
C                                  MF=23.
C                                 *Updated for ELECTRONS to create,
C                                  MF/MT=23/501 = Total
C                                  MF/MT=23/522 = Total ionization
C                                 *Updated to define MF=26 and electron
C                                  Cross Sections MT=526, 527, 528 as
C                                  LEGAL MF/MT Combinations.
C     VERS. 2018-1 (Jan.  2018)   *Decreased PAGE size from 2,700,000
C                                  to 1,800,000 - PAGE was too BIG for
C                                  many computers - forcing the code
C                                  to run VERY SLOWLY - smaller size
C                                  improves running time.
C                                 *Added on-line output for ALL ENDERROR
C     VERS. 2019-1 (June  2019)   *Additional Interpolation Law Tests
C                                 *Print WARNING if ALL MTs in any
C                                  evaluation DO NOT ALL EXTEND to the
C                                  same Maximum Tabulated Energy =
C                                  in this case data above the lowest
C                                  common energy is identied as being
C                                  UNRELIABLE.
C     VERS. 2019-2 (Oct.  2019)   *Corrected ERROR defining first point
C                                  of each MT = first point was being
C                                  ERRONEOUSLY skipped (due to an ERROR
C                                  in removing the previous THRESHOLD
C                                  "correction" test - which is no
C                                  longer allowed).
C     VERS. 2020-1 (Dec.  2020)   *ZA & AWRE Correction Required.
C                                 *Extenstion to 20 MeV NOT ALLOWED.
C                                 *Threshold correction NOT ALLOWED.
C                                 *Added Target isomeric state
C     VERS. 2021-1 (Jan.  2021)   *Updated for FORTRAN 2018
C                                 *DELETED MT=3 = Nonelastic by adding
C                                  it to the built-in DELETION table -
C                                  to select set option 3 = 2 (use
C                                  built-in DELETION table). MT=3 is
C                                  never used in applications, and yet
C                                  can add an enormous volume to ENDF
C                                  format files: (MT=3) = (MT-1)-(MT-2),
C                                  included ALL of the resonances from
C                                  capture, fission,.....
C     VERS. 2021-2 (Aug.  2021)   *Corrected MTCHEK to check only if
C                                  using built-in tables,
C                                  IMOPS(4) = DELETION
C                                  IMOPS(5) = SUMMATION
C                                  ERROR = Only print WARNING - NO STOP
C     2019-2 Acknowledgment
C     =====================
C     I thank Jean-Christophe Sublet (NDS, IAEA, Vienna, Austria) for
C     reporting the ERROR in FIXUP (2019-1) that led to the update in
C     FIXUP (2019-2) to correctly define the first point in each MT.
C
C     OWNED, MAINTAINED AND DISTRIBUTED BY
C     ------------------------------------
C     THE NUCLEAR DATA SECTION
C     INTERNATIONAL ATOMIC ENERGY AGENCY
C     P.O. BOX 100
C     A-1400, VIENNA, AUSTRIA
C     EUROPE
C
C     ORIGINALLY WRITTEN BY
C     ------------------------------------
C     Dermott E. Cullen
C
C     PRESENT CONTACT INFORMATION
C     ---------------------------
C     Dermott E. Cullen
C     1466 Hudson Way
C     Livermore, CA 94550
C     U.S.A.
C     Telephone  925-443-1911
C     E. Mail    RedCullen1@Comcast.net
C     Website    RedCullen1.net/HOMEPAGE.NEW
C
C     PURPOSE
C     =======
C     THIS PROGRAM IS DESIGNED TO READ EVALUATED DATA IN THE ENDF
C     FORMAT, PERFORM CORRECTIONS AND OUTPUT THE RESULT IN THE ENDF
C     FORMAT. TWO TYPES OF CORRECTIONS ARE POSSIBLE (1) AUTOMATIC AND
C     (2) OPTIONAL (BASED ON USER INPUT) CORRECTIONS.
C
C     ONE OF THE MOST IMPORTANT FUNCTIONS OF THIS PROGRAM IS TO
C     RE-DEFINE ALL REDUNDANT CROSS SECTIONS (E.G. TOTAL) TO BE EXACTLY
C     EQUAL TO THE SUM OF ITS PARTS. THIS PROCEDURE ELIMINATES THE
C     PROBLEM WITH MANY ENDF EVALUATIONS, WHERE DUE TO THE USE OF
C     NON-LINEAR INTERPOLATION LAWS THE TOTAL MAY BE EQUAL TO THE SUM
C     OF ITS PARTS AT ALL TABULATED ENERGIES, BUT BASED ON THE
C     INTERPOLATION LAWS IT CAN BE QUITE DIFFERENT AT ENERGIES BETWEEN
C     TABULATED ENERGIES.
C
C     AUTOMATIC CHECKS/CORRECTIONS
C     ============================
C     (1) CHECK THAT MAT/MF/MT DOES NOT CHANGE UNLESS A MEND/FEND/SEND
C         LINE IS READ. IF MAT/MF/MT CHANGES A WARNING MESSAGE IS
C         PRINTED BUT NO CORRECTIVE ACTION IS TAKEN.
C     (2) ALL LINES WITHIN A GIVEN MAT WILL BE SEQUENTIALLY NUMBERED
C         ON OUTPUT.
C
C     OPTIONAL CHECKS/CORRECTIONS
C     ===========================
C     THE FOLLOWING NUMBERS CORRESPOND TO THE INPUT DATA OPTION COLUMNS
C     (SEE THE DESCRIPTION OF THE INPUT BELOW)
C
C     (1) CORRECT ZA AND AWR IN ALL SECTIONS. CHECK TO INSURE THAT THE
C         C1 AND C2 VALUES (ZA AND AWR) ARE THE SAME IN ALL SECTIONS.
C         THE C1 AND C2 OF THE FIRST SECTION READ ARE ASSUMED TO BE
C         CORRECT AND ARE USED FOR COMPARISON. IF THE C1 AND/OR C2 OF
C         THE FIRST SECTION ARE NOT POSITIVE AN ERROR MESSAGE IS OUTPUT
C         AND THE MATERIAL IS COPIED WITHOUT CHANGE.
C         NOTE....TO CHANGE THE ZA AND/OR AWR OF ANY MATERIAL IT IS
C         MERELY NECESSARY TO CHANGE THE ZA AND/OR AWR IN THE FIRST
C         SECTION OF THE MATERIAL AND USE THIS OPTION TO AUTOMATICALLY
C         CHANGE ALL OTHER SECTIONS.
C
C         2017/5/20 - This option (2) is no longer allowed
C
C         WARNING: Threshold Correction is no longer allowed.
C                  This option has resulted in far too much
C                  misinterpretation and as such it is judged to
C                  be too dangerous to be allowed in this code.
C                  For example, the Laboratory frame of reference
C                  threshold is temperature dependent = it is not
C                  uniquely defined by Q value and atomic weight.
C                  ThIS OPTION is IGNORED.
C
C     (2) CORRECT CROSS SECTION (MF=3) THRESHOLDS. THE Q-VALUE AND AWR
C         ARE USED TO DERIVE THE REACTION THRESHOLD USING THE RELATION,
C
C         E-THRESHOLD = -(Q-VALUE)*(AWRE+1.0)/AWRE
C
C         IF THE THRESHOLD IS POSITIVE THE CROSS SECTION IS CHECKED TO
C         INSURE THAT THE FIRST TABULATED POINT IS AT THE THRESHOLD AND
C         HAS A ZERO CROSS SECTION. IF NOT, THE CROSS SECTION WILL BE
C         CHANGED.
C         (A) IF THE FIRST TABULATED POINT IS ABOVE THE THRESHOLD AND
C             HAS A ZERO CROSS SECTION, THE POINT IS DELETED AND A POINT
C             IS INSERTED AT THE THRESHOLD.
C         (B) IF THE FIRST TABULATED POINT IS ABOVE THE THRESHOLD AND
C             HAS A NON-ZERO CROSS SECTION, A POINT WITH ZERO CROSS
C             SECTION IS INSERTED AT THE THRESHOLD.
C         (C) IF THE FIRST TABULATED POINT IS BELOW THE THRESHOLD AND
C             HAS A NON-ZERO CROSS SECTION, ALL POINTS BELOW THE
C             THRESHOLD ARE DELETED AND A POINT WITH ZERO CROSS SECTION
C             IS INSERTED AT THE THRESHOLD.
C
C         2017/5/20 - This option (2) is no longer allowed
C
C     (3) EXTEND ALL CROSS SECTIONS (MF=3) TO 20 MEV. IF THE TABULATED
C         CROSS SECTION ENDS BELOW 20 MEV IT WILL BE EXTENDED TO 20 MEV
C         AS EITHER ZERO (IMOPS(3)=1) OR CONSTANT (IMOPS(3)=2) EQUAL
C         TO THE LAST TABULATED VALUE.
C     (4) ALLOW REACTION (MF=3, ANY MT) DELETION. ALL SPECIFIED
C         REACTIONS WILL BE DELETED WHEN THE DATA IS READ FROM THE
C         INPUT ENDF DATA FILE AND WILL NOT BE IN THE OUTPUT ENDF
C         DATA FILE. WARNING DELETED REACTIONS MAY NOT BE USED TO DEFINE
C         ANY RECONSTRUCTED REACTIONS (I.E. REACTIONS DEFINED BY SUMMING
C         OTHER REACTIONS). SINCE DELETED REACTIONS ARE DELETED DURING
C         READING IT IS AS IF THEY NEVER EXISTED AND IF ANY DELETED
C         REACTION IS REQUIRED LATER TO DEFINE ANY SUM AN ERROR WILL
C         RESULT. THE USER MAY SPECIFY THAT THE DELETION RULES ARE TO BE
C         READ FROM INPUT (IMOPS(4)=1) OR THAT THE BUILT IN SUMMATION
C         RULES ARE TO BE USED (MOPS(4)=2). AT THE PRESENT TIME THE
C         BUILT-IN DELETION RULES ARE THAT NO SECTIONS SHOULD BE DELETED
C         (THE USER MAY OVERRIDE THIS CONVENTION BY INPUT).
C     (5) ALLOW REACTION (MF=3, ANY MT) RECONSTRUCTION BY SUMMING OTHER
C         REACTIONS. IN ORDER TO OPTIMIZE THE RUNNING TIME OF THIS
C         PROGRAM CARE SHOULD BE EXERCISED TO MINIMIZE THE NUMBER OF
C         TIMES THAT EACH CONTRIBUTING CROSS SECTION MUST BE USED.
C         THE USED MAY SPECIFY THAT THE SUMMATION RULES ARE TO BE READ
C         AS INPUT (IMOPS(5)=1) OR THAT THE BUILT IN SUMMATION RULES
C         ARE TO BE USED (IMOPS(5)=2). THE BUILT IN SUMMATION RULES ARE
C         DESIGNED TO USE ENDF CONVENTIONS AND TO MINIMIZE THE NUMBER
C         OF TIMES THAT EACH CROSS SECTION IS USED.
C     (6) INSURE THAT ALL CROSS SECTIONS ARE NON-NEGATIVE (I.E. ARE
C         ZERO OR POSITIVE). DURING READING ALL NEGATIVE CROSS SECTIONS
C         WILL BE SET EQUAL TO ZERO AND TREATED AS SUCH DURING ALL
C         SUBSEQUENT SUMMATIONS AND ENDF OUTPUT.
C         NOTE...THIS OPTION SHOULD NEVER BE USED WITH DATA CONTAINING
C         BACKGROUND CROSS SECTIONS WHICH MAY BE NEGATIVE. ONLY AFTER
C         THE RESONANCE CONTRIBUTION HAS BEEN ADDED TO THE BACKGROUND
C         TO DEFINE THE ACTUAL CROSS SECTION IS IT VALID TO ELIMINATE
C         NEGATIVE CROSS SECTIONS.
C         NOTE...THIS OPTION MAY BE USED TO DELETE NEGATIVE ELASTIC
C         CROSS SECTIONS THAT MAY RESULT FROM RECONSTRUCTING CROSS
C         SECTIONS FROM SINGLE LEVEL BREIT-WIGNER PARAMETERS. IF THE
C         TOTAL CROSS SECTION IS THEN RECONSTRUCTED USING THE CORRECTED
C         ELASTIC CROSS SECTION THE TOTAL WILL BE POSITIVE DUE TO THE
C         CONTRIBUTIONS OF CAPTURE AND FISSION (THUS AVOIDING NUMERICAL
C         INSTABILITY PROBLEMS DURING SELF-SHIELDING CALCULATIONS).
C     (7) WITHIN EACH SECTION OF CROSS SECTIONS DELETE ENERGIES THAT
C         ARE NOT IN ASCENDING ENERGY ORDER (ENERGY REPETITION IS O.K.)
C     (8) WITHIN EACH SECTION OF CROSS SECTIONS ELIMINATE DUPLICATE
C         POINTS (SUCCESSIVE POINTS WITH THE SAME ENERGY-CROSS SECTION).
C     (9) TEST THAT ALL SECTIONS ARE IN ASCENDING MAT/MF/MT ORDER.
C         IF NOT, NO CORRECTIVE ACTION WILL BE TAKEN, ONLY AN ERROR
C         MESSAGE WILL BE OUTPUT.
C    (10) CHECK MF/MT FOR EACH SECTION TO INSURE THAT THEY ARE DEFINED
C         IN THE ENDF FORMAR MANUAL. IF THEY ARE NOT DEFINED AN ERROR
C         MESSAGE IS PRINTED, BUT NO CORRECTIVE ACTION IS TAKEN.
C    (11) ALLOW SECTIONS WHICH ARE NOT PRESENT IN THE ORIGINAL (INPUT)
C         EVALUATION TO BE CREATED. NORMALLY THIS PROGRAM WILL ONLY
C         RECONSTRUCT AND OUTPUT SECTIONS IF THE SECTION IS PRESENT
C         IN THE ORIGINAL EVALUATION. THIS PROCEDURE IS FOLLOWED BECAUSE
C         NORMALLY THE PROGRAM DOES NOT KNOW HOW TO DEFINE THE CONTENTS
C         OF THE FIRST TWO LINES OF THE SECTION (E.G., Q-VALUE,
C         TEMPERATURE, INITIAL AND FINAL STATES). THIS OPTION MAY BE
C         USED TO ALLOW THE PROGRAM TO READ AND SAVE A TABLE DEFINING
C         THE CONTENTS OF THE FIRST TWO LINES OF EACH SECTION TO BE
C         CREATED.
C         NOTE...IF A SECTION IS PRESENT ANY COMMAND TO CREATE IT WILL
C         BE IGNORED.
C     (12)ALLOW ENERGY POINTS TO BE INSERTED. THE PROGRAM CAN READ UP
C         TO 50, ENERGIES, MAT, MT AND USE LINEAR INTERPOLATION TO
C         INSERT ENERGY POINTS INTO TABLES AS THEY ARE READ, E.G.,
C         INSERT AN ENERGY POINT AT THERMAL ENERGY (0.0253 EV). IF
C         AN MAT AND/OR MT IS ZERO THIS IMPLIES = ALL - INSERT THE
C         ENERGY IN ALL TABLES.
C     (13)PUT ALLOW CROSS SECTIONS ON A UNIFORM ENERGY GRID = EACH
C         SECTION (MT) OF CROSS SECTIONS WILL INCLUDE ALL ENERGIES
C         WHICH APPEAR IN AT LEAST ONE SECTION OF DATA. PARAMETERS
C         (MT=251 THROUGH 255) ARE NOT INCLUDED IN THE UNIFORM ENERGY
C         GRID.
C     (14)DELETE SECTION IF CROSS SECTION = 0 AT ALL ENERGIES. THIS
C         SOUNDS LIKE AN ABSURD OPTION, BUT IS REQUIRED BECAUSE SUCH
C         SECTIONS EXIST IN ENDF/B-VI DATA.
C
C     CREATING RATIOS AND PRODUCTS
C     ============================
C     IN ORDER TO CREATE RATIOS AND PRODUCTS = NEW MT NUMBERS, YOU MUST
C     DO TWO THINGS,
C
C     1) DEFINE EACH NEW MT NUMBER AS A RATIO OR PRODUCT OF TWO MT
C        NUMBERS.
C
C     2) USE THE CREATE MT NUMBER OPTION AND INPUT THE FIRST TWO LINES
C        OF THE SECTION
C
C     WARNING - UNLESS YOU DO BOTH OF THESE YOU WILL NOT OBTAIN OUTPUT
C     IN THE ENDF FORMAT.
C
C     TWO SPECIAL MT NUMBERS HAVE BEEN DEFINED BY CSEWG INVOLVING
C     RATIOS AND PRODUCTS,
C
C     ALPHA (MT=254)= CAPTURE (MT=102)/FISSION (MT=18)
C
C     ETA (MT=255)  = NU-BAR (MT=452)*FISSION (MT=18)/ABSORPTION (MT=27)
C
C     ABSORPTION (MT=27) = FISSION (MT=18) + SUM (MT=102 THROUGH 116)
C
C     AS YET THERE IS NO STANDARD DEFINITION OF MT NUMBERS FOR RATIO
C     OR PRODUCT DATA. YOU ARE FREE TO USE ANY MT NUMBERS NORMALLY NOT
C     USED IN THE ENDF. HOWEVER, IT WILL THEN BE YOUR RESPONSIBILITY
C     TO PROPERLY INTERPRET THE RESULTS, I.E., NOBODY ELSE WILL HAVE
C     ANY IDEA HOW TO INTERPRET A TABLE OF DATA ASSOCIATED WITH THE MT
C     NUMBERS YOU HAVE USED.
C
C     THIS PROGRAM CAN BE ONLY DIRECTLY DEFINE RATIOS AND PRODUCTS
C     USING TWO MT NUMBERS = BINARY OPERATIONS, E.G., DEFINE THE CAPTURE
C     TO FISSION RATIO, OR DEFINE THE PRODUCT NU-BAR*FISSION.
C
C     THIS PROGRAM CANNOT DIRECTLY DEFINE RATIO OR PRODUCT OF A SUM OF
C     SECTIONS TO THE SUM OF ANOTHER SET OF SECTIONS. HOWEVER, THIS CAN
C     BE DONE INDIRECTLY BY FIRST DEFINING A DUMMY MT NUMBER (ANY MT
C     NUMBER NOT NORMALLY USED IN ENDF) TO BE A SUM OF SECTIONS AND
C     A SECOND DUMMY MT NUMBER TO BE A SECOND SUM OF SECTIONS. YOU CAN
C     THEN DEFINE RATIO OR PRODUCT YOU REQUIRE TO BE THE RATIO OF THESE
C     TWO DUMMY MT NUMBERS.
C
C     FOR EXAMPLE, TO DEFINE ETA,
C     1) FIRST DEFINE (MT=27) = (MT=27) + (SUM OF MT=102 THROUGH 116)
C     2) NEXT DEFINE (MT=333) = (MT=452)*(MT=18)
C     3) LAST DEFINE (MT=255) = (MT=333)/(MT=27)
C     DO NOT FORGET TO TURN ON THE CREATE SECTION OPTION (ON THE FIRST
C     INPUT LINE) AND INPUT THE FIRST TWO LINES OF SECTION MT=255 -
C     OTHERWISE YOU WILL NOT GET ANY ENDF FORMATTED OUTPUT.
C
C     THE ONLY SPECIAL CONVENTIONS USED BY THIS PROGRAM IN CALCULATING
C     RATIOS ARE WHEN THE DENOMINATOR OF THE RATIO IS ZERO. IN THIS
C     CASE IF THE NUMERATOR IS ALSO ZERO THE RATIO IS DEFINED TO BE ONE.
C     IN THIS CASE IF THE NUMERATOR IS NOT ZERO THE RATIO IS DEFINED
C     TO BE ZERO.
C
C     ENDF FORMAT
C     ===========
C     THIS PROGRAM MAY BE USED WITH DATA IN ANY VERSION OF THE ENDF
C     FORMAT (I.E. ENDF-1, 2, 3, 4, 5 OR 6 FORMAT). SINCE A
C     PAGING SYSTEM IS USED STORE CROSS SECTION TABLES ON SCRATCH FILES
C     THERE IS NO LIMIT TO THE SIZE OF TABLES (E.G. THE TOTAL CROSS
C     SECTION MAY BE REPRESENTED BY 200,000 TABULATED POINTS).
C
C     WARNING
C     =======
C     (1) FOR EACH SECTION OF CROSS SECTIONS (I.E. EACH MT, MF=3) IN
C         THE ORIGINAL EVALUATION (I.E. ENDF/B DATA READ) ONE SECTION
C         OF DATA WILL BE OUTPUT, UNLESS THE SECTION HAS BEEN DELETED.
C         THIS INCLUDES ANY SECTIONS WHICH ARE NOT PRESENT IN THE
C         ORIGINAL EVALUATION, BUT THE USER INDICATES (BY INPUT) SHOULD
C         BE CREATED.
C
C         THE PROGRAM WILL NOT OUTPUT ANY SECTION RECONSTRUCTED BY
C         SUMMATION UNLESS THE CORRESPONDING SECTION (MT NUMBER) IS
C         PRESENT IN THE ORIGINAL EVALUATION OR USER INPUT INDICATES
C         SHOULD BE CREATED AND OUTPUT. THIS IS (A) BECAUSE THE
C         PROGRAM CANNOT DEFINE THE PARAMETERS TO APPEAR ON THE FIRST
C         TWO LINES OF THE SECTION, (B) TO AVOID OUTPUTTING TOO MUCH
C         DATA WHICH THE USER MAY NOT BE INTERESTED IN.
C
C     (2) FOR ANY SECTIONS THAT DO NOT APPEAR IN THE ORIGINAL DATA THE
C         USER MAY SPECIFY THAT THEY BE DEFINED BY SUMMATION. ANY SUCH
C         SECTION MAY BE USED BE DEFINE SUBSEQUENT SUMS, BUT THE SECTION
C         ITSELF WILL NOT BE OUTPUT (E.G. GENERALLY MT=27 AND 101 ARE
C         NOT PRESENT IN EVALUATIONS. HOWEVER, THE BUILT-IN SUMMATION
C         RULES OF THIS PROGRAM USES THE ENDF SUMMATION RULES TO
C         DEFINE MT=27 AND 101, WHICH IN TURN ARE USED TO DEFINE THE
C         NON-ELASTIC CROSS SECTION, MT=3. SECTIONS MT=27 AND 101 ARE
C         NOT OUTPUT).
C
C     (3) ALL DATA IN FILE 3 AND 23 MUST BE LINEARLY INTERPOLABLE. IF
C         THE DATA IS NOT LINEARLY INTERPOLABLE THIS PROGRAM WILL
C         TERMINATE.
C
C     PROGRAM OPERATION
C     =================
C     ALL MAT NUMBER ON AN ENDF TAPE ARE PROCESSED. EACH MAT IS
C     TREATED SEPARATELY. WITHIN EACH MAT, EACH SECTION BEFORE MF=3
C     IS READ, CHECKED/CORRECTED (BASED ON INPUT OPTIONS) AND OUTPUT.
C     WHEN MF=3 IS LOCATED ALL CROSS SECTIONS ARE READ, SECTIONS TO BE
C     DELETED ARE DELETED, SECTIONS WHICH ARE NOT PRESENTED AND USER
C     INPUT INDICATES SHOULD BE CREATED ARE CREATE, SECTIONS TO BE KEPT
C     ARE CHECKED/CORRECTED (BASED ON INPUT OPTIONS) AND WRITTEN TO A
C     SCRATCH FILE. NEXT, IF THE USER SPECIFIES THAT THEY SHOULD,
C     SECTIONS ARE RECONSTRUCTED. FINALLY ALL CROSS SECTIONS (OLD AND
C     NEW) ARE OUTPUT. WITHIN THE SAME MAT, EACH SECTION AFTER MF=3 IS
C     READ, CHECKED/CORRECTED (BASED ON INPUT OPTIONS) AND OUTPUT.
C
C     MF=3
C     ====
C     THE TREATMENT OF THE CROSS SECTIONS REQUIRES UP TO 4 PASSES FOR
C     CROSS SECTIONS. IN THE PROGRAM THEY CORRESPOND TO SUBROUTINES
C     PASS1, PASS2, PASS3 AND PASS4. THE ORIGINAL AND FINAL ENDF DATA
C     FILES, 5 SCRATCH FILES AND 3 IN CORE ARRAYS ARE USED. OPERATIONS
C     PERFORMED DURING EACH PASS ARE,
C
C     PASS1
C     =====
C     READ ALL CROSS SECTIONS FROM ITAPE. DELETED ANY SECTIONS. CREATE
C     ANY SECTIONS. CHECK/CORRECT THEM AND WRITE THEM TO SCRATCH FILE.
C     DATA IS READ INTO ARRAY A, TRANSFERRED TO ARRAY C (AFTER EDITING)
C     AND OUTPUT TO ISCRC FROM ARRAY C.
C     ITAPE  - UNIT ORIGINAL ENDF DATA IS READ FROM.
C     ISCRC  - SCRATCH UNIT THAT EDITED DATA IS WRITTEN ON.
C     TABA   - ARRAY INTO WHICH ORIGINAL DATA IS READ.
C     TABC   - ARRAY INTO WHICH EDITED DATA IS TRANSFERRED TO AND
C              FROM WHICH IT IS WRITTEN TO ISCRC.
C
C     PASS2
C     =====
C     IF A UNIFORM ENERGY GRID IS REQUESTED IT IS CREATED DURING THIS
C     PASS. FIRST ALL OF THE CROSS SECTIONS FROM PASS1 ARE READ AND A
C     UNIFORM ENERGY GRID IS CREATED = ALL ENERGIES THAT ARE INCLUDED
C     IN AT LEAST ONE SECTION (MT) OF CROSS SECTIONS.
C     ISCRA  - SCRATCH UNIT CONTAINING UNIFORM ENERGY GRID.
C     ISCRB  - SCRATCH UNIT CONTAINING UNIFORM ENERGY GRID.
C     ISCRC  - SCRATCH UNIT THAT EDITED DATA IS READ FROM.
C     TABA   - ARRAY CONTAINING UNIFORM ENERGY GRID.
C     TABB   - ARRAY CONTAINING UNIFORM ENERGY GRID.
C     TABC   - ARRAY CONTAINING EDITED DATA.
C
C     THE UNIFORM ENERGY GRID ENDS UP ON ISCRB. NEXT EACH SECTION OF
C     CROSS SECTIONS FROM PASS1 IS READ FROM ISCRC, INTERPOLATED TO
C     THE UNIFORM ENERGY GRID AND OUTPUT TO ISCRA. FINALLY ISCRA AND
C     ISCRC ARE SWITCH, SO THAT AT THE END OF THIS PASS THE DATA WILL
C     AGAIN BE ON ISCRC (EXACTLY AS AT THE END OF PASS1), WITH UPDATED
C     POINT COUNTS.
C     ISCRA  - SCRATCH UNIT THAT UNIFORM ENERGY GRID DATA IS WRITTEN ON.
C     ISCRB  - SCRATCH UNIT CONTAINING UNIFORM ENERGY GRID.
C     ISCRC  - SCRATCH UNIT THAT EDITED DATA IS READ FROM.
C     TABA   - ARRAY CONTAINING UNIFORM ENERGY GRID DATA.
C     TABB   - ARRAY CONTAINING UNIFORM ENERGY GRID.
C     TABC   - ARRAY CONTAINING EDITED DATA.
C
C     PASS3
C     =====
C     SUMMATION CROSS SECTIONS ARE DEFINED BY READING DATA FROM ISCRC
C     AND MERGING THEM ONTO ISCRA. THE FIRST SECTION THAT CONTRIBUTES
C     TO A SUM IS MERELY COPIED FROM C TO A. IF MORE SECTIONS WILL
C     CONTRIBUTE TO THE SUM THE DATA IN A IS TRANSFERRED TO B, A
C     SECTION OF DATA FROM C IS ADDED TO THE DATA IN B AND STORED IN
C     A. THE CYLE OF ADDED C AND B TO A, FOLLOWED BY MOVING A TO B
C     IS CONTINUED UNTIL ALL CONTRIBUTING SECTIONS HAVE BEEN ADDED.
C     THE SUM IS THEN COPIED FROM A TO D. IF NEWLY CONSTRUCTED SECTION
C     IS REQUIRED FOR ANY LATER SUMMUATIONS IT IS ALSO COPIED TO E.
C     THE CYCLE OF ADDED SECTIONS FROM C AND B TO A IS REPEATED FOR
C     EACH REQUIRED SUMMATION REACTION. IN ADDITION TO SECTIONS FROM
C     C, AFTER THE FIRST SUMMATION SECTIONS MAY ALSO BE ADDED TO A
C     FROM E (THE CONTRIBUTION OF NEW RECONSTRUCTED CROSS SECTIONS).
C     WHEN ALL REQUIRED SECTIONS HAVE BEEN RECONSTRUCTED THE NEW
C     SECTIONS WILL BE ON E AND THE ORIGINAL SECTIONS ON C.
C     ISCRC  - SCRATCH FILE FROM WHICH ORIGINAL DATA IS READ.
C     ISCRA  - SCRATCH FILE ONTO WHICH SUM FOR ONE SECTION IS WRITTEN.
C     ISCRD  - SCRATCH FILE ONTO WHICH ALL SUM CROSS SECTIONS ARE
C              WRITTEN.
C     ISCRE  - SCRATCH FILE ONTO WHICH ALL SUM CROSS SECTIONS WHICH
C              ARE REQUIRED FOR LATER SUMS ARE WRITTEN.
C     ISCRB  - UTILITY SCRATCH FILE USED TO CREATE SUM CROSS SECTIONS.
C     TABA   - ARRAY INTO WHICH SUMS ARE WRITTEN.
C     TABB   - ARRAY INTO WHICH PARTIAL SUMS ARE WRITTEN.
C     TABC   - ARRAY INTO WHICH ORIGINAL DATA IS READ.
C
C     PASS4
C     =====
C     CROSS SECTIONS ARE READ FROM ISCRC (ORIGINAL) AND ISCRD (NEW)
C     AND ARE WRITTEN IN THE ENDF FORMAT ON OTAPE. THE BEGINNING OF
C     EACH SECTION OF ORIGINAL DATA IS READ FROM ISCRC (TO DEFINE
C     SECTION HEADER INFORMATION). IF THIS MT HAS NOT BEEN RECOSTRUCTED
C     ON ISCRD THE ORIGINAL SECTION IS OUTPUT. IF THE SECTION HAS BEEN
C     RECONSTRUCTED THE ORIGINAL SECTION IS SKIPPED AND THE NEW SECTION
C     IS OUTPUT.
C     OTAPE  - OUTPUT DATA IN THE ENDF FORMAT.
C     ISCRC  - SCRATCH FILE FROM WHICH ORIGINAL DATA IS READ.
C     ISCRD  - SCRATCH FILE FROM WHICH NEW DATA IS READ.
C     TABC   - ARRAY INTO WHICH CROSS SECTIONS ARE READ FROM SCRATCH
C              AND WRITTEN TO OTAPE
C
C     I/O FILE DEFINITIONS
C     ====================
C     UNIT   DESCRIPTION
C     ====   ===========
C       2    INPUT PARAMETERS.
C       3    OUTPUT REPORT.
C      10    ORIGINAL DATA IN THE ENDF FORMAT.
C      11    FINAL DATA IN THE ENDF FORMAT.
C      12    SCRATCH FILE
C      14    SCRATCH FILE
C      15    SCRATCH FILE
C      16    SCRATCH FILE
C      17    SCRATCH FILE
C
C     OPTIONAL STANDARD FILE NAMES (SEE SUBROUTINE FILIO1 AND FILIO2)
C     ===============================================================
C     UNIT  FILE NAME   FORMAT
C     ====  ==========  ======
C       2   FIXUP.INP    BCD
C       3   FIXUP.LST    BCD
C      10   ENDFB.IN     BCD
C      11   ENDFB.OUT    BCD
C    12-17  (SCRATCH)   BINARY
C
C     INPUT LINES
C     ===========
C     LINE  COLUMNS  FORMAT  DESCRIPTION
C     ====  =======  ======  ===========
C       1    1-14     14I1   INPUT OPTIONS AS DESCRIBED ABOVE.
C                            EACH COLUMN OF THE INPUT LINE CONTROLS
C                            ONE OF THE TESTS/CORRECTIONS DESCRIBED
C                            ABOVE. TESTS/CORRECTION 1-14 (NOT ALL
C                            IMPLEMENTED YET) CORRESPOND TO COLUMNS
C                            1-14 OF THIS INPUT LINE AND ARE TREATED
C                            AS FOLLOWS,
C                            = 0 - DO NOT PERFORM TEST/CORRECTION.
C                            = 1 - PERFORM TEST/CORRECTION.
C                            FOR MT EXCLUSION FROM THRESHOLD TESTS
C                            (COLUMN 2), DELETION (COLUMN 4), OR
C                            SUMMATION (COLUMN 5) THE INPUT OPTION
C                            MAY BE,
C                            = 1 - READ RULES FROM INPUT
C                            = 2 - USE BUILT-IN RULES
C       2    1-72      A72   ENDF INPUT DATA FILENAME
C                            (STANDARD OPTION = ENDFB.IN)
C       3    1-72      A72   ENDF OUTPUT DATA FILENAME
C                            (STANDARD OPTION = ENDFB.OUT)
C     4-M    1-5      FREE   CHARACTER (S,D,T,R,*) FOLLOWED BY BLANK OR
C                     FORM   MT NUMBER
C                            - THE ALLOWED CHARACTERS ARE,
C                            - S OR BLANK = SUM (OR DIFFERENCES)
C                            - D = DELETE
C                            - T = NO THRESHOLD ENERGY CORRECTIONS
C                            - R = RATIO
C                            - * = PRODUCT
C           6-72      FREE   UP TO 10 LOWER AND UPPER MT RANGES WHICH
C                     FORM   WILL BE USED TO DEFINE THE RECONSTRUCTED
C                            CROSS SECTION OR TO DEFINE MT RANGES WHICH
C                            ARE EXCLUDED FROM THRESHOLD TESTS.
C
C                            EACH MT NUMBER IS DEFINED BY A CONTINUOUS
C                            STRING OF DIGITS, POSSIBILITY PRECEEDED BY
C                            A - (MINUS SIGN). EACH MT NUMBER MUST BE
C                            BLANK OR OTHERWISE (NOT A DIGIT) DELIMITED.
C
C                            COLUMNS 6-72 MAY CONTAIN STRINGS OF DIGITS
C                            THE FIRST DIGIT STRING OF EACH PAIR MAY BE
C                            PRECEEDED BY A - (MINUS SIGN).
C
C                            EACH LINE WILL BE INTERPRETED AS FOLLOWS,
C
C                           *SUMMATION (OR DIFFERENCES)
C                            --------------------------
C                            COLUMNS 1-5 = S OR BLANK FOLLOWED BY THE
C                            MT NUMBER TO BE DEFINED BY SUMMATION
C
C                            COLUMNS 6-72 = UP TO 10 MT RANGE (PAIRS OF
C                            MT NUMBERS) TO BE USED TO DEFINED THE SUM.
C                            IF THE FIRST MT NUMBER OF A PAIR IS
C                            NEGATIVE THE RANGE OF MT NUMBERS IS
C                            SUBTRACTED - AT LEAST ONE RANGE MUST BE
C                            SPECIFIED.
C
C                           *DELETIONS
C                            ---------
C                            COLUMNS 1-5 = D FOLLOWED BY BLANKS
C
C                            COLUMNS 6-72 CONTAIN UP TO 10 MT RANGE
C                            (PAIRS OF MT NUMBERS), EACH RANGE DEFINING
C                            A RANGE OF MT NUMBERS TO BE DELETED - AT
C                            LEAST ONE RANGE MUST BE SPECIFIED.
C
C                           *EXCLUSION FROM THRESHOLD TESTS
C                            ------------------------------
C                            COLUMNS 1=5 = T FOLLOWED BY BLANKS
C
C                            COLUMNS 6-72 CONTAIN UP TO 10 MT RANGE
C                            (PAIRS OF MT NUMBERS), EACH RANGE DEFINING
C                            A RANGE OF MT NUMBERS WHOSE THRESHOLD
C                            ENERGY WILL NOT BE CHECKED - AT LEAST ONE
C                            RANGE MUST BE SPECIFIED.
C
C                           *RATIO
C                            -----
C                            COLUMNS 1-5 = R FOLLOWED BY THE MT NUMBER
C                            TO BE DEFINED BY A RATIO
C
C                            COLUMNS 6-72 CONTAINS 2 MT NUMBERS TO BE
C                            USED TO DEFINE THE RATIO.
C
C                           *PRODUCT
C                            -----
C                            COLUMNS 1-5 = * FOLLOWED BY THE MT NUMBER
C                            TO BE DEFINED BY A PRODUCT
C
C                            COLUMNS 6-72 CONTAINS 2 MT NUMBERS TO BE
C                            USED TO DEFINE THE PRODUCT.
C
C                            CONVENTIONS
C                            -----------
C                           *UP TO 20 DELETIONS AND 20 SUMMATIONS OR
C                            RATIOS OR PRODUCTS MAY BE SPECIFIED.
C                           *ONLY 1 EXCLUSION FROM THRESHOLD TESTS
C                            MAY BE SPECIFIED (THE 1 LINE MAY CONTAIN
C                            UP TO 10 MT RANGES TO EXCLUDE FROM TESTS).
C                           *INPUT IS TERMINATED BY INPUTTNG 0 OR
C                            BLANK IN COLUMNS 1-72 (I.E. THE LAST
C                            INPUT LINE MUST BE BLANK).
C                           *THE UPPER LIMIT OF EACH RANGE MUST BE AT
C                            LEAST AS BIG AS THE LOWER LIMIT (IN
C                            ABSOLUTE VALUE).
C                           *FOR RECONSTRUCTION POSITIVE MT RANGES WILL
C                            BE ADDED TO THE SUM AND NEGATIVE MT RANGES
C                            WILL BE SUBTRACTED.
C                           *IF INPUT OPTION 2 (FIRST INPUT LINE) IS
C                            0 THRESHOLD EXCLUSION IS NOT ALLOWED.
C                           *IF INPUT OPTION 4 (FIRST INPUT LINE) IS
C                            0 DELETIONS ARE NOT ALLOWED.
C                           *IF INPUT OPTION 5 (FIRST INPUT LINE) IS
C                            0 SUMMATIONS AND RATIOS ARE NOT ALLOWED.
C     N-K                    IF THE USER SPECIFIES THAT SECTIONS WHICH
C                            ARE NOT PRESENT IN THE ORIGINAL EVALUATION
C                            MAY BE CREATED, TWO LINES MUST BE INPUT FOR
C                            EACH SECTION TO BE CREATED. THE TWO LINES
C                            DEFINE (C1, C2, L1 AND L2) FOR EACH OF THE
C                            FIRST TWO LINES OF THE SECTION TO BE
C                            CREATED. THE FIRST LINE ALSO DEFINES (MAT
C                            AND MT). (N1, N2) ARE ALWAYS ZERO ON THE
C                            FIRST LINE AND WILL BE CALCULATED BY THE
C                            PROGRAM FOR THE SECOND LINE.
C   FIRST    1-11     E11.4  ZA OF SECTION TO BE CREATED
C   LINE    12-22     E11.4  AWRE OF SECTION TO BE CREATED
C           23-33      I11   L1 OF SECTION TO BE CREATED
C           34-44      I11   L2 OF SECTION TO BE CREATED
C           45-48      I4    MAT OF SECTION TO BE CREATED
C           49-51      I3    MT OF SECTION TO BE CREATED
C  SECOND    1-11     E11.4  C1 OF SECTION TO BE CREATED
C   LINE    12-22     E11.4  C2 OF SECTION TO BE CREATED
C           23-33      I11   L1 OF SECTION TO BE CREATED
C           34-44      I11   L2 OF SECTION TO BE CREATED
C                           *PAIRS OF LINES MAY BE IN ANY MAT/MT ORDER
C                            (E.G., THEY NEED NOT BE IN ASCENDING
C                             MAT/MT ORDER).
C                           *UP TO 50 PAIRS OF LINES MAY BE USED TO
C                            DEFINE SECTIONS TO BE CREATED. THE LIST
C                            IS TERMINATED WHEN THE FIRST LINE OF A
C                            PAIR CONTAINS A ZERO (OR BLANK) MAT AND/OR
C                            MT.
C     M-N                    IF THE USER SPECIFIES THAT ENERGIES WHICH
C                            ARE NOT PRESENT IN THE ORIGINAL EVALUATION
C                            MAY BE INSERTED, ONE LINE MUST BE INPUT FOR
C                            EACH ENERGY TO BE INSERTED.
C            1-11    E11.4   ENERGY TO BE INSERTED
C           12-15     I4     MAT IN WHICH TO INSERT ENERGY = 0 = ALL
C           16-18     I3     MT IN WHICH TO INSERT ENERGY = 0 = ALL
C                           *UP TO 50 (ENERGY, MAT, MT) LINES MAY BE
C                            USED. THE LIST IS TERMINATED BY A BLANK
C                            LINE.
C                           *INPUT MAY BE IN ANY (ENERGY, MAT, MT)
C                            ORDER.
C                           *ENERGY POINTS CAN ONLY BE INSERTED WITHIN
C                            THE ORIGINAL ENERGY RANGE OF A SECTION -
C                            THIS OPTION CANNOT BE USED TO EXTEND THE
C                            CROSS SECTION EITHER BELOW OR ABOVE THE
C                            ORIGINAL TABULATED ENERGY RANGE.
C
C     EXAMPLE INPUT NO. 1
C     ===================
C     (1) USE OPTIONS 1-11 (ALL OPTIONS, EXCEPT INSERT ENERGY POINTS)
C     (2) DELETE MT=900 (FOR EXAMPLE PURPOSES ONLY)
C     (3) DEFINE THE FOLLOWING MT NUMBERS TO BE RECONSTRUCTED,
C         (MT=  4) = THE SUM OF MT= 51 THROUGH  91
C         (MT=103) = THE SUM OF MT=700 THROUGH 718 (NOT 719)
C         (MT=104) = THE SUM OF MT=720 THROUGH 738 (NOT 739)
C         (MT=105) = THE SUM OF MT=740 THROUGH 758 (NOT 759)
C         (MT=106) = THE SUM OF MT=760 THROUGH 778 (NOT 779)
C         (MT=107) = THE SUM OF MT=780 THROUGH 798 (NOT 799)
C NEW     (MT= 16) = THE SUM OF MT=875 THROUGH 891
C         (MT=101) = THE SUM OF MT=102 THROUGH 114
C         (MT= 18) = (MT=19) + (MT=20 AND 21) + (MT=38)
C                    (IF TOTAL FISSION, MT=18, IS NOT PRESENT, DEFINE
C                    IT BY SUMMING FIRST, SECOND, ETC. CHANCE - NOTE
C                    THAT THIS MUST BE DONE IN THIS ORDER, SINCE THE
C                    NEXT SUM INVOLVES USING MT=18.
C         (MT= 27) = THE SUM OF MT= 18 AND 101
C                    (MT=101 RECONSTRUCTED ABOVE USED IN SUM).
C         (MT=  3) = THE SUM OF (MT=4)+(MT=6-9)+(MT=16-17)+(MT=22-37)+
C                    (MT=41-45)
C                    (MT=4 AND 27 RECONSTRUCTED ABOVE USED IN SUM).
C         (MT= 19) = (MT=18) - (MT=20 AND 21) - (MT=38)
C                    (DEFINE FIRST CHANGE FISSION BY SUBTRACTION TO
C                    ALLOW RESONANCE CONTRIBUTION FROM MT=18 TO BE
C                    INCLUDED IN MT=19).
C         (MT=  1) = THE SUM OF MT=2 AND 3
C                    (MT=3 RECONSTRUCTED ABOVE USED IN SUM).
C    (4) THRESHOLD ENERGIES OF THE FOLLOWING MT NUMBERS WILL NOT BE
C         TESTED OR CORRECTED.
C         MT=1, 4, 18, 19, 91, 103 THROUGH 114.
C    (5) DEFINE MT=254 TO BE THE CAPTURE TO FISSION RATIO (MT=102/18)
C    (6) CREATE MAT=1300/MT=254 - NOTE, THIS IS NECESSARY IN ORDER TO
C        HAVE THE CAPTURE TO FISSION RATIO OUTPUT IN THE ENDF FORMAT
C
C     NOTE, ON THE FOLLOWING INPUT LINES THE CHARACTERS = ( ) + , HAVE
C     BEEN USED ONLY TO MAKE THE INPUT MORE READABLE - THESE CHARACTERS
C     WILL BE SKIPPED BY THE PROGRAM IN READING INPUT - THE RESULTS
C     WOULD BE THE SAME IF THESE CHARACTERS WERE OMITTED, AS LONG AS
C     ALL OF THE MT NUMBERS ARE DELIMITED, I.E., THERE IS AT LEAST ONE
C     NON-DIGITAL CHARACTER BETWEEN MT NUMBERS. NOTE, THAT - (MINUS
C     SIGN) IS IMPORTANT AND IS USED DURING INPUT TO DEFINE MT RANGES
C     WHICH SHOULD BE SUBTRACTED, E.,G., SEE THE DEFINITION OF MT=19.
C
C     READ FILE /ENDFB6/K300/LEAD.IN AND WRITE /ENDFB6/K300/LEAD.OUT
C
C     THE FOLLOWING 21 INPUT LINES ARE REQUIRED.
C
C     11111111111
C     /ENDFB6/K300/LEAD.IN
C     /ENDFB6/K300/LEAD.OUT
C     D900
C        4=( 51, 91)
C      103=(700,718)
C      104=(720,738)
C      105=(740,758)
C      106=(760,778)
C      107=(780,798)
C       16=(875,891)
C      101=(102,114)
C       18=( 19, 19)+( 20, 21)+( 38, 38)
C       27=( 18, 18)+(101,101)
C        3=(  4,  4)+(  6,  9)+( 16, 17)+( 22, 37)+( 41, 45)
C       19=( 18, 18)-( 20, 21)-( 38, 38)
C        1=(  2,  3)
C     T    (  1,  1)+(  4,  4)+( 18, 18)+( 91, 91)+(103,114)
C     R254=(102/ 18)
C                  (BLANK LINE TO TERMINATE SUMMATION/DELETION RULES)
C      2.00400+ 3 0.00000+ 0          0          01300254
C      0.00000+ 0 0.00000+ 0          0          0
C                  (BLANK LINE TO TERMINATE SECTION CREATION RULES)
C
C     NOTE, THE DELETION AND THRESHOLD EXCLUSION LINES MAY APPEAR IN
C     IN ANY ORDER. HOWEVER, SUMMATION AND RATIO RULES MUST APPEAR IN
C     THE ORDER IN WHICH YOU WANT THEM TO BE EXECUTED - E.G., THE
C     ABOVE INPUT WILL FIRST RECONSTRUCT MT=4, WHICH CAN THEN BE USED
C     TO CONTRIBUTE TO THE FOLLOWING SUM TO DEFINE MT=3, WHICH IN TURN
C     CAN THEN BE USED TO CONTRIBUTE TO THE FOLLOWING SUM TO DEFINE
C     MT=1. IF THE ORDER OF THE INPUT LINES IS CHANGED SUCH THAT MT=3
C     IS RECONSTRUCTED BEFORE MT=4, THE ORIGINAL MT=4 WILL BE USED IN
C     THE SUMMATION TO DEFINE MT=3. THE SAME RULES APPLY TO CALCULATING
C     RATIOS, IF EITHER THE NUMERATOR OR DENOMINATOR IS TO BE DEFINED
C     BY SUMMATION, THIS SHOULD BE DONE BEFORE DEFINING THE RATIO BY
C     INPUT PARAMETERS.
C
C     EXAMPLE INPUT NO. 2
C     ===================
C     (1) USE OPTIONS 1-11 (ALL OPTIONS, EXCEPT INSERT ENERGY POINTS)
C     (2) USE BUILT-IN TABLES FOR SUMMATION/DELETION/THRESHOLD EXCLUSION
C         (THIS ONLY REQUIRES COLUMNS 2, 4 AND 5 TO BE SET =2 ON THE
C         FIRST INPUT LINE. THE BUILT-IN RULES EXACTLY CORRESPOND TO
C         THE INPUT ABOVE UNDER EXAMPLE NO. 1, EXCEPT THAT NO MT NUMBERS
C         WILL BE DELETED.
C     (3) IF NOT PRESENT, CREATE MAT=1300/MT=1
C
C     USE THE STANDARD FILE NAMES ENDFB.IN AND ENDFB.OUT (THIS CAN BE
C     DONE BY LEAVING THE SECOND AND THIRD INPUT LINES BLANK).
C
C     THE FOLLOWING 6 INPUT LINES ARE REQUIRED.
C
C     12122111111
C
C
C      2.00400+ 3 0.00000+ 0          0          01300  1
C      0.00000+ 0 0.00000+ 0          0          0
C                  (BLANK LINE TO TERMINATE SECTION CREATION RULES)
C
C     EXAMPLE INPUT NO. 3
C     ===================
C     (1) USE OPTIONS 1-10 (ALL OPTIONS PRESENTLY IMPLEMENTED, EXCEPT
C         DO NOT ALLOW SECTION CREATION AND INSERT ENERGY POINTS).
C     (2) USE BUILT-IN TABLES FOR SUMMATION/DELETION/THRESHOLD EXCLUSION
C         (THIS ONLY REQUIRES COLUMNS 2, 4 AND 5 TO BE SET =2 ON THE
C         FIRST INPUT LINE. THE BUILT-IN RULES EXACTLY CORRESPOND TO
C         THE INPUT ABOVE UNDER EXAMPLE NO. 1, EXCEPT THAT NO MT NUMBERS
C         WILL BE DELETED.
C     (3) DO NOT CREATE ANY SECTIONS.
C
C     READ FILE /ENDFB6/K300/LEAD.IN AND WRITE /ENDFB6/K300/LEAD.OUT
C
C     THE FOLLOWING 3 INPUT LINES ARE REQUIRED.
C
C     1212211111
C     /ENDFB6/K300/LEAD.IN
C     /ENDFB6/K300/LEAD.OUT
C
C     EXAMPLE INPUT NO. 4
C     ===================
C     SAME AS EXAMPLE NO. 3, ABOVE, EXCEPT INSERT AN ENERGY POINT AT
C     THERMAL FOR ALL REACTIONS WHICH SPAN THE THERMAL ENERGY RANGE.
C
C     USE THE STANDARD FILE NAMES ENDFB.IN AND ENDFB.OUT (THIS CAN BE
C     DONE BY LEAVING THE SECOND AND THIRD INPUT LINES BLANK).
C
C     THE FOLLOWING 5 INPUT LINES ARE REQUIRED.
C
C     121221111101
C
C
C      2.53000- 2   0  0
C                  (BLANK LINE TO TERMINATE ENERGY INSERTS)
C
C     WARNING
C     =======
C     ALTHOUGH THIS PROGRAM IS DESIGNED TO ALLOW REACTIONS TO BE DEFINED
C     BY ADDING OR SUBTRACTING REACTIONS THE USER SHOULD ALWAYS TRY TO
C     DEFINE REACTIONS BY SUMMING TO AVOID NEGATIVE CROSS SECTIONS. FOR
C     EXAMPLE, IT IS POSSIBLE TO CALCULATE MT=3 AND DEFINE MT=1 AS THE
C     SUM OF MT=2 AND 3 (THE RECOMMENDED APPROACH AS USED IN THE ABOVE
C     INPUT). ALTERATIVELY IT IS POSSIBLE TO CALCULATE MT=1 AND DEFINE
C     MT=3 AS MT=1 MINUS MT=2 (THIS APPROACH IS NOT RECOMMENDED).
C
C     THE ONLY BUILT-IN SUMMATION RULE THAT USES SUBTRACTION IS THE
C     CALCULATION OF THE FIRST CHANGE FISSION (MT=19) AS THE TOTAL
C     FISSION (MT=18) MINUS THE SECOND, THIRD AND FOURTH CHANGE FISSION
C     (MT=20, 21, 38). THIS HAS BEEN DONE TO ALLOW THE RESONANCE
C     CONTRIBUTION, CALCULATED BY MANY CODES AND INCLUDED IN MT=18,
C     TO BE CONSISTENTLY INCLUDED IN THE FIRST CHANCE FISSION.
C
C=======================================================================
      INCLUDE 'implicit.h'
C-----08/08/2012 DEFINE CODE NAME
      CHARACTER*8 CODENAME
      COMMON/NAMECODE/CODENAME
      INTEGER*4 OUTP,OTAPE
      CHARACTER*1 ZABCD,FIELD6
      CHARACTER*4 FMTHOL
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LAST1/MATLST,MFLST,MTLST,IZALST,AWRLST,MATIN,MFIN,MTIN,
     1 MATOUT,MFOUT,MTOUT
      COMMON/OPS/IMOPS(14)
      COMMON/MAXIEMEV/XMAX
      COMMON/HOLFMT/FMTHOL(4)
      COMMON/TEMPO/TEMP1,TEMP3,IVERSE
      COMMON/MAKERN/MAKE ,MTMAKE(20),MTRANG(20), MTADD(3,15,20)
      COMMON/SAVE6/MTRAN6(20),MTADD6(2,15,20)
      COMMON/CORTAB/MFCORE,MTCORE,N2CORE
      COMMON/FIELDC/FIELD6(11,6)
      COMMON/PAGER/NPAGE,NPAGEM1
      COMMON/PROJECT/AWI
      COMMON/LISOCOM/LISO
      INCLUDE 'fixup.h'
      DIMENSION ZABCD(12)
C-----08/08/2012 DEFINE CODE NAME
      CODENAME = 'FIXUP   '
C-----INITIALIZE TIMER
      CALL TIMER
C-----DEFINE PAGE SIZES
      NPAGE=MAXPOINT
      NPAGEM1=NPAGE-1
c-----------------------------------------------------------------------
C
C     DEFINE ALL I/O UNITS AND OPTIONALLY DEFINE FILENAMES.
C
c-----------------------------------------------------------------------
      CALL FILIO1
C-----LOAD PARAMETES INTO LABELLED COMMON
      CALL XBLOCK
C-----DEFINE MAXIMUM ENERGY OF INTEREST (100 MEV).
      XMAX  =1.0D+09
C-----READ AND INTERPRET ALL INPUT PARAMETERS.
      CALL READIN
c-----Load ALL MT Definitions
      CALL MTREADIN
c-----Check SUMMATION rules
      CALL MTCHEK
C-----INITIALIZE SECTION VALUES.
      MATLST=-99999
      MFLST=-99999
      MTLST=-99999
      MATIN=0
      MFIN=0
      MTIN=0
      MATOUT=0
      MFOUT=0
      MTOUT=0
      NOSEQ=1
      MT451=0
      MFCORE=0
      MTCORE=0
      N2CORE=0
C-----INITIALIZE ENDF FORMAT DESCRIPTION TO BLANK, CROSS SECTION
C-----TEMPERATURE TO 0.0 AND ENDF FORMAT VERSION NUMBER TO 6.
      DO 10 I=1,4
      FMTHOL(I)='    '
   10 CONTINUE
      TEMP1=0.0d0
      TEMP3=0.0d0
      IVERSE=6
C-----COPY LABEL TO FINAL TAPE.
      CALL COPYL
c-----------------------------------------------------------------------
C
C     COPY UP TO FILE 3 OR 23. CHECK ZA AND AWRE IN ALL SECTIONS.
C
c-----------------------------------------------------------------------
C-----READ HEAD LINE OF NEXT SECTION. COPY SEND/FEND/MEND LINES.
C-----END ON TEND LINE.
   20 CALL CONTIF
      IF(MTH.gt.0) go to 30
      CALL OUTSF
      IF(MATH.lt.0) go to 260
      go to 20
C-----CHECK FOR NEW MAT.
   30 IF(MATH.EQ.MATLST) GO TO 160
c-----------------------------------------------------------------------
C
C     NEW MAT. INITIALIZE AND CHECK ZA AND AWRE.
C
c-----------------------------------------------------------------------
      IZALST=C1H
      AWRLST=C2H
C-----INITIALIZE ENDF FORMAT DESCRIPTION TO BLANK, CROSS SECTION
C-----TEMPERATURE TO 0.0 AND ENDF FORMAT VERSION NUMBER TO 6.
      DO 40 I=1,4
      FMTHOL(I)='    '
   40 CONTINUE
      TEMP1=0.0d0
      TEMP3=0.0d0
      IVERSE=6
      LISO  =0   ! Target isomer state number
      MT451=0
      MFCORE=0
      MTCORE=0
      N2CORE=0
C-----3/22/2012 - INITIALLY ASSUME NEUTRON INCIDENT - AWI = 1
      AWI = 1.0d0
c-----------------------------------------------------------------------
C
C     INITIALIZE RECONSTRUCTION TABLE TO ENDF-6 CONVENTIONS
C     (MAY BE CHANGED IF MF=1, MT-451 INDICATES THAT THE EVALUATION
C     IS NOT IN THE ENDF-6 FORMAT).
C
c-----------------------------------------------------------------------
      IF(IMOPS(5).NE.2) GO TO 80
      DO 70 I=1,20
      MTRANG(I)=MTRAN6(I)
      DO 60 K=1,15
      DO 50 J=1,2
      MTADD(J,K,I)=MTADD6(J,K,I)
   50 CONTINUE
      MTADD(3,K,I)=0
   60 CONTINUE
   70 CONTINUE
c-----------------------------------------------------------------------
C
C     CHECK FOR HOLLERITH SECTION.
C
c-----------------------------------------------------------------------
   80 IF(MFH.NE.1.OR.MTH.NE.451) GO TO 90
C-----READ AND WRITE HOLLERITH SECTION.
      CALL FILE1A
      MT451=1
   90 CALL ZAHOLM(IZALST,LISO,ZABCD)
      CALL OUT9(AWRLST,FIELD6(1,1))
C-----WRITE HEADING FOR OUTPUT.
      WRITE(OUTP,290) ZABCD,MATH,(FIELD6(M,1),M=1,11),FMTHOL
      WRITE(*   ,290) ZABCD,MATH,(FIELD6(M,1),M=1,11),FMTHOL
C-----CHECK FOR ASCENDING MAT ORDER.
      IF(IMOPS(9).LE.0.OR.MATH.GT.MATLST) GO TO 100
      WRITE(OUTP,320) MATH,MATLST
  100 MATLST=MATH
      MFLST=MFH
      MTLST=MTH
      IF(MT451.LE.0) NOSEQ=1
      IERR=0
C-----IF ZA AND AWRE ARE NOT POSITIVE WRITE ERROR MESSAGE AND COPY
C-----ENTIRE MAT.
      IF(IMOPS(1).LE.0.OR.(IZALST.GT.0.AND.AWRLST.GT.0.0d0)) GO TO 210
c-----------------------------------------------------------------------
C
C     COPY ENTIRE MAT WITHOUT CHANGE.
C
c-----------------------------------------------------------------------
      WRITE(OUTP,310)
      WRITE(*   ,310)
      IF(MT451.LE.0) GO TO 110
      MT451=0
      GO TO 120
  110 CALL CONTOF
      CALL COPYSF
C-----COPY UP TO MEND LINE ONE SECTION AT A TIME.
  120 CALL CONTIF
      CALL CONTOF
      IF(MTH.gt.0) go to 130
      IF(MATH.le.0) go to 20
C-----CHECK FOR ASCENDING MF/MT ORDER.
  130 IF(IMOPS(9).LE.0) GO TO 150
      IF(MFH.GT.MFLST.OR.MTH.GT.MTLST) GO TO 140
      WRITE(OUTP,330) MFH,MTH,MFLST,MTLST
  140 MFLST=MFH
      MTLST=MTH
  150 CALL COPYSF
      GO TO 20
c-----------------------------------------------------------------------
C
C     SAME MAT. COMPARE ZA AND AWRE FROM VALUES READ FROM FIRST SECTION.
C     IF THEY ARE NOT THE SAME REPLACE THEM WITH VALUES FROM FIRST
C     SECTION.
C
c-----------------------------------------------------------------------
C-----CHECK FOR ASCENDING MF/MT ORDER.
  160 IF(IMOPS(9).LE.0) GO TO 180
      IF(MFH.GT.MFLST.OR.MTH.GT.MTLST) GO TO 170
      WRITE(OUTP,330) MFH,MTH,MFLST,MTLST
  170 MFLST=MFH
      MTLST=MTH
  180 IZANOW=C1H
      AWRNOW=C2H
C-----CHECK LEGAL C1 AND C2.
      IF(IMOPS(1).LE.0.OR.(IZANOW.EQ.IZALST.AND.AWRNOW.EQ.AWRLST))
     1 GO TO 210
C-----IF BEYOND FILE 3 WRITE TITLE FOR OUTPUT THE FIRST TIME THAT AN
C-----ERROR IS FOUND.
      IF(MFH.LE.3) GO TO 200
      IF(IERR.GT.0) GO TO 190
      CALL OUT9(AWRLST,FIELD6(1,1))
      WRITE(OUTP,300) IZALST,MATH,(FIELD6(M,1),M=1,11)
      WRITE(*   ,300) IZALST,MATH,(FIELD6(M,1),M=1,11)
  190 IERR=IERR+1
  200 CALL OUT9(AWRNOW,FIELD6(1,1))
      CALL OUT9(AWRLST,FIELD6(1,2))
      WRITE(OUTP,270) MFH,MTH,IZANOW,(FIELD6(M,1),M=1,11),
     1 IZALST,(FIELD6(M,2),M=1,11)
      WRITE(*   ,270) MFH,MTH,IZANOW,(FIELD6(M,1),M=1,11),
     1 IZALST,(FIELD6(M,2),M=1,11)
      C1H=IZALST
      C2H=AWRLST
c-----------------------------------------------------------------------
C
C     SAVE TOTAL NU-BAR
C
c-----------------------------------------------------------------------
  210 IF(MFH.NE.1.OR.MTH.NE.452) GO TO 220
      CALL FILE1B
      GO TO 20
c-----------------------------------------------------------------------
C
C     CHECK FOR MF=3 OR 23.
C
c-----------------------------------------------------------------------
  220 IF(MFH.lt.3) go to 230
      IF(MFH.eq.3) go to 250
      IF(MFH.eq.23) go to 250
c-----------------------------------------------------------------------
C
C     NOT MF=3 OR 23. COPY SECTION.
C
c-----------------------------------------------------------------------
C-----OUTPUT FIRST LINE IN STANDARD FORMAT.
  230 IF(MT451.LE.0) GO TO 240
      MT451=0
      GO TO 20
  240 CALL CONTOF
C-----COPY UP TO SEND LINE.
      CALL COPYSF
      GO TO 20
c-----------------------------------------------------------------------
C
C     BEGINNING OF FILE 3 OR 23 FOUND. PROCESS ENTIRE FILE.
C
c-----------------------------------------------------------------------
  250 CALL FILEX
      GO TO 20
c-----------------------------------------------------------------------
C
C     END OF RUN. TERMINATE EXECUTION.
C
c-----------------------------------------------------------------------
c-----Final WARNING if ANY Inconsistences.
  260 call maxie4(1)
      WRITE(OUTP,280)
      WRITE(*   ,280)
      CALL ENDIT
      GO TO 260     ! Cannot get to here.
  270 FORMAT(I3,I4,32X,' ZA=',I7,' AWRE=',11A1,' Changed to'/
     1             39X,' ZA=',I7,' AWRE=',11A1)
  280 FORMAT(1X,78('-')/' End of Run'/1X,78('-'))
  290 FORMAT(1X,78('-')/' Reading ',12A1,' MAT=',I5,' AWRE=',
     1 11A1,1X,4A4/1X,78('-')/' MF  MT  Points',
     2 '      Kelvin     Q-Value Message'/1X,78('-'))
  300 FORMAT(1X,78('-')/' Continue Reading ZA=',I7,' MAT=',I5,
     1 ' AWRE=',11A1/1X,78('-')/' MF  MT  Points Messages'/
     2 1X,78('-'))
  310 FORMAT(I3,I4,32X,' ZA and/or AWRE are not Positive.'/
     1             39X,' MAT Copied without Change')
  320 FORMAT(39X,' WARNING...MAT=',I5,' Less than Last MAT=',I5)
  330 FORMAT(I3,I4,32X,' WARNING...MF/MT Less than Last MF/MT=',I3,I4)
      END
      SUBROUTINE READIN
C=======================================================================
C
C     READ AND EDIT ALL INPUT DATA.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*1 MSIGN,PLUS,MINUS,LINEIN,FIELD6
      CHARACTER*4 ANSWER,HOWMT
      CHARACTER*72 NAMEIN,NAMEOUT
      CHARACTER*72 LINE72
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/IOSTATUS/ISTAT1,ISTAT2
      COMMON/MAKERN/MAKE ,MTMAKE(20),MTRANG(20), MTADD(3,15,20)
      COMMON/MAKERP/MAKEP,MTMAKP(10),MTRANP(10),MTADDP(3,15,10)
      COMMON/SAVE5/MTRAN5(20),MTADD5(2,15,20)
      COMMON/SAVE6/MTRAN6(20),MTADD6(2,15,20)
      COMMON/DELETE/IDEL,MTDEL(2,20)
      COMMON/OPS/IMOPS(14)
      COMMON/READI/MTREAD(2,10)
      COMMON/READC/MSIGN(20)
      COMMON/MAKTAB/C1HTAB(50),C2HTAB(50),C1TAB(50),C2TAB(50),
     1 L1HTAB(50),L2HTAB(50),MATTAB(50),MTTAB(50),L1TAB(50),L2TAB(50),
     2 IMUSED(50),MAKCT
      COMMON/XYINS/XINS(50),MATINS(50),MTINS(50),NXINS
      COMMON/NAMEX/NAMEIN,NAMEOUT
      COMMON/FIELDC/FIELD6(11,6)
      DIMENSION ANSWER(3),HOWMT(5,3),LINEIN(72)
      EQUIVALENCE (LINE72,LINEIN(1))
      DATA ANSWER/' No','Yes','Yes'/
      DATA HOWMT/
     1 '    ','    ','    ','    ','    ',
     2 '(Rea','d as',' Inp','ut) ','    ',
     3 '(Use',' Bui','lt-i','n Ta','ble)'/
      DATA PLUS/'+'/
      DATA MINUS/'-'/
C-----PRINT TITLE FOR OUTPUT.
      WRITE(OUTP,870)
      WRITE(*   ,870)
c-----------------------------------------------------------------------
C
C     READ AND EDIT ALL TEST/CORRECT OPTIONS.
C
c-----------------------------------------------------------------------
      IF(ISTAT1.EQ.1) GO TO 20
      READ(INP,10,END=20,ERR=20) IMOPS
   10 FORMAT(14I1)
      GO TO 30
C-----DEFINE DEFAULT VALUES
   20 ISTAT1    = 1
      IMOPS( 1) = 1   ! correct za and awr
      IMOPS( 2) = 0   ! correct mf=3 thresholds = NO LONGER ALLOWED
      IMOPS( 3) = 0   ! extend cross section up to 20 MeV = NO LONGER
      IMOPS( 4) = 0   ! allow mt deletion
      IMOPS( 5) = 2   ! built in mt reconstruction
      IMOPS( 6) = 1   ! insure cross sections are not negative
      IMOPS( 7) = 1   ! delete energies not in ascending order
      IMOPS( 8) = 1   ! eliminate duplicate data points
      IMOPS( 9) = 1   ! insure sections in ascending mat/mf/mt order
      IMOPS(10) = 1   ! check all mf/mt are legal
      IMOPS(11) = 0   ! allow mt creation
      IMOPS(12) = 0   ! allow energy point insertion
      IMOPS(13) = 0   ! uniform energy grid for all mt
      IMOPS(14) = 1   ! delete section if = 0 at all energies
C-----2015/10/22
c-----------------------------------------------------------------------
C
C     IMOPS(1) Required for ALL ENDF Data = correct ZA & AWRE
C
c-----------------------------------------------------------------------
   30 IMOPS( 1) = 1   ! correct za and awr
c-----------------------------------------------------------------------
C
C     WARNING IF THRESHOLD CORRECTION (no longer ERROR stop)
C
c-----------------------------------------------------------------------
C-----2017/5/20 - changed from ERROR and STOP to WARNING and ignore.
      IF(IMOPS(2).ne.0) THEN
      WRITE(OUTP,40)
      WRITE(   *,40)
   40 FORMAT(
     1 ' WARNING - Threshold Correction is no longer allowed.'/
     2 '           This option has resulted in far too much'/
     3 '           misinterpretation and as such it is judged to'/
     4 '           be too dangerous to be allowed in this code.'/
     5 '           For example, the Laboratory frame of reference'/
     6 '           threshold is temperature dependent = it is not'/
     7 '           uniquely defined by Q value and atomic weight.'/
     8 '           This OPTION is IGNORED.'/1X,78('-'))
      IMOPS(2) = 0
      ENDIF
c-----------------------------------------------------------------------
C
c     2020/2/2  - WARNING IF EXTENSION TO 20 MEV = No longer ALLOWED
C
c-----------------------------------------------------------------------
      IF(IMOPS(3).ne.0) then
      WRITE(OUTP,50)
      WRITE(   *,50)
   50 FORMAT(
     1 ' WARNING - Extension to 20 MeV is no longer allowed.'/
     2 '           This option has resulted in far too much'/
     3 '           misinterpretation and as such it is judged to'/
     4 '           be too dangerous to be allowed in this code.'/
     5 '           If the data is not defined by the evaluator'/
     6 '           this code will not attempt EVALUATION that may'/
     7 '           not agree with the intent of the evaluator.'/
     8 '           If you require data to higher energy contact the'/
     9 '           evaluator.'/
     A '           This OPTION is IGNORED.'/1X,78('-'))
      IMOPS(3) = 0
      ENDIF
c-----------------------------------------------------------------------
C
C     CHECK AND PRINT
C
c-----------------------------------------------------------------------
      DO 200 I=1,14
      IF(IMOPS(I).GT.2) IMOPS(I)=0
      KOPS=IMOPS(I)+1
      GO TO (60,70,80,90,100,110,120,130,140,150,
     1 160,170,180,190),I
   60 WRITE(OUTP,1150) ANSWER(KOPS)
      GO TO 200
   70 WRITE(OUTP,1160) ANSWER(KOPS)
      GO TO 200
   80 WRITE(OUTP,1170) ANSWER(KOPS)
      GO TO 200
   90 WRITE(OUTP,1180) ANSWER(KOPS),(HOWMT(J,KOPS),J=1,5)
      GO TO 200
  100 WRITE(OUTP,1190) ANSWER(KOPS),(HOWMT(J,KOPS),J=1,5)
      GO TO 200
  110 WRITE(OUTP,1200) ANSWER(KOPS)
      GO TO 200
  120 WRITE(OUTP,1210) ANSWER(KOPS)
      GO TO 200
  130 WRITE(OUTP,1220) ANSWER(KOPS)
      GO TO 200
  140 WRITE(OUTP,1230) ANSWER(KOPS)
      GO TO 200
  150 WRITE(OUTP,1240) ANSWER(KOPS)
      GO TO 200
  160 WRITE(OUTP,1250) ANSWER(KOPS)
      GO TO 200
  170 WRITE(OUTP,1260) ANSWER(KOPS)
      GO TO 200
  180 WRITE(OUTP,1270) ANSWER(KOPS)
      GO TO 200
  190 WRITE(OUTP,1280) ANSWER(KOPS)
  200 CONTINUE
c-----------------------------------------------------------------------
C
C     ERROR STOP IF NO CROSS SECTION RECONSTRUCTION
C
c-----------------------------------------------------------------------
      IF(IMOPS(5).LT.1.OR.IMOPS(5).GT.2) THEN
      WRITE(OUTP,210)
      WRITE(   *,210)
  210 FORMAT(///
     1 ' ERROR - Cross Section Reconstruction is MANDATORY'/
     2 '         You MUST define option (5) to be 1 or 2,'/
     3 '         1) YOU input summation rules, or,'/
     4 '         2) Use bult-in summation rules.'/
     5 '            (2 is RECOMMENDED unless you have '/
     6 '             special needs = CAVEAT EMPTOR)'///)
      CALL ENDERROR
      ENDIF
c-----------------------------------------------------------------------
C
C     READ FILENAMES - IF BLANK USE STANDARD FILENAMES
C
c-----------------------------------------------------------------------
      IF(ISTAT1.EQ.1) GO TO 230
      READ(INP,220,END=230,ERR=230) NAMEIN
  220 FORMAT(A72)
      IF(NAMEIN.EQ.' ') NAMEIN = 'ENDFB.IN'
C-----OUTPUT DATA.
      READ(INP,220,END=240,ERR=240) NAMEOUT
      IF(NAMEOUT.EQ.' ') NAMEOUT = 'ENDFB.OUT'
      GO TO 250
C-----USE DEFAULT NAMES
  230 NAMEIN  = 'ENDFB.IN'
  240 NAMEOUT = 'ENDFB.OUT'
      ISTAT1 = 1
C-----PRINT FINAL FILENAMES
  250 WRITE(OUTP,260) NAMEIN,NAMEOUT
      WRITE(*   ,260) NAMEIN,NAMEOUT
  260 FORMAT(1X,78('-')/
     1 ' ENDF Input and Output Data FilenameS'/1X,A72/
     2 1X,A72)
c-----------------------------------------------------------------------
C
C     OPEN ENDF DATA FILES
C
c-----------------------------------------------------------------------
      CALL FILIO2
c-----------------------------------------------------------------------
C
C     TERMINATE IF OPEN OPENING ENDF DATA
C
c-----------------------------------------------------------------------
      IF(ISTAT2.EQ.1) THEN
      WRITE(OUTP,270) NAMEIN
      WRITE(   *,270) NAMEIN
  270 FORMAT(//' ERROR - Opening ENDF formatted file'/1X,A72//)
      CALL ENDERROR
      ENDIF
c-----------------------------------------------------------------------
C
C     READ AND EDIT ALL DELETION/RECONSTRUCTION REQUESTS.
C
c-----------------------------------------------------------------------
C-----INITIALIZE COUNT OF MT RANGES READ FROM INPUT (MT NUMBERS TO BE
C-----DELETED, MT NUMBERS TO BE RECONSRUCTED AND THE ERROR COUNT.
      INDEL=0
      INMAKE=0
      IERR=0
      IF(IMOPS(4).NE.2) IDEL=0
      IF(IMOPS(5).NE.2) MAKE=0
C-----DO NOT READ THRESHOLD/DELETION/SUMMATION RULES UNLESS REQUESTED.
C-----2017/5/20 - IMOPS(2) must = 0 = no threshold "correction"
      IF(IMOPS(4).EQ.1.OR.IMOPS(5).EQ.1) GO TO 280
      GO TO 440
C-----PRINT TITLE FOR INPUT DATA INTERPRETATION.
  280 WRITE(OUTP,880)
      WRITE(OUTP,900)
      WRITE(*   ,880)
      WRITE(*   ,900)
C-----READ THRESHOLD TEST EXCLUSION/DELETION/RECONSTRUCTION REQUESTS
  290 IF(ISTAT1.EQ.1) GO TO 310
      READ(INP,300,END=310,ERR=310) LINEIN
  300 FORMAT(72A1)
      GO TO 320
  310 ISTAT1 = 1
      LINE72 = ' '
C-----SCAN COLUMNS 1-5 FOR SUM MT.
  320 MTI=0
      CALL SCANER(LINEIN,MTI,ITYPE,MTREAD,KRANGE)
C-----CHECK FOR END OF INPUT.
      IF(MTI.LE.0.AND.KRANGE.LE.0) GO TO 420
C-----CHECK FOR DELETION - ITYPE = 1 FROM SCANER
      IF(ITYPE.NE.1) go to 350
c-----------------------------------------------------------------------
C
C     DELETION. TEST, SAVE AND LIST PARAMETERS.
C
c-----------------------------------------------------------------------
      DO 330 I=1,KRANGE
      INDEL=INDEL+1
      II=INDEL
      IF(II.GT.20) II=20
      MTDEL(1,II)=IABS(MTREAD(1,I))
      MTDEL(2,II)=IABS(MTREAD(2,I))
      WRITE(OUTP,910) MTDEL(1,II),MTDEL(2,II)
C-----PRINT ERROR IF MT RANGES ARE NOT LEGAL (ASCENDING MT ORDER).
      IF(MTDEL(1,II).LE.MTDEL(2,II)) GO TO 330
      WRITE(OUTP,1070)
      IERR=IERR+1
  330 CONTINUE
C-----PRINT ERROR MESSAGE IF DELETIONS ARE NOT ALLOWED.
      IF(IMOPS(4).EQ.1) GO TO 340
      IERR=IERR+1
      WRITE(OUTP,1000)
      GO TO 290
C-----PRINT ERROR MESSAGE IF OVER 20 DELETION REQUESTS.
  340 IF(INDEL.LT.20) GO TO 290
      IERR=IERR+1
      WRITE(OUTP,950)
      GO TO 290
c-----------------------------------------------------------------------
C
C     RATIO, PRODUCT OR SUMMATION. TEST, SAVE AND LIST PARAMETERS.
C
c-----------------------------------------------------------------------
C-----SAVE AND PRINT PARAMETERS.
  350 MAKEP1=INMAKE
      INMAKE=INMAKE+1
      IF(INMAKE.LE.20) MAKEP1=INMAKE
      MTMAKE(MAKEP1)=MTI
      MTRANG(MAKEP1)=KRANGE
      DO 360 J=1,KRANGE
      MTADD(1,J,MAKEP1)=MTREAD(1,J)
      MTADD(2,J,MAKEP1)=MTREAD(2,J)
      MTADD(3,J,MAKEP1)=0
      MSIGN(J)=PLUS
      IF(MTREAD(1,J).LT.0) MSIGN(J)=MINUS
      MTREAD(1,J)=IABS(MTREAD(1,J))
      MTREAD(2,J)=IABS(MTREAD(2,J))
  360 CONTINUE
c-----------------------------------------------------------------------
C
C     CHECK FOR RATIO - TYPE = 3 FROM SCANER.
C
c-----------------------------------------------------------------------
      IF(ITYPE.NE.3) GO TO 370
      MTADD(3,1,MAKEP1)=3
      MTRANG(MAKEP1)=1
      IF(MTREAD(2,1).LT.MTREAD(1,1)) MTADD(3,1,MAKEP1)=-3
      WRITE(OUTP,970) MTI,MTREAD(1,1),MTREAD(2,1)
C-----RATIO REQUIRES 2 DIFFERENT MT NUMBERS.
      IF(MTREAD(1,1).NE.MTREAD(2,1)) GO TO 400
      WRITE(OUTP,990)
      IERR=IERR+1
      GO TO 400
c-----------------------------------------------------------------------
C
C     CHECK FOR PRODUCT - TYPE = 4 FROM SCANER.
C
c-----------------------------------------------------------------------
  370 IF(ITYPE.NE.4) GO TO 380
      MTADD(3,1,MAKEP1)=4
      MTRANG(MAKEP1)=1
      WRITE(OUTP,980) MTI,MTREAD(1,1),MTREAD(2,1)
C-----PRODUCT REQUIRES 2 DIFFERENT MT NUMBERS.
      IF(MTREAD(1,1).NE.MTREAD(2,1)) GO TO 400
      WRITE(OUTP,990)
      IERR=IERR+1
      GO TO 400
c-----------------------------------------------------------------------
C
C     SUMMATION.
C
c-----------------------------------------------------------------------
  380 WRITE(OUTP,960) MTI,(MSIGN(I),(MTREAD(J,I),J=1,2),I=1,KRANGE)
C-----PRINT ERROR IF MT RANGES ARE NOT LEGAL (ASCENDING MT ORDER).
      DO 390 I=1,KRANGE
      IF(MTREAD(1,I).LE.MTREAD(2,I)) GO TO 390
      WRITE(OUTP,1070)
      IERR=IERR+1
  390 CONTINUE
C-----PRINT ERROR MESSAGE IF SUMMATIONS ARE NOT ALLOWED.
  400 IF(IMOPS(5).EQ.1) GO TO 410
      IERR=IERR+1
      WRITE(OUTP,1000)
      GO TO 290
C-----PRINT ERROR MESSAGE IF OVER 20 SUMMATIONS.
  410 IF(INMAKE.LE.20) GO TO 290
      IERR=IERR+1
      WRITE(OUTP,1010)
      GO TO 290
c-----------------------------------------------------------------------
C
C     END OF INPUT DATA. TERMINATE IF ANY ERRORS IN INPUT DATA.
C
c-----------------------------------------------------------------------
  420 IF(IERR.LE.0) GO TO 430
      WRITE(OUTP,1060)
      WRITE(OUTP,1040)
c-----2018/1/22 - Added on-line
      WRITE(*   ,1060)
      WRITE(*   ,1040)
      CALL ENDERROR
c-----------------------------------------------------------------------
C
C     IF ANY BUILT-IN DELETION/SUMMATION/THRESHOLD EXCLUSION RULES WILL
C     BE USED LIST THEM.
C
c-----------------------------------------------------------------------
C-----IF INPUT DATA HAS BEEN READ FOR ANY TYPE OF REQUEST TURN OFF
C-----CORRESPONDING BUILT-IN TABLE.
  430 IF(INDEL.GT.0) IDEL=0
      IF(INMAKE.GT.0) MAKE=0
C-----IF ANY BUILT-IN TABLES WILL BE USED LIST THEM.
  440 IF(IDEL.LE.0.AND.MAKE.LE.0) GO TO 650
C-----PRINT TITLE FOR BUILT-IN TABLES.
      WRITE(OUTP,890)
      WRITE(OUTP,900)
      IERR=0
C-----LIST BUILT-IN DELETION RULES (IF THEY WILL BE USED).
      IF(IDEL.LE.0) GO TO 460
      DO 450 M=1,IDEL
      WRITE(OUTP,910) MTDEL(1,M),MTDEL(2,M)
C-----PRINT ERROR IF BUILT-IN MT NUMBER TO BE DELETED IS ZERO.
      IF(MTDEL(1,M).GT.0) GO TO 450
      WRITE(OUTP,1020)
      IERR=IERR+1
  450 CONTINUE
c-----------------------------------------------------------------------
C
C     LIST BUILT-IN SUMMATION RULES FOR ENDF-5 AND 6 (IF ANY ARE
C     USED).
C
c-----------------------------------------------------------------------
  460 IF(MAKE.LE.0) GO TO 650
c-----------------------------------------------------------------------
C
C     ENDF-5.
C
c-----------------------------------------------------------------------
      WRITE(OUTP,920)
      DO 520 M=1,MAKE
      K=MTRAN5(M)
      IF(K.LE.0) GO TO 480
      DO 470 J=1,K
      MTREAD(1,J)=IABS(MTADD5(1,J,M))
      MTREAD(2,J)=IABS(MTADD5(2,J,M))
      MSIGN(J)=PLUS
      IF(MTADD5(1,J,M).LT.0) MSIGN(J)=MINUS
  470 CONTINUE
      WRITE(OUTP,960) MTMAKE(M),(MSIGN(J),(MTREAD(I,J),I=1,2),J=1,K)
      GO TO 490
  480 WRITE(OUTP,960) MTMAKE(M)
C-----PRINT ERROR IF BUILT-IN SUMMATION MT NUMBER IS NOT POSITIVE OR
C-----NO MT RANGES ARE GIVEN TO DEFINE HOW TO SUM.
  490 IF(MTMAKE(M).GT.0.AND.K.GT.0) GO TO 500
      WRITE(OUTP,960) MTMAKE(M)
      WRITE(OUTP,1030)
      IERR=IERR+1
      GO TO 520
C-----PRINT ERROR IF MT RANGES ARE NOT LEGAL (ASCENDING MT ORDER).
  500 DO 510 I=1,K
      IF(MTREAD(1,I).LE.MTREAD(2,I)) GO TO 510
      WRITE(OUTP,1070)
      IERR=IERR+1
  510 CONTINUE
  520 CONTINUE
c-----------------------------------------------------------------------
C
C     ENDF-6
C
c-----------------------------------------------------------------------
      WRITE(OUTP,930)
      DO 580 M=1,MAKE
      K=MTRAN6(M)
      IF(K.LE.0) GO TO 540
      DO 530 J=1,K
      MTREAD(1,J)=IABS(MTADD6(1,J,M))
      MTREAD(2,J)=IABS(MTADD6(2,J,M))
      MSIGN(J)=PLUS
      IF(MTADD6(1,J,M).LT.0) MSIGN(J)=MINUS
  530 CONTINUE
      WRITE(OUTP,960) MTMAKE(M),(MSIGN(J),(MTREAD(I,J),I=1,2),J=1,K)
      GO TO 550
  540 WRITE(OUTP,960) MTMAKE(M)
C-----PRINT ERROR IF BUILT-IN SUMMATION MT NUMBER IS NOT POSITIVE OR
C-----NO MT RANGES ARE GIVEN TO DEFINE HOW TO SUM.
  550 IF(MTMAKE(M).GT.0.AND.K.GT.0) GO TO 560
      WRITE(OUTP,960) MTMAKE(M)
      WRITE(OUTP,1030)
      IERR=IERR+1
      GO TO 580
C-----PRINT ERROR IF MT RANGES ARE NOT LEGAL (ASCENDING MT ORDER).
  560 DO 570 I=1,K
      IF(MTREAD(1,I).LE.MTREAD(2,I)) GO TO 570
      WRITE(OUTP,1070)
      IERR=IERR+1
  570 CONTINUE
  580 CONTINUE
c-----------------------------------------------------------------------
C
C     ENDF-6 PHOTONS
C
c-----------------------------------------------------------------------
      WRITE(OUTP,940)
      DO 640 M=1,MAKEP
      K=MTRANP(M)
      IF(K.LE.0) GO TO 600
      DO 590 J=1,K
      MTREAD(1,J)=IABS(MTADDP(1,J,M))
      MTREAD(2,J)=IABS(MTADDP(2,J,M))
      MSIGN(J)=PLUS
      IF(MTADDP(1,J,M).LT.0) MSIGN(J)=MINUS
  590 CONTINUE
      WRITE(OUTP,960) MTMAKP(M),(MSIGN(J),(MTREAD(I,J),I=1,2),J=1,K)
      GO TO 610
  600 WRITE(OUTP,960) MTMAKP(M)
C-----PRINT ERROR IF BUILT-IN SUMMATION MT NUMBER IS NOT POSITIVE OR
C-----NO MT RANGES ARE GIVEN TO DEFINE HOW TO SUM.
  610 IF(MTMAKP(M).GT.0.AND.K.GT.0) GO TO 620
      WRITE(OUTP,960) MTMAKP(M)
      WRITE(OUTP,1030)
      IERR=IERR+1
      GO TO 640
C-----PRINT ERROR IF MT RANGES ARE NOT LEGAL (ASCENDING MT ORDER).
  620 DO 630 I=1,K
      IF(MTREAD(1,I).LE.MTREAD(2,I)) GO TO 630
      WRITE(OUTP,1070)
      IERR=IERR+1
  630 CONTINUE
  640 CONTINUE
c-----------------------------------------------------------------------
C
C     TERMINATE IF ANY ERRORS IN BUILT-IN DATA.
C
c-----------------------------------------------------------------------
  650 WRITE(OUTP,1060)
      IF(IERR.LE.0) GO TO 660
      WRITE(OUTP,1050)
c-----2018/1/22 - Added on-line
      WRITE(*   ,1050)
      CALL ENDERROR
c-----------------------------------------------------------------------
C
C     ALL INPUT AND BUILT-IN TABLES ARE O.K.
C
c-----------------------------------------------------------------------
C-----IF INPUT DATA SHOULD BE USED DEFINE REQUEST COUNTS.
  660 IF(MAKE.LE.0) MAKE=INMAKE
      IF(IDEL.LE.0) IDEL=INDEL
c-----------------------------------------------------------------------
C
C     IF SECTIONS CAN BE CREATED READ AND LIST FIRST TWO LINES OF
C     EACH SECTION TO BE CREATED.
C
c-----------------------------------------------------------------------
      IF(IMOPS(11).GT.0) GO TO 670
C-----NO SECTIONS TO CREATE.
      MAKCT=0
      GO TO 780
c-----READ DEFINITION OF SECTIONS TO CREATE.
  670 DO 760 I=1,50
  680 IF(ISTAT1.EQ.1) GO TO 700
c-----2017/5/6 - Changed all floating point to character
      READ(INP,690,END=700,ERR=700) ((FIELD6(j,k),j=1,11),k=1,2),
     1 L1HTAB(I),L2HTAB(I),MATTAB(I),MTTAB(I)
  690 FORMAT(22A1,2I11,I4,I3)
      CALL IN9(C1HTAB(I),FIELD6(1,1))
      CALL IN9(C2HTAB(I),FIELD6(1,2))
c-----2017/5/6 - Changed all floating point to character
      GO TO 710
  700 ISTAT1    = 1
      MATTAB(I) = 0
      MTTAB(I)  = 0
C-----01/23/05 - SKIP IF MT NOT DEFINED (MAT = 0 IS O.K.)
  710 IF(MTTAB(I).LE.0) GO TO 770
      IF(I.EQ.1) WRITE(OUTP,1080)
      CALL OUT9(C1HTAB(I),FIELD6(1,1))
      CALL OUT9(C2HTAB(I),FIELD6(1,2))
      WRITE(OUTP,1090) ((FIELD6(M,J),M=1,11),J=1,2),
     1 L1HTAB(I),L2HTAB(I),MATTAB(I),MTTAB(I)
      IF(ISTAT1.EQ.1) GO TO 720
c-----2017/5/6 - Changed all floating point to character
      READ(INP,690,END=720,ERR=720) ((FIELD6(j,k),j=1,11),k=1,2),
     1 L1TAB(I),L2TAB(I)
      CALL IN9(C1TAB(I),FIELD6(1,1))
      CALL IN9(C2TAB(I),FIELD6(1,2))
c-----2017/5/6 - Changed all floating point to character
      GO TO 730
  720 ISTAT1   = 1
      C1TAB(I) = 0.0d0
      C2TAB(I) = 0.0d0
      L1TAB(I) = 0
      L2TAB(I) = 0
  730 CALL OUT9(C1TAB(I),FIELD6(1,1))
      CALL OUT9(C2TAB(I),FIELD6(1,2))
      WRITE(OUTP,1090) ((FIELD6(M,J),M=1,11),J=1,2),
     1 L1TAB(I),L2TAB(I),MATTAB(I),MTTAB(I)
C-----CHECK FOR DUPLICATE MAT/MT.
      IF(I.EQ.1) GO TO 760
      IM1=I-1
      DO 740 J=1,IM1
      IF(MATTAB(J).EQ.MATTAB(I).AND.MTTAB(J).EQ.MTTAB(I)) GO TO 750
  740 CONTINUE
      GO TO 760
C-----PRINT MESSAGE AND SKIP DUPLICATE MAT/MT.
  750 WRITE(OUTP,1110)
      WRITE(*   ,1110)
      GO TO 680
  760 CONTINUE
  770 MAKCT=I-1
      IF(MAKCT.EQ.0) WRITE(OUTP,1100)
      IF(MAKCT.EQ.0) WRITE(*   ,1100)
c-----------------------------------------------------------------------
C
C     IF ENERGY POINTS CAN BE INSERTED READ UP TO 50 ENERGY, MAT, MT
C
c-----------------------------------------------------------------------
  780 NXINS=0
      IF(IMOPS(12).LE.0) GO TO 860
      DO 800 NXINS=1,50
      IF(ISTAT1.EQ.1) GO TO 810
      READ(INP,790,END=810,ERR=810)
     1 (LINEIN(K),K=1,11),MATINS(NXINS),MTINS(NXINS)
  790 FORMAT(11A1,I4,I3)
      CALL IN9(XINS(NXINS),LINEIN)
C-----LIST ENDS IF ENERGY IS NOT POSITIVE.
      IF(XINS(NXINS).le.0.0d+0) go to 810
      IF(NXINS.EQ.1) WRITE(OUTP,1130)
      CALL OUT9(XINS(NXINS),FIELD6(1,1))
      WRITE(OUTP,1140) (FIELD6(M,1),M=1,11),MATINS(NXINS),
     1 MTINS(NXINS)
  800 CONTINUE
      NXINS=51
  810 NXINS=NXINS-1
      IF(NXINS.LE.1) GO TO 850
c-----------------------------------------------------------------------
C
C     SORT INTO ASCENDING ENERGY ORDER.
C
c-----------------------------------------------------------------------
      KXINS=NXINS
      DO 840 I=2,NXINS
C-----SELECT LARGEST REMAINING ENERGY.
      IBIG=1
      DO 820 J=2,KXINS
      IF(XINS(J).GE.XINS(IBIG)) IBIG=J
  820 CONTINUE
C-----MOVE TO END OF TABLE.
      IF(IBIG.EQ.KXINS) GO TO 830
      XBIG=XINS(IBIG)
      XINS(IBIG)=XINS(KXINS)
      XINS(KXINS)=XBIG
      MATX=MATINS(IBIG)
      MATINS(IBIG)=MATINS(KXINS)
      MATINS(KXINS)=MATX
      MTX=MTINS(IBIG)
      MTINS(IBIG)=MTINS(KXINS)
      MTINS(KXINS)=MTX
C-----DECREMENT REMAINING TABLE SIZE.
  830 KXINS=KXINS-1
  840 CONTINUE
C-----PRINT MESSAGE IF NO POINTS TO INSERT.
  850 IF(NXINS.LE.0) WRITE(OUTP,1120)
c-----------------------------------------------------------------------
C
C     END OF INPUT.
C
c-----------------------------------------------------------------------
  860 WRITE(OUTP,1060)
      WRITE(*   ,1060)
      RETURN
  870 FORMAT(' Test and Correct Data in the ENDF FORMAT',
     1 ' (FIXUP 2021-2)'/1X,78('-')/
     1 ' Interpretation of Input Test/Correction Options'/1X,78('-'))
  880 FORMAT(1X,78('-')/' Input Summation/Deletion/Threshold',
     1 ' Exclusion Rules')
  890 FORMAT(1X,78('-')/' Built-in Summation/Deletion/Threshold',
     1 ' Exclusion Rules')
  900 FORMAT(
     1 1X,78('-')/'  MT = MT Ranges and Messages'/1X,78('-'))
  910 FORMAT(6X,1X,'(',I3,',',I3,')',' Delete')
  920 FORMAT(1X,78('-')/' Neutrons - ENDF-5 and Earlier Versions of',
     1 ' ENDF'/1X,78('-'))
  930 FORMAT(1X,78('-')/' Neutrons - ENDF-6'/1X,78('-'))
  940 FORMAT(1X,78('-')/' Photons, Electrons and Positrons - ENDF-6'/
     1 1X,78('-'))
  950 FORMAT(12X,'ERROR---Over 20 Deletion Requests.')
  960 FORMAT(I4,' =',(6(A1,'(',I3,',',I3,')'))/
     1           (6X, 6(A1,'(',I3,',',I3,')'))/
     2           (6X, 6(A1,'(',I3,',',I3,')')))
  970 FORMAT(I4,' = (',I3,'/',I3,') WARNING - Defining a Ratio')
  980 FORMAT(I4,' = (',I3,'*',I3,') WARNING - Defining a Product')
  990 FORMAT(12X,' 2 Different MT Numbers Required for Ratio or',
     1 ' Product')
 1000 FORMAT(12X,'ERROR---Input Deletions Not Allowed.')
 1010 FORMAT(12X,'ERROR---Input Summations Not Allowed.')
 1020 FORMAT(12X,'ERROR---MT MUST be Positive (Check Blank Common)')
 1030 FORMAT(12X,'ERROR---MT and Number of Ranges MUST be Positive',
     1 ' (Check Blank Commen)')
 1040 FORMAT(' ERRORS in Input Data---Execution Terminated'/
     1 1X,78('-'))
 1050 FORMAT(' ERRORS in Built-in Data---Execution Terminated'/
     1 1X,78('-'))
 1060 FORMAT(1X,78('-'))
 1070 FORMAT(12X,'ERROR---MT Range is Not in Ascending Order.')
 1080 FORMAT(
     1 ' If Not Present the Following Sections will be Created'/
     2 1X,78('-')/
     3 10X,'C1',9X,'C2',9X,'L1',9X,'L2','  MAT  MT'/
     4 1X,78('-'))
 1090 FORMAT(1X,22A1,2I11,I5,I4)
 1100 FORMAT(1X,78('-')/' No Sections Will be Created')
 1110 FORMAT(54X,' Duplicate MAT/MT Ignored')
 1120 FORMAT(1X,78('-')/' No Energy Points Will be Inserted')
 1130 FORMAT(1X,78('-')/
     1 ' If Not Present the Following Energies Will be Inserted'/
     2 1X,78('-')/
     3 '   Energy-eV   MAT    MT'/1X,78('-'))
 1140 FORMAT(1X,11A1,2I6)
 1150 FORMAT(' Correct ZA/AWR in All Sections----------',2X,A3,
     1 ' (Required for ALL ENDF Data)')
 1160 FORMAT(' Correct Thresholds----------------------',2X,A3,
     1 ' (No Longer Allowed)')
 1170 FORMAT(' Extend Cross Section to 20 MeV----------',2X,A3,
     1 ' (No Longer Allowed)')
 1180 FORMAT(' Allow Cross Section Deletion------------',2X,A3,1X,5A4)
 1190 FORMAT(' Allow Cross Section Reconstruction------',2X,A3,1X,5A4)
 1200 FORMAT(' Make All Cross Sections Non-Negative----',2X,A3)
 1210 FORMAT(' Delete Energies Not in Ascending Order--',2X,A3)
 1220 FORMAT(' Delete Duplicate Points-----------------',2X,A3)
 1230 FORMAT(' Check for Ascending MAT/MF/MT Order-----',2X,A3)
 1240 FORMAT(' Check for Legal MF/MT Numbers-----------',2X,A3)
 1250 FORMAT(' Allow Creation of Missing Sections------',2X,A3)
 1260 FORMAT(' Allow Insertion of Energy Points--------',2X,A3)
 1270 FORMAT(' Uniform Energy Grid for ALL MT----------',2X,A3)
 1280 FORMAT(' Delete Section if Cross Section =0------',2X,A3)
      END
      SUBROUTINE FILE1A
C=======================================================================
C
C     ADD COMMENTS AT THE END OF FILE 1, SECTION 451 TO INDICATE
C     THAT THIS MATERIAL HAS BEEN PROCESSED BY PROGRAM FIXUP AND
C     TO SPECIFY THE OPERATIONS PERFORMED BY FIXUP.
C
C     DEFINE FORMAT TO BE ENDF-4, 5 OR 6.
C
C     THE ENDF FORMAT CAN BE DETERMINED FROM THE SECOND LINE.
C     ENDF-4  = N1 > N2 = 0, LINE COUNT (POSITIVE)
C     ENDF-5  = N1 = N2 = 0
C     ENDF-6  =      N2 = VERSION NUMBER (6 OR MORE)
C
C     First line has already been read.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 PROGDOC1,YESX,NOX
      CHARACTER*4 FMTTAB,FMTHOL
      CHARACTER*66 PROGDOC
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      COMMON/OPS/IMOPS(14)
      COMMON/MAKERN/MAKE ,MTMAKE(20),MTRANG(20), MTADD(3,15,20)
      COMMON/MAKERP/MAKEP,MTMAKP(10),MTRANP(10),MTADDP(3,15,10)
      COMMON/SAVE5/MTRAN5(20),MTADD5(2,15,20)
      COMMON/HOLFMT/FMTHOL(4)
      COMMON/TEMPO/TEMP1,TEMP3,IVERSE
      COMMON/PROJECT/AWI
      COMMON/LISOCOM/LISO
      DIMENSION FMTTAB(4,3),PROGDOC(15),PROGDOC1(66,15),
     1 YESX(3),NOX(3)
      EQUIVALENCE (PROGDOC(1),PROGDOC1(1,1))
      DATA FMTTAB/
     1 'ENDF','-4 F','ORMA','T   ',
     2 'ENDF','-5 F','ORMA','T   ',
     3 'ENDF','-6 F','ORMA','T   '/
      DATA YESX/'Y','e','s'/
      DATA NOX /'N','o',' '/
c-----------------------------------------------------------------------
c
C     DOCUMENTATION TO ADD TO ENDF OUTPUT - EACH LINE IS 66
C     CHARACTERS LONG - FIELDS 12345678901 ARE FILLED IN WITH
C     11 CHARACTERS DURING EXECUTION.
c
c-----------------------------------------------------------------------
C               1         2         3         4         5         6
C       12345678901234567890123456789012345678901234567890123456789012
C       3456
      DATA PROGDOC/
     1 ' ***************** Program FIXUP (Version 2021-2) ************',
     1 ' Corrected ZA/AWR in All Sections-----------------------------',
     2 ' Corrected Thresholds-----------------------------------------',
     3 ' Extended Cross Sections to 20 MeV----------------------------',
     4 ' Allow Cross Section Deletion---------------------------------',
     5 ' Allow Cross Section Reconstruction---------------------------',
     6 ' Make All Cross Sections Non-Negative-------------------------',
     7 ' Delete Energies Not in Ascending Order-----------------------',
     8 ' Deleted Duplicate Points-------------------------------------',
     9 ' Check for Ascending MAT/MF/MT Order--------------------------',
     A ' Check for Legal MF/MT Numbers--------------------------------',
     1 ' Allow Creation of Missing Sections---------------------------',
     2 ' Allow Insertion of Energy Points-----------------------------',
     3 ' Uniform Energy Grid for ALL MT-------------------------------',
     4 ' Delete Section if Cross Section =0 at All Energies-----------'/
C-----FILL IN REMAINDER OF FIRST LINE.
      PROGDOC1(63,1) = '*'
      PROGDOC1(64,1) = '*'
      PROGDOC1(65,1) = '*'
      PROGDOC1(66,1) = '*'
C-----SECTION HEAD LINE WAS READ IN MAIN. OUTPUT IT.
      CALL CONTOF
c
c     Read second line
c
C-----AND DETERMINE IF THIS IS THE ENDF-4, 5 OR 6 FORMAT.
      CALL CARDIF
      IVERSE=4
      LISOX = L2        ! save potential target state number
C-----CHECK FOR ENDF-4.
C-----IV N1 > 0, N2 = 0
      IF(N1.GT.0.AND.N2.EQ.0) GO TO 10
C-----NOT ENDF-4. READ THIRD LINE.
      N2IN=N2
      CALL CARDOF
c
c     Read third line
c
      CALL CARDIF
      IVERSE=5
C-----CHECK FOR ENDF-5 FORMAT.
      IF(N2IN.LE.0) GO TO 10
C-----3/20/2012 - ADDED AWI (INCIDENT PARTICLE) FOR THRESHOLLD TESTS.
      AWI = C1
      IF(AWI.LE.0.0d0) AWI = 0.0d0 ! DEFAULT TO PHOTON
      NSUB=N1
C-----ENDF-6 FORMAT. READ FOURTH LINE.
      CALL CARDOF
c
c     Read third line
c
      CALL CARDIF
      IVERSE=6
      LISO = LISOX    ! Target state
C-----DEFINE TEMPERATURE OF FILE 3 CROSS SECTIONS.
      TEMP3=C1
C-----DESCRIBE ENDF FORMAT.
   10 II=IVERSE-3
      DO 20 I=1,4
      FMTHOL(I)=FMTTAB(I,II)
   20 CONTINUE
c-----------------------------------------------------------------------
C
C     IF NOT ENDF-6 FORMAT SWITCH TO ENDF-5 RECONSTRUCTION
C     CONVENTIONS.
C
c-----------------------------------------------------------------------
      IF(IVERSE.EQ.6.OR.IMOPS(5).NE.2) GO TO 60
      DO 50 I=1,20
      MTRANG(I)=MTRAN5(I)
      DO 40 K=1,15
      DO 30 J=1,2
      MTADD(J,K,I)=MTADD5(J,K,I)
   30 CONTINUE
      MTADD(3,K,I)=0
   40 CONTINUE
   50 CONTINUE
      GO TO 100
c-----------------------------------------------------------------------
C
C     IF ENDF-6 PHOTONS CHANGE TO PHOTON RULES
C
c-----------------------------------------------------------------------
   60 IF(NSUB.NE.3) GO TO 100
      MAKE=MAKEP
      DO 90 I=1,MAKE
      MTMAKE(I)=MTMAKP(I)
      MTRANG(I)=MTRANP(I)
      DO 80 K=1,15
      DO 70 J=1,2
      MTADD(J,K,I)=MTADDP(J,K,I)
   70 CONTINUE
      MTADD(3,K,I)=0
   80 CONTINUE
   90 CONTINUE
C-----SAVE COMMENT LINE COUNT TO COPY LINES.
  100 N1IN=N1
C-----INCREASE COMMENT LINE COUNT TO ALLOW FOR PROGRAM IDENTIFICATION
C-----AND DESCRIPTION OF ALL OPERATIONS
      N1=N1+15
C-----INDICATE WHETHER OR NOT EACH OPERATION WAS PERFORMED (YES/NO).
      IP=1
      DO 120 I=1,14
      IP=IP+1
      IF(IMOPS(I).LE.0) GO TO 110
      PROGDOC1(63,IP)=YESX(1)
      PROGDOC1(64,IP)=YESX(2)
      PROGDOC1(65,IP)=YESX(3)
      GO TO 120
  110 PROGDOC1(63,IP)=NOX(1)
      PROGDOC1(64,IP)=NOX(2)
      PROGDOC1(65,IP)=NOX(3)
  120 CONTINUE
c-----------------------------------------------------------------------
C
C     OUTPUT LAST HEADER LINE AND COPY ALL COMMENT LINES.
C
c-----------------------------------------------------------------------
      CALL CARDOF
      DO 130 N=1,N1IN
      CALL COPY1
  130 CONTINUE
c-----------------------------------------------------------------------
C
C     ADD COMMENTS TO DEFINE WHAT WAS DONE TO DATA
C
c-----------------------------------------------------------------------
C-----OUTPUT PROGRAM AND VERSION I.D.
      CALL HOLLYO(PROGDOC1(1,1))
c-----------------------------------------------------------------------
C
C     OUTPUT DESCRIPTION OF OPERATIONS PERFORMED.
C
c-----------------------------------------------------------------------
      CALL HOLLYO(PROGDOC1(1, 2))
      CALL HOLLYO(PROGDOC1(1, 3))
      CALL HOLLYO(PROGDOC1(1, 4))
      CALL HOLLYO(PROGDOC1(1, 5))
      CALL HOLLYO(PROGDOC1(1, 6))
      CALL HOLLYO(PROGDOC1(1, 7))
      CALL HOLLYO(PROGDOC1(1, 8))
      CALL HOLLYO(PROGDOC1(1, 9))
      CALL HOLLYO(PROGDOC1(1,10))
      CALL HOLLYO(PROGDOC1(1,11))
      CALL HOLLYO(PROGDOC1(1,12))
      CALL HOLLYO(PROGDOC1(1,13))
      CALL HOLLYO(PROGDOC1(1,14))
      CALL HOLLYO(PROGDOC1(1,15))
C-----COPY TO END OF SECTION.
      CALL COPYSF
      RETURN
      END
      SUBROUTINE FILE1B
C=======================================================================
C
C     READ TOTAL NU-BAR (MF=1, MT=452)
C
C     ONLY IF IT IS,
C     1) TABULATED
C     2) LINEARLY INTERPOLABLE
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      COMMON/CORTAB/MFCORE,MTCORE,N2CORE
      COMMON/LASTE/ELAST
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
C-----OUTPUT FIRST AND SECOND LINES.
      CALL CONTOF
      CALL CARDIF
      CALL CARDOF
C-----INITIALIZE LAST ENERGY
      ELAST=0.0D+00
C-----IS DATA TABULATED.
      IF(L2H.NE.2) GO TO 20
C-----IS DATA LINEARLY INTERPOLABLE.
      CALL TERPI(NBT,INT,N1)
c-----2019/1/3 - Additional Interpolation Law Tests
      CALL TERPTEST(NBT,INT,N1,N2,3)
      CALL TERPO(NBT,INT,N1)
c-----------------------------------------------------------------------
C
C     DATA IS TABULATED, LINEAR INTERPOLABLE - READ AND SAVE IT.
C
c-----------------------------------------------------------------------
C-----ALLOW UP TO NPAGE ENERGY POINTS.
      IF(N2.LE.NPAGE) GO TO 10
      WRITE(OUTP,60) MFH,MTH,N2,NPAGE
      WRITE(*   ,60) MFH,MTH,N2,NPAGE
      CALL ENDERROR
   10 MFCORE=MFH
      MTCORE=MTH
      N2CORE=N2
      WRITE(OUTP,40) MFH,MTH,N2
      WRITE(*   ,40) MFH,MTH,N2
C-----READ AND WRITE POINTS.
      CALL POINTI(XCORE,YCORE,N2CORE)
      CALL POINTO(XCORE,YCORE,N2CORE)
      GO TO 30
c-----------------------------------------------------------------------
C
C     DATA IS NOT TABULATED, LINEAR INTERPOLABLE - TERMINATE.
C
c-----------------------------------------------------------------------
   20 WRITE(OUTP,50) MFH,MTH,N2
      WRITE(*   ,50) MFH,MTH,N2
      CALL ENDERROR
C-----COPY UP TO SEND LINE.
   30 CALL COPYSF
      RETURN
   40 FORMAT(I3,I4,I8,24X,' Nu-Bar')
   50 FORMAT(I3,I4,I8,24X,' Not Tabulated, Linear Interpolable'/
     1 39x,' EXECUTION TERMINATED')
   60 FORMAT(I3,I4,I8,24X,' Over',I6,' Energy Points'/
     1 39x,' EXECUTION TERMINATED')
      END
      SUBROUTINE FILEX
C=======================================================================
C
C     PROCESS ALL OF FILE 3 OR 23.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/MAKERN/MAKE ,MTMAKE(20),MTRANG(20), MTADD(3,15,20)
      COMMON/MAKERP/MAKEP,MTMAKP(10),MTRANP(10),MTADDP(3,15,10)
      COMMON/INMFH/MFHIN
c-----2019/2/26 = upper energy and cross section limits for ALL MT
      INCLUDE 'fixup.h'
      DIMENSION MTMAKS(20),MTRANS(20),MTADDS(2,15,20)
c-----------------------------------------------------------------------
C
C     2019/2/26 - Initialize ALL MT upper limits
C
c-----------------------------------------------------------------------
      call maxie0
c-----------------------------------------------------------------------
C
C
C     USE EITHER FILE 3 OR 23 RECONSTRUCTION RULES.
C
c-----------------------------------------------------------------------
      MFHIN=MFH
      IF(MFHIN.EQ.3) GO TO 60
C-----SAVE FILE 3 RULES AND USE FILE 23 RULES.
      MAKES=MAKE
      DO 30 I=1,MAKE
      MTMAKS(I)=MTMAKE(I)
      MTRANS(I)=MTRANG(I)
      DO 20 J=1,2
      DO 10 K=1,15
      MTADDS(J,K,I)=MTADD(J,K,I)
   10 CONTINUE
   20 CONTINUE
   30 CONTINUE
      MAKE=MAKEP
      DO 50 I=1,MAKE
      MTMAKE(I)=MTMAKP(I)
      MTRANG(I)=MTRANP(I)
      DO 40 J=1,2
      DO 40 K=1,15
      MTADD(J,K,I)=MTADDP(J,K,I)
   40 CONTINUE
   50 CONTINUE
C-----READ ALL SECTION, EDIT AND COPY TO SCRATCH FILE TAPEC.
   60 CALL PASS1
C-----IF REQUESTED, CREATE UNIFORM ENERGY GRID.
      CALL PASS2
C-----DEFINE ALL SUM CROSS SECTIONS.
      CALL PASS3
C-----OUTPUT ALL SECTIONS TO NEW ENDF FORMATTED FILE.
      CALL PASS4
C-----IF NECESSARY RESTORE FILE 3 RULES.
      IF(MFHIN.EQ.3) GO TO 100
      MAKE=MAKES
      DO 90 I=1,MAKE
      MTMAKE(I)=MTMAKS(I)
      MTRANG(I)=MTRANS(I)
      DO 80 K=1,15
      DO 70 J=1,2
      MTADD(J,K,I)=MTADDS(J,K,I)
   70 CONTINUE
      MTADD(3,K,I)=0
   80 CONTINUE
   90 CONTINUE
  100 RETURN
      END
      SUBROUTINE PASS1
C=======================================================================
C
C     READ ALL DATA, EDIT AND COPY TO SCRATCH FILE ISCRC.
C     IF NOT PRESENT INSERT SECTIONS TO BE CREATED.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*1 FIELD6
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      COMMON/OPS/IMOPS(14)
      COMMON/TABA/I2A,N2A,IPA1,IPA2
      COMMON/TABC/I2C,N2C,IPC1,IPC2
      COMMON/ENDSA/XANOW,XALAST,YANOW,YALAST
      COMMON/ENDSC/XCNOW,XCLAST,YCNOW,YCLAST
      COMMON/LAST1/MATLST,MFLST,MTLST,IZALST,AWRLST,MATIN,MFIN,MTIN,
     1 MATOUT,MFOUT,MTOUT
      COMMON/MTOLD/MTC,MTCX,N2TABC(1000),MTTABC(1000)
      COMMON/MTNEW/MTD,MTDX,N2TABD(20),MTTABD(20)
      COMMON/MTNEED/MTE,MTEX,N2TABE(20),MTTABE(20)
      COMMON/DELETE/IDEL,MTDEL(2,20)
      COMMON/PROJECT/AWI
      COMMON/TEMPO/TEMP1,TEMP3,IVERSE
      COMMON/MAKTAB/C1HTAB(50),C2HTAB(50),C1TAB(50),C2TAB(50),
     1 L1HTAB(50),L2HTAB(50),MATTAB(50),MTTAB(50),L1TAB(50),L2TAB(50),
     2 IMUSED(50),MAKCT
      COMMON/INMFH/MFHIN
      COMMON/XYINS/XINS(50),MATINS(50),MTINS(50),NXINS
      COMMON/FIELDC/FIELD6(11,6)
c-----2019/2/26 = upper energy and cross section limits for ALL MT
      INCLUDE 'fixup.h'
      DIMENSION INCORE(7),ISAVE(7)
      EQUIVALENCE (L1H,INCORE(1))
      DATA NSAVE/0/
      DATA ISAVE/0,0,0,0,0,0,0/
c-----------------------------------------------------------------------
C
C     INITIALIZE ALL PARAMETERS.
C
c-----------------------------------------------------------------------
C-----INITIALIZE SECTION COUNTS (C=ORIGINAL, D=SECTIONS CREATED BY
C-----SUMMATION, E = SECTIONS NEEDED FOR LATER SUMMATIONS).
      MTCX=0
      MTDX=0
      MTEX=0
C-----IF ANY MT CREATIONS, INDICATE NONE HAVE BEEN USED YET.
      IF(MAKCT.GT.0) THEN
      DO I=1,MAKCT
      IMUSED(I) = 0
      ENDDO
      ENDIF
C-----INITIALIZE CREATING SECTION FLAG OFF.
      NSAVE=0
C-----POSITION SCRATCH FILE ISCRC TO WRITE ALL SECTIONS.
      REWIND ISCRC
C-----SECTION HEAD LINE HAS ALREADY BEEN READ.
      GO TO 90
c-----------------------------------------------------------------------
C
C     READ ENTIRE FILE.
C
c-----------------------------------------------------------------------
C-----IF LAST SECTION WAS CREATED RESTORE HEADER LINE AND SKIP READ.
   10 IF(NSAVE.LE.0) GO TO 30
      C1H = C1HS
      C2H = C2HS
      DO 20 J=1,7
      INCORE(J)=ISAVE(J)
   20 CONTINUE
      NSAVE=0
      GO TO 50
   30 NSAVE=0
C-----READ NEXT SECTION HEAD LINE. SKIP SEND LINES. END ON FEND LINE.
   40 CALL CONTIF
   50 IF(MTH.gt.0) go to 70
      IF(MFH.gt.0) go to 40
C-----END OF FILE. CHECK FOR MORE SECTIONS TO CREATE.
      IF(MAKCT.LE.0) GO TO 450
      DO 60 I=1,MAKCT
C-----USE CREATE ONLY ONCE PER MAT
      IF(IMUSED(I).NE.0) GO TO 60
C-----MAT = 0 = ALL MAT
      IF(MATTAB(I).LE.0) GO TO 120
      IF(MATH.EQ.MATTAB(I)) GO TO 120
   60 CONTINUE
      GO TO 450
C-----STILL READING FILE. CHECK FOR ASCENDING MF/MT ORDER.
   70 IF(IMOPS(9).LE.0) GO TO 90
      IF(MATH.EQ.MATLST.AND.MFH.EQ.MFLST) GO TO 80
      WRITE(OUTP,520) MFH,MTH,MATH,MATLST,MFLST
   80 IF(MTH.LE.MTLST) WRITE(OUTP,530) MFH,MTH,MTLST
C-----SAVE CURRENT MF/MT FOR ORDER CHECK.
   90 MATLST=MATH
      MFLST=MFH
      MTLST=MTH
c-----------------------------------------------------------------------
C
C     CHECK FOR SECTION TO BE CREATED.
C
c-----------------------------------------------------------------------
      IF(MAKCT.LE.0) GO TO 180
      DO 110 I=1,MAKCT
      IF(IMUSED(I).NE.0) GO TO 110
      IF(MATTAB(I).LE.0) GO TO 100
      IF(MATH.NE.MATTAB(I)) GO TO 110
  100 IF(MTH.eq.MTTAB(I)) go to 160
      IF(MTH.gt.MTTAB(I)) go to 120
  110 CONTINUE
      GO TO 180
C-----CREATE SECTION. CHOOSE SECTION WITH SAME MAT AND SMALLEST MT.
  120 II=I
      DO 140 J=II,MAKCT
      IF(IMUSED(J).NE.0) GO TO 140
      IF(MATTAB(J).LE.0) GO TO 130
      IF(MATH.NE.MATTAB(J)) GO TO 140
  130 IF(MTTAB(J).LT.MTTAB(I)) I=J
  140 CONTINUE
C-----SAVE CURRENT HEADER LINE AND CREATE SECTION.
      NSAVE=1
      C1HS = C1H
      C2HS = C2H
      DO 150 J=1,7
      ISAVE(J)=INCORE(J)
  150 CONTINUE
      C1H=C1HTAB(I)
      C2H=C2HTAB(I)
      L1H=L1HTAB(I)
      L2H=L2HTAB(I)
      N1H=0
      N2H=0
      C1=C1TAB(I)
      C2=C2TAB(I)
      L1=L1TAB(I)
      L2=L2TAB(I)
      N1=0
      N2=0
      MTH=MTTAB(I)
      MFH=MFHIN
      MTLST=MTH
      MFLST=MFH
      GO TO 170
C-----INDICATE SECTION IS PRESENT - CREATE COMMAND IGNORED.
  160 NSAVE=-1
      IMUSED(I) = 1
C-----READ NEXT SECOND LINE OF SECTION.
      CALL CARDIF
C-----INDICATE SECTION HAS BEEN CREATED.
  170 IMUSED(I) = 1
C-----DO NOT ALLOW CREATED SECTION TO BE DELETED.
      GO TO 230
C-----SECTION WILL NOT BE CREATED. READ SECOND LINE OF SECTION.
  180 CALL CARDIF
c-----------------------------------------------------------------------
C
C     IF REQUESTED DELETE SECTION.
C
c-----------------------------------------------------------------------
      IF(IDEL.LE.0) GO TO 230
      DO 190 I=1,IDEL
      IF(MTH.GE.MTDEL(1,I).AND.MTH.LE.MTDEL(2,I)) GO TO 200
  190 CONTINUE
      GO TO 230
C-----PRINT MF/MT/N2/TEMPERATURE AND Q-VALUE AND DELETE SECTION BY
C-----SKIPPING IT.
  200 IF(IVERSE.EQ.6) GO TO 220
      IF(L2.LE.0) GO TO 210
      TEMP3=TEMP1
      GO TO 220
  210 TEMP3=C1
      IF(MTH.EQ.1) TEMP1=TEMP3
  220 CALL OUT9(TEMP3,FIELD6(1,1))
      CALL OUT9(C2   ,FIELD6(1,2))
      WRITE(OUTP,490) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      WRITE(*   ,490) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      CALL SKIPS
      GO TO 10
c-----------------------------------------------------------------------
C
C     KEEP SECTION.
C
c-----------------------------------------------------------------------
C-----PRINT MF/MT/N2/TEMPERATURE AND Q-VALUE.
  230 IF(IVERSE.EQ.6) GO TO 250
      IF(L2.LE.0) GO TO 240
      TEMP3=TEMP1
      GO TO 250
  240 TEMP3=C1
      IF(MTH.EQ.1) TEMP1=TEMP3
  250 CALL OUT9(TEMP3,FIELD6(1,1))
      CALL OUT9(C2   ,FIELD6(1,2))
      IF(NSAVE.eq.0) go to 270
      IF(NSAVE.gt.0) go to 260
      WRITE(OUTP,480) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      WRITE(*   ,480) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      GO TO 280
  260 WRITE(OUTP,470) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      WRITE(*   ,470) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      GO TO 280
  270 WRITE(OUTP,460) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      WRITE(*   ,460) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
C-----CHECK FOR SAME MAT. IF NOT PRINT ERROR MESSAGE.
  280 IF(MATH.EQ.MATLST.AND.MFH.EQ.MFLST) GO TO 290
      WRITE(OUTP,510) MATH,MFH,MATLST,MFLST
      MATH=MATLST
      MFH=MFLST
C-----CHECK LEGAL C1 AND C2.
  290 IZANOW=C1H
      AWRNOW=C2H
      IF(IMOPS(1).LE.0.OR.(IZANOW.EQ.IZALST.AND.AWRNOW.EQ.AWRLST))
     1 GO TO 300
      CALL OUT9(AWRNOW,FIELD6(1,1))
      CALL OUT9(AWRLST,FIELD6(1,2))
      WRITE(OUTP,500) IZANOW,(FIELD6(M,1),M=1,11),
     1 IZALST,(FIELD6(M,2),M=1,11)
      C1H=IZALST
      C2H=AWRLST
      IZANOW=IZALST
      AWRNOW=AWRLST
C-----READ AND CHECK INTERPOLATION LAW. TERMINATE IF NOT LINEAR-LINEAR.
  300 IF(NSAVE.EQ.1) GO TO 310
      CALL TERPI(NBT,INT,N1)
      CALL TERPTEST(NBT,INT,N1,N2,3)
C-----OUTPUT HEADER INFORMATION TO SCRATCH.
  310 WRITE(ISCRC) C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,
     1 C1,C2,L1,L2,N1,N2
      IF(NSAVE.LE.0) GO TO 320
      N2C=0
      GO TO 440
c-----------------------------------------------------------------------
C
C     READ, EDIT AND SAVE DATA POINTS ON SCRATCH ISCRC.
C
c-----------------------------------------------------------------------
  320 N2A=N2
      I2A=-1
      N2C=-1
c-----------------------------------------------------------------------
C
C     DEFINE WHETHER OR NOT ENERGY POINTS MAY BE INSERTED IN THIS
C     TABLE.
C
c-----------------------------------------------------------------------
      LXINS1=0
      LXINS2=0
      IF(NXINS.LE.0) GO TO 360
      DO 350 KXINS=1,NXINS
      IF(MATINS(KXINS).LE.0) GO TO 330
      IF(MATINS(KXINS).ne.MATH) go to 350
  330 IF(MTINS(KXINS).LE.0) GO TO 340
      IF(MTINS(KXINS).ne.MTH) go to 350
  340 IF(LXINS1.LE.0) LXINS1=KXINS
      LXINS2=KXINS
  350 CONTINUE
C-----READ AND SAVE FIRST POINT OF TABLE.
  360 CALL GETA
c-----------------------------------------------------------------------
c
c     2017/10/17 - For MF=23 ALLOW for non-zero start of MT (subshells)
c
c-----------------------------------------------------------------------
      if(MFH.eq.23) then
      if(YANOW.ne.0.0d0) then
      XCNOW=XANOW
      YCNOW=0.0d0
      CALL SAVEC
      endif
      endif
c-----------------------------------------------------------------------
      XCNOW=XANOW
      YCNOW=YANOW
      CALL SAVEC
C-----READ ALL REMAINING POINTS.
  370 CALL GETA
c-----------------------------------------------------------------------
C
C     IF NECESSARY INSERT ENERGY POINTS.
C
c-----------------------------------------------------------------------
      IF(LXINS1.LE.0) GO TO 430
      JXINS=LXINS1-1
      DO 410 KXINS=LXINS1,LXINS2
C-----SKIP POINTS BELOW LOWER ENERGY LIMIT OF INTERVAL.
      IF(XINS(KXINS).LE.XALAST) GO TO 400
C-----FINISHED IF POINT IS ABOVE UPPER ENERGY LIMIT OF INTERVAL.
      IF(XINS(KXINS).GE.XANOW) GO TO 420
C-----TEST MAT AND MT.
      IF(MATINS(KXINS).LE.0) GO TO 380
      IF(MATINS(KXINS).ne.MATH) go to 410
  380 IF(MTINS(KXINS).LE.0) GO TO 390
      IF(MTINS(KXINS).ne.MTH) go to 410
C-----INSERT POINT - DEFINE Y VALUE USING LINEAR INTERPOLATION.
  390 XCNOW=XINS(KXINS)
      YCNOW=((XINS(KXINS)-XALAST)*YANOW+(XANOW-XINS(KXINS))*YALAST)/
     1 (XANOW-XALAST)
      CALL OUT9(XCNOW,FIELD6(1,1))
      WRITE(OUTP,540) (FIELD6(M,1),M=1,11)
      CALL SAVEC
  400 JXINS=KXINS
  410 CONTINUE
  420 LXINS1=JXINS+1
      IF(LXINS1.GT.LXINS2) LXINS1=0
c-----------------------------------------------------------------------
C
C     SAVE CURRENT ENERGY POINT.
C
c-----------------------------------------------------------------------
  430 XCNOW=XANOW
      YCNOW=YANOW
      CALL SAVEC
      IF(I2A.LT.N2A) GO TO 370
C-----SAVE REMAINDER OF TABLE.
      WRITE(ISCRC) XC,YC
C-----INCREMENT SECTION COUNT AND SAVE POINT COUNT.
  440 MTCX=MTCX+1
      N2TABC(MTCX)=N2C
      MTTABC(MTCX)=MTH
      GO TO 10
C-----END SCRATCH FILE ISCRC.
  450 END FILE ISCRC
c-----------------------------------------------------------------------
c
c     Define Highest Energy for MERGE = lowest common energy
c
c-----------------------------------------------------------------------
c-----2019/3/26 - Define Lowest common High Energy with SIGMA > 0
      call maxie3(1)
      RETURN
  460 FORMAT(I3,I4,I8,1X,11A1,1X,11A1)
  470 FORMAT(I3,I4,I8,1X,11A1,1X,11A1,' Section Created')
  480 FORMAT(I3,I4,I8,1X,11A1,1X,11A1,' Section Present - Create',
     1 ' Command Ignored')
  490 FORMAT(I3,I4,I8,1X,11A1,1X,11A1,' Section Deleted')
  500 FORMAT(39X,' ZA=',I7,' AWRE=',11A1,' Changed to'/
     1       39X,' ZA=',I7,' AWRE=',11A1)
  510 FORMAT(39X,'MAT/MF=',I5,I3,' Changed to ',I5,I3)
  520 FORMAT(I3,I4,32X,' MAT=',I5,' WARNING...',
     1 ' Expect Same MAT/MF as Last MAT/MF=',I5,I3)
  530 FORMAT(I3,I4,32X,' WARNING...Expect MT Greater than Last MT=',I4)
  540 FORMAT(39X,' E=',11A1,' eV. Inserted Point.')
      END
      SUBROUTINE PASS2
C=======================================================================
C
C     PUT ALL CROSS SECTIONS ON A UNIFORM ENERGY GRID.
C
C     ALL EDITED DATA IS NOW ON ISCRC.
C
C     READ ALL OF IT AND DEFINE A UNIFORM ENERGY GRID = ALL ENERGIES
C     WHICH APPEAR IN AT LEAST ONE TABLE OF DATA - USE ISCRA AND ISCRB
C     TO HOLD THE UNIFORM ENERGY GRID - THE FINAL UNIFORM ENERGY GRID
C     WILL BE ON ISCRB.
C
C     READ EACH SECTION (FROM ISCRC), CONVERT TO A UNIFORM ENERGY GRID
C     AND OUTPUT TO ISCRA - SWITCH ISCRA AND ISCRC - SO THAT THE FINAL
C     DATA, IN THE UNIFORM ENERGY GRID ENDS UP ON ISCRC - EXACTLY
C     WHERE IT WAS WHEN THIS ROUTINE WAS CALLED.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      COMMON/MTOLD/MTC,MTCX,N2TABC(1000),MTTABC(1000)
      COMMON/TABA/I2A,N2A,IPA1,IPA2
      COMMON/TABB/I2B,N2B,IPB1,IPB2
      COMMON/TABC/I2C,N2C,IPC1,IPC2
      COMMON/ENDSC/XCNOW,XCLAST,YCNOW,YCLAST
      COMMON/OPS/IMOPS(14)
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
c-----------------------------------------------------------------------
C
C     NOTHING TO DO IF UNIFORM ENERGY GRID OPTION IS NOT ON.
C
c-----------------------------------------------------------------------
      IF(IMOPS(13).LE.0) RETURN
c-----------------------------------------------------------------------
C
C     DEFINE UNIFORM ENERGY GRID.
C
c-----------------------------------------------------------------------
      WRITE(OUTP,290)
      WRITE(*   ,290)
C-----INITIALIZE NUMBER OF ENERGY POINTS IN UNIFORM ENERGY GRID.
      N2B=0
C-----POSITION SCRATCH FILES.
      REWIND ISCRA
      REWIND ISCRB
      REWIND ISCRC
c-----------------------------------------------------------------------
C
C     LOOP OVER SECTIONS OF DATA.
C
c-----------------------------------------------------------------------
      DO 140 MTC=1,MTCX
C-----DEFINE ORIGINAL, EDITED NUMBER OF POINTS.
      N2C=N2TABC(MTC)
C-----READ NEXT ORIGINAL HEADER INFORMATION FROM SCRATCH.
      READ(ISCRC) C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,
     1 C1,C2,L1,L2,N1,N2
C-----NOTHING TO DO IF THIS IS A CREATED SECTION (NO DATA POINTS).
      IF(N2C.LE.0) GO TO 140
c-----------------------------------------------------------------------
C
C     DO NOT INCLUDE PARAMETERS (MT= 251 THROUGH 255).
C
c-----------------------------------------------------------------------
      IF(MTH.LT.251.OR.MTH.GT.255) GO TO 20
C-----SKIP PARAMETERS.
      DO 10 I=1,N2C,NPAGE
      READ(ISCRC) XC,YC
   10 CONTINUE
      GO TO 140
c-----------------------------------------------------------------------
C
C     MERGE ENERGIES.
C
c-----------------------------------------------------------------------
   20 IF(N2B.gt.0) go to 40
c-----------------------------------------------------------------------
C
C     COPY FIRST SECTION OF ENERGIES.
C
c-----------------------------------------------------------------------
      N2B=N2C
      DO 30 I=1,N2C,NPAGE
      READ(ISCRC) XC,YC
      WRITE(ISCRB) XC
   30 CONTINUE
      ENDFILE ISCRB
      GO TO 140
c-----------------------------------------------------------------------
C
C     MERGE OTHER SECTIONS.
C
c-----------------------------------------------------------------------
   40 N2A=0
      I2A=0
      I2C=1
C-----LOAD FIRST PAGE OF NEW ENERGIES.
      READ(ISCRC) XC,YC
c-----------------------------------------------------------------------
C
C     POSITION UNIFORM ENERGY GRID TO BEGINNING OF CURRENT SECTION.
C
C     COPY PAGES OF ENERGIES UP TO THRESHOLD OF CURRENT ENERGY
C
c-----------------------------------------------------------------------
      REWIND ISCRB
      N2BTOT=N2B
      I3B=NPAGE
      DO 50 I1B=1,N2BTOT,NPAGE
      READ(ISCRB) XB
      IF(I3B.GT.N2B) I3B=N2B
      IF(XB(I3B).GE.XC(1)) GO TO 60
C-----TEST FOR NEW ENERGIES ABOVE PRECEDING MAXIMUM RANGE.
      IF(I3B.EQ.N2B) GO TO 60
      WRITE(ISCRA) XB
      N2A=N2A+I3B
      N2B=N2B-I3B
   50 CONTINUE
c-----------------------------------------------------------------------
C
C     COPY POINTS OF ENERGIES UP TO THRESHOLD OF CURRENT ENERGY
C
c-----------------------------------------------------------------------
   60 DO 70 I2B=1,I3B
      IF(XB(I2B).GE.XC(1)) GO TO 80
      I2A=I2A+1
      XA(I2A)=XB(I2B)
   70 CONTINUE
      I2B=I3B+1
c-----------------------------------------------------------------------
C
C     INCREMENT NEW MERGED INDEX AND IF NECESSARY UNLOAD PAGE TO SCRATCH
C
c-----------------------------------------------------------------------
   80 I2A=I2A+1
      IF(I2A.LE.NPAGE) GO TO 90
      WRITE(ISCRA) XA
      N2A=N2A+NPAGE
      I2A=1
C-----SELECT NEXT LOWEST ENERGY.
   90 IF(I2B.GT.N2B) GO TO 120
      IF(I2C.GT.N2C) GO TO 100
      IF(XB(I2B).eq.XC(I2C)) go to 110
      IF(XB(I2B).gt.XC(I2C)) go to 120
C-----MERGED ENERGY IS LOWER. SAVE IT AND IF NECESSARY READ NEXT PAGE.
  100 XA(I2A)=XB(I2B)
      I2B=I2B+1
      IF(I2B.GT.N2B) GO TO 130
      IF(I2B.LE.NPAGE) GO TO 130
      READ(ISCRB) XB
      N2B=N2B-NPAGE
      I2B=1
      GO TO 130
C-----ENERGIES ARE EQUAL. INCREMENT INDEX TO MERGED ENERGY AND IF
C-----NECESSARY READ NEXT PAGE.
  110 I2B=I2B+1
      IF(I2B.GT.N2B) GO TO 120
      IF(I2B.LE.NPAGE) GO TO 120
      READ(ISCRB) XB
      N2B=N2B-NPAGE
      I2B=1
C-----NEW ENERGY IS EQUAL TO OR GREATER THAN MERGED ENERGY. SAVE IT
C-----AND IF NECESSARY READ NEXT PAGE.
  120 XA(I2A)=XC(I2C)
      I2C=I2C+1
      IF(I2C.GT.N2C) GO TO 130
      IF(I2C.LE.NPAGE) GO TO 130
      READ(ISCRC) XC,YC
      N2C=N2C-NPAGE
      I2C=1
C-----CONTINUE UNTIL ALL POINTS HAVE BEEN MERGED.
  130 IF(I2B.LE.N2B.OR.I2C.LE.N2C) GO TO 80
c-----------------------------------------------------------------------
C
C     END OF SECTION MERGE. OUTPUT LAST PAGE OF POINTS. RE-POSITION
C     SCRATCH FILES AND SWITCH SCRATCH FILES A AND B - SO THAT MERGED
C     ENERGY GRID ENDS UP ON ISCRB.
C
c-----------------------------------------------------------------------
      WRITE(ISCRA) XA
      ENDFILE ISCRA
      REWIND ISCRA
      REWIND ISCRB
      ISCRX=ISCRA
      ISCRA=ISCRB
      ISCRB=ISCRX
      N2B=N2A+I2A
C-----END OF SECTION LOOP.
  140 CONTINUE
c-----------------------------------------------------------------------
C
C     CONVERT ALL CROSS SECTIONS TO UNIFORM ENERGY GRID.
C
c-----------------------------------------------------------------------
C-----POSITION SCRATCH FILES.
      REWIND ISCRA
      REWIND ISCRC
C-----SAVE TOTAL NUMBER OF POINTS IN MERGED ENERGY GRID.
      N2BTOT=N2B
c-----------------------------------------------------------------------
C
C     LOOP OVER SECTIONS OF DATA.
C
c-----------------------------------------------------------------------
      DO 280 MTC=1,MTCX
C-----DEFINE ORIGINAL, EDITED NUMBER OF POINTS.
      N2C=N2TABC(MTC)
C-----READ AND WRITE NEXT ORIGINAL HEADER INFORMATION FROM SCRATCH.
      READ(ISCRC) C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,
     1 C1,C2,L1,L2,N1,N2
      WRITE(ISCRA) C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,
     1 C1,C2,L1,L2,N1,N2
C-----NOTHING TO DO IF THIS IS A CREATED SECTION (NO DATA POINTS).
      IF(N2C.LE.0) GO TO 280
c-----------------------------------------------------------------------
C
C     DO NOT INCLUDE PARAMETERS (MT= 251 THROUGH 255).
C
c-----------------------------------------------------------------------
      IF(MTH.LT.251.OR.MTH.GT.255) GO TO 160
C-----COPY PARAMETERS.
      DO 150 I=1,N2C,NPAGE
      READ(ISCRC) XC,YC
      WRITE(ISCRA) XC,YC
  150 CONTINUE
      GO TO 280
c-----------------------------------------------------------------------
C
C     CONVERT TO UNIFORM ENERGY GRID.
C
c-----------------------------------------------------------------------
C-----LOAD FIRST PAGE OF NEW ENERGIES.
  160 READ(ISCRC) XC,YC
c-----------------------------------------------------------------------
C
C     POSITION TO FIRST ENERGY POINT WITHIN THE ENERGY RANGE OF THE
C     CURRENT SECTION.
C
c-----------------------------------------------------------------------
      REWIND ISCRB
      N2B=N2BTOT
      DO 170 I1B=1,N2BTOT,NPAGE
      READ(ISCRB) XB
      I2B=I1B+NPAGEM1
      IF(I2B.GT.N2BTOT) I2B=N2BTOT
      I3B=(I2B-I1B)+1
      IF(XB(I3B).GE.XC(1)) GO TO 180
      N2B=N2B-I3B
  170 CONTINUE
C-----INITIALIZE INDICES.
  180 DO 190 I2B=1,I3B
      IF(XB(I2B).GE.XC(1)) GO TO 200
  190 CONTINUE
  200 N2A=0
      I2A=0
      I2C=1
c-----------------------------------------------------------------------
C
C     INCREMENT NEW MERGED INDEX AND IF NECESSARY UNLOAD PAGE TO SCRATCH
C
c-----------------------------------------------------------------------
  210 I2A=I2A+1
      IF(I2A.LE.NPAGE) GO TO 220
      WRITE(ISCRA) XA,YA
      N2A=N2A+NPAGE
      I2A=1
C-----SELECT NEXT LOWEST ENERGY.
  220 IF(I2B.GT.N2B) GO TO 260
      IF(I2C.LE.N2C) GO TO 230
C-----EXTEND CROSS SECTION AS = ZERO OR CONSTANT ABOVE TABULATED RANGE.
      XA(I2A)=XB(I2B)
      YA(I2A)=0.0d0
      GO TO 240
  230 IF(XB(I2B).eq.XC(I2C)) go to 250
      IF(XB(I2B).gt.XC(I2C)) go to 260
C-----MERGED ENERGY IS LOWER. INTERPOLATE CROSS SECTION AND SAVE IT.
      XA(I2A)=XB(I2B)
      YA(I2A)=((XA(I2A)-XCLAST)*YC(I2C)+(XC(I2C)-XA(I2A))*YCLAST)/
     1 (XC(I2C)-XCLAST)
C-----IF NECESSARY READ NEXT PAGE OF UNIFORM ENERGY GRID.
  240 I2B=I2B+1
      IF(I2B.GT.N2B) GO TO 270
      IF(I2B.LE.NPAGE) GO TO 270
      READ(ISCRB) XB
      N2B=N2B-NPAGE
      I2B=1
      GO TO 270
C-----ENERGIES ARE EQUAL. INCREMENT INDEX TO MERGED ENERGY AND IF
C-----NECESSARY READ NEXT PAGE.
  250 I2B=I2B+1
      IF(I2B.GT.N2B) GO TO 260
      IF(I2B.LE.NPAGE) GO TO 260
      READ(ISCRB) XB
      N2B=N2B-NPAGE
      I2B=1
C-----NEW ENERGY IS EQUAL TO OR GREATER THAN MERGED ENERGY. SAVE IT.
  260 XA(I2A)=XC(I2C)
      YA(I2A)=YC(I2C)
C-----SAVE CURRENT X AND Y FOR INTERPOLATION.
      XCLAST=XC(I2C)
      YCLAST=YC(I2C)
C-----IF NECESSARY READ NEXT PAGE OF ORIGINAL DATA.
      I2C=I2C+1
      IF(I2C.GT.N2C) GO TO 270
      IF(I2C.LE.NPAGE) GO TO 270
      READ(ISCRC) XC,YC
      N2C=N2C-NPAGE
      I2C=1
C-----CONTINUE UNTIL ALL POINTS HAVE BEEN MERGED.
  270 IF(I2B.LE.N2B.OR.I2C.LE.N2C) GO TO 210
c-----------------------------------------------------------------------
C
C     END OF SECTION MERGE. OUTPUT LAST PAGE OF POINTS AND DEFINE
C     NEW POINT COUNT FOR SECTION.
C
c-----------------------------------------------------------------------
      WRITE(ISCRA) XA,YA
      N2A=N2A+I2A
      WRITE(OUTP,300) MFH,MTH,N2TABC(MTC),N2A
      WRITE(*   ,300) MFH,MTH,N2TABC(MTC),N2A
      N2TABC(MTC)=N2A
C-----END OF SECTION LOOP.
  280 CONTINUE
C-----RE-POSITION SCRATCH FILES.
      ENDFILE ISCRA
      REWIND ISCRA
      REWIND ISCRB
      REWIND ISCRC
C-----SWITCH SCRATCH FILES A AND C SO THAT FINAL RESULTS END UP
C-----ON SCRATCH C.
      ISCRX=ISCRA
      ISCRA=ISCRC
      ISCRC=ISCRX
      RETURN
  290 FORMAT(1X,78('-')/' Creating Uniform Energy Grid'/1X,78('-')/
     1 ' MF  MT Original  Uniform'/
     2 '          Points   Points'/1X,78('-'))
  300 FORMAT(I3,I4,2I9)
      END
      SUBROUTINE PASS3
C=======================================================================
C
C     CALCULATE SUMMATION CROSS SECTIONS AND SAVE ON ISCRD.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/TABA/I2A,N2A,IPA1,IPA2
      COMMON/TABC/I2C,N2C,IPC1,IPC2
      COMMON/CORTAB/MFCORE,MTCORE,N2CORE
      COMMON/MTOLD/MTC,MTCX,N2TABC(1000),MTTABC(1000)
      COMMON/MTNEW/MTD,MTDX,N2TABD(20),MTTABD(20)
      COMMON/MTNEED/MTE,MTEX,N2TABE(20),MTTABE(20)
      COMMON/MAKERN/MAKE ,MTMAKE(20),MTRANG(20), MTADD(3,15,20)
      COMMON/INMFH/MFHIN
      DIMENSION MTBOTH(2)
C-----INITIALIZE COUNT OF SECTIONS RECONSTRUCTED AND FOR FUTURE USE.
      MTDX=0
      MTEX=0
c-----------------------------------------------------------------------
C
C     SET UP LOOP OVER MTS TO DEFINE BY SUMMATION (IF ANY).
C
c-----------------------------------------------------------------------
      IF(MAKE.LE.0) GO TO 230
C-----REWIND SCRATCH FILES AND INITIALIZE INDICES.
      REWIND ISCRC
      MTC=1
      REWIND ISCRD
      MTDX=0
      REWIND ISCRE
      MTEX=0
      MTE=0
c-----------------------------------------------------------------------
C
C     CHECK FOR MT=18 BEING PRESENT
C
c-----------------------------------------------------------------------
      DO I=1,MTCX
      IF(18.EQ.MTTABC(I)) GO TO 10
      ENDDO
C-----NO MT=18
      IMMT18 = 0
      GO TO 20
C-----MT=18 IS ALREADY DEFINED
   10 IMMT18 = 1
c-----------------------------------------------------------------------
C
C     LOOP OVER RECONSTRUCTION RULES
C
c-----------------------------------------------------------------------
   20 DO 220 IMAKE=1,MAKE
C-----DEFINE THE NUMBER OF MT RANGES THAT CONTRIBUTE TO SUM.
      MTNOW=MTMAKE(IMAKE)
C-----ONLY RECONSTRUCT MT=19 IF MT=18 IS PRESENT.
      IF(MTNOW.EQ.19.AND.IMMT18.LE.0) GO TO 220
C-----ONLY RECONSTRUCT MT=18 IF MT=18 IS NOT PRESENT.
      IF(MTNOW.EQ.18.AND.IMMT18.NE.0) GO TO 220
c-----------------------------------------------------------------------
C
C     TRY RECONSTRUCTION
C
c-----------------------------------------------------------------------
C-----INITIALIZE NUMBER OF SUMMATION POINTS.
      N2A=0
      IADDIN=0
C-----ONLY RECONSTRUCT IF THE SECTION (MT) IS IN THE ORIGINAL DATA OR
C-----IF IT IS REQUIRED FOR A LATER SUMMATION.
      DO 30 I=1,MTCX
      IF(MTNOW.EQ.MTTABC(I)) GO TO 40
   30 CONTINUE
      CALL NEED(IMAKE,MAKE,MTNOW,MTLIST)
      IF(MTLIST.EQ.0) GO TO 220
c-----------------------------------------------------------------------
C
C     FOR RATIOS AND PRODUCTS ONLY RECONSTRUCT IF BOTH REQUIRED MT
C     NUMBERS ARE PRESENT.
C
c-----------------------------------------------------------------------
   40 IF(MTADD(3,1,IMAKE).EQ.0) GO TO 90
C-----REQUIRED MT CAN EITHER BE IN ORIGINAL INPUT....
      MTBOTH(1)=0
      MTBOTH(2)=0
C-----REQUIRED MT CAN EITHER BE IN CORE (IF TOTAL NU-BAR).
      IF(MTADD(1,1,IMAKE).EQ.452.AND.N2CORE.GT.0) MTBOTH(1)=1
      IF(MTADD(2,1,IMAKE).EQ.452.AND.N2CORE.GT.0) MTBOTH(2)=1
C-----OR IN ORIGINAL INPUT....
      DO 50 I=1,MTCX
      IF(N2TABC(I).LE.0) GO TO 50
      IF(MTADD(1,1,IMAKE).EQ.MTTABC(I)) MTBOTH(1)=1
      IF(MTADD(2,1,IMAKE).EQ.MTTABC(I)) MTBOTH(2)=1
   50 CONTINUE
      IF(MTBOTH(1).EQ.1.AND.MTBOTH(2).EQ.1) GO TO 80
C-----OR BE RECONSTRUCTED.
      IF(MTEX.LE.0) GO TO 70
      DO 60 I=1,MTEX
      IF(N2TABE(I).LE.0) GO TO 60
      IF(MTADD(1,1,IMAKE).EQ.MTTABE(I)) MTBOTH(1)=1
      IF(MTADD(2,1,IMAKE).EQ.MTTABE(I)) MTBOTH(2)=1
   60 CONTINUE
      IF(MTBOTH(1).EQ.1.AND.MTBOTH(2).EQ.1) GO TO 80
C-----BOTH REQUIRED MT NUMBERS ARE NOT PRESENT.
   70 IF(IABS(MTADD(3,1,IMAKE)).EQ.3) WRITE(OUTP,250) MTNOW
      IF(MTADD(3,1,IMAKE).EQ.4) WRITE(OUTP,260) MTNOW
      GO TO 220
C-----IF NU-BAR IS REQUIRED FOR RATIO OR PRODUCT COPY IT NOW.
   80 IF(MTADD(1,1,IMAKE).NE.452.AND.MTADD(2,1,IMAKE).NE.452) GO TO 90
      WRITE(OUTP,240) MTNOW
      IADDIN=1
      CALL CORE2A
c-----------------------------------------------------------------------
C
C     DETERMINE WHICH REACTIONS CONTRIBUTE FROM ISCRC. DO NOT READ ISCRC
C     UNTIL A SECTION THAT IS REQUIRED HAS BEEN FOUND.
C
c-----------------------------------------------------------------------
   90 DO 140 MTX=1,MTCX
C-----DEFINE MT NUMBER AND NUMBER OF POINTS IN NEXT SECTION FROM ISCRC.
      MTTRY=MTTABC(MTX)
      N2C=N2TABC(MTX)
C-----IF MT FROM ISCRC HAS ALREADY BEEN RECONSTRUCTED AND IS ON ISCRE
C-----DO NOT USE SECTION FROM ISCRC (SECTION FROM ISCRE WILL BE ADDED
C-----LATER).
      IF(MTEX.LE.0) GO TO 110
      DO 100 I=1,MTEX
      IF(MTTABC(MTX).EQ.MTTABE(I)) GO TO 140
  100 CONTINUE
C-----COMPARE CURRENT MT FROM ISCRC TO CURRENT SUMMATION MT RANGES.
  110 CALL NEED(IMAKE,IMAKE,MTTRY,MTLIST)
      IF(MTLIST.EQ.0) GO TO 140
      IF(IADDIN.EQ.0) WRITE(OUTP,240) MTNOW
      IADDIN=1
      IF(N2C.GT.0) GO TO 120
      WRITE(OUTP,310) MFHIN,MTLIST,N2C,N2A
      GO TO 140
C-----POSITION C TO REQUIRED SECTION.
  120 CALL FINDC(MTX)
C-----ADD CURRENT SECTION FROM ISCRC TO SUMMATION.
      IF(N2A.GT.0) GO TO 130
C-----COPY FIRST SECTION FROM ISCRC TO A.
      CALL COPC2A
      WRITE(OUTP,270) MFHIN,MTLIST,N2C,N2A
      GO TO 140
C-----ANOTHER SECTION TO ADD. MOVE A TO B.
  130 CALL COPA2X(ISCRB)
C-----ADD B AND C TO A.
      CALL ADDB2C
      WRITE(OUTP,270) MFHIN,MTLIST,N2C,N2A
  140 CONTINUE
c-----------------------------------------------------------------------
C
C     DETERMINE WHICH REACTIONS CONTRIBUTE FROM ISCRE. DO NOT READ ISCRE
C     UNTIL A SECTION THAT IS REQUIRED HAS BEEN FOUND.
C
c-----------------------------------------------------------------------
      IF(MTEX.LE.0) GO TO 180
C-----TEMPORARILY SWITCH SCRATCHES C AND E.
      II=ISCRC
      ISCRC=ISCRE
      ISCRE=II
      REWIND ISCRC
      DO 170 MTX=1,MTEX
C-----DEFINE NUMBER OF POINTS IN NEXT SECTION FROM ISCRC.
      MTTRY=MTTABE(MTX)
      N2C=N2TABE(MTX)
C-----COMPARE CURRENT MT FROM ISCRC TO CURRENT SUMMATION MT RANGES.
      CALL NEED(IMAKE,IMAKE,MTTRY,MTLIST)
      IF(MTLIST.EQ.0) GO TO 170
      IF(IADDIN.EQ.0) WRITE(OUTP,240) MTNOW
      IADDIN=1
      IF(N2C.GT.0) GO TO 150
      WRITE(OUTP,310) MFHIN,MTLIST,N2C,N2A
      GO TO 170
C-----POSITION ISCRC (ACTUALLY ISCRE) TO REQUIRED SECTION.
  150 CALL FINDE(MTX)
C-----ADD CURRENT SECTION FROM ISCRC TO SUMMATION.
      IF(N2A.GT.0) GO TO 160
C-----COPY FIRST SECTION FROM ISCRC (ACTUALLY E WITH UNITS SWITCHED)
C-----TO A.
      CALL COPC2A
      WRITE(OUTP,280) MFHIN,MTLIST,N2C,N2A
      GO TO 170
C-----ANOTHER SECTION TO ADD. MOVE A TO B.
  160 CALL COPA2X(ISCRB)
C-----ADD B AND C (ACTUALLY E) TO A.
      CALL ADDB2C
      WRITE(OUTP,280) MFHIN,MTLIST,N2C,N2A
  170 CONTINUE
C-----RE-DEFINE SCRATCH UNITS.
      II=ISCRC
      ISCRC=ISCRE
      ISCRE=II
c-----------------------------------------------------------------------
C
C     ALL SECTIONS ADDED. HAVE ANY SECTIONS CONTRIBUTED TO THE SUM.
C
c-----------------------------------------------------------------------
  180 IF(N2A.GT.0) GO TO 210
c-----------------------------------------------------------------------
C
C     NO CONTRIBUTING SECTIONS. IF THE MT NUMBER TO BE RECONSTRUCTED
C     IS IN THE ORIGINAL DATA PRINT A WARNING MESSAGE THAT IT HAS NOT
C     BEEN RECONSTRUCTED AND THE ORIGINAL DATA WILL BE KEPT.
C
c-----------------------------------------------------------------------
      DO 190 M=1,MTCX
      IF(MTNOW.eq.MTTABC(M)) go to 200
  190 CONTINUE
      GO TO 220
  200 WRITE(OUTP,300) MTNOW,MTNOW
      GO TO 220
c-----------------------------------------------------------------------
C
C     ALL SECTIONS ADDED. RESULT IS IN A. COPY RESULT TO D.
C
c-----------------------------------------------------------------------
  210 MTDX=MTDX+1
      N2TABD(MTDX)=N2A
      MTTABD(MTDX)=MTNOW
      WRITE(OUTP,290) MFHIN,MTNOW,N2A
      CALL COPA2X(ISCRD)
C-----IF THE MT SAVED IN A IS REQUIRED FOR ANY LATER SUMMATIONS SAVE
C-----IT ON ISCRE.
      IF(IMAKE.GE.MAKE) GO TO 220
      CALL NEED(IMAKE+1,MAKE,MTNOW,MTLIST)
      IF(MTLIST.EQ.0) GO TO 220
      CALL COPA2E(MTNOW)
  220 CONTINUE
  230 RETURN
  240 FORMAT(1X,78('-')/' MT=',I4,' Reconstructed Using the Following',
     1 ' MT Numbers'/1X,78('-')/
     1 ' MF  MT   POINTS   POINTS'/7X,'    ADDED      SUM'/1X,78('-'))
  250 FORMAT(1X,78('-')/' MT=',I4,' No Reconstruction of Ratio',
     1 ' - Required MT Missing'/1X,78('-'))
  260 FORMAT(1X,78('-')/' MT=',I4,' No Reconstruction of Product',
     1 ' - Required MT Misiing'/1X,78('-'))
  270 FORMAT(I3,I4,2I9)
  280 FORMAT(I3,I4,2I9,' Reconstructed')
  290 FORMAT(1X,78('-')/I3,I4,9X,I9,' Summation'/1X,78('-'))
  300 FORMAT(1X,78('-')/' MT=',I4,' No Contributing Sections.',
     1 ' Will Use and Output Original MT=',I4,'.')
  310 FORMAT(I3,I4,2I9,' WARNING...Section Required for Summation',
     1 9H CREATED./23X,'           Cannot be Added to Sum.')
      END
      SUBROUTINE PASS4
C=======================================================================
C
C     WRITE SECTIONS OF DATA TO NEW TAPE.
C
C     (1) GET SUM CROSS SECTIONS FROM SCRATCH (ISCRC).
C     (2) ALL OTHER SECTIONS ARE ON ORIGINAL SCRATCH (ISCRC).
C     (3) DELETE SECTIONS (USUALLY ONLY MT=3).
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*1 FIELD6
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      COMMON/MTOLD/MTC,MTCX,N2TABC(1000),MTTABC(1000)
      COMMON/MTNEW/MTD,MTDX,N2TABD(20),MTTABD(20)
      COMMON/TEMPO/TEMP1,TEMP3,IVERSE
      COMMON/FIELDC/FIELD6(11,6)
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
C-----WRITE HEADING FOR OUTPUT REPORT AND POSITION SCRATCH FILES FOR
C-----READING.
      WRITE(OUTP,140)
      WRITE(*   ,140)
      REWIND ISCRC
      MTC=1
      IF(MTDX.LE.0) GO TO 10
      END FILE ISCRD
      REWIND ISCRD
      MTD=1
c-----------------------------------------------------------------------
C
C     SET UP LOOP OVER ALL SECTIONS.
C
c-----------------------------------------------------------------------
   10 DO 130 MTC=1,MTCX
C-----READ NEXT ORIGINAL HEADER INFORMATION FROM SCRATCH.
      READ(ISCRC) C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,
     1 C1,C2,L1,L2,N1,N2
C-----DEFINE ORIGINAL, EDITED NUMBER OF POINTS.
      N2=N2TABC(MTC)
c-----------------------------------------------------------------------
C
C     IS SECTION ORIGINAL OR NEW (NEW = BASED ON SUM OF REACTIONS).
C
c-----------------------------------------------------------------------
C-----LOOK FOR NEW (REPLACED) SECTIONS.
      IF(MTDX.LE.0) GO TO 30
      DO 20 MTX=1,MTDX
      IF(MTTABD(MTX).eq.MTH) go to 70
   20 CONTINUE
c-----------------------------------------------------------------------
C
C     OLD SECTION. COPY FROM ISCRC.
C
c-----------------------------------------------------------------------
   30 IF(IVERSE.EQ.6) GO TO 50
      IF(L2.LE.0) GO TO 40
      TEMP3=TEMP1
      GO TO 50
   40 TEMP3=C1
      IF(MTH.EQ.1) TEMP1=TEMP3
   50 CALL OUT9(TEMP3,FIELD6(1,1))
      CALL OUT9(C2   ,FIELD6(1,2))
      IF(N2.LE.0) GO TO 60
      WRITE(OUTP,160) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      WRITE(*   ,160) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      CALL TABOUT(ISCRC,N2)
      GO TO 130
C-----CANNOT CREATE SECTION...NO CONTRIBUTIONS.
   60 WRITE(OUTP,180) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      WRITE(*   ,180) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      GO TO 130
c-----------------------------------------------------------------------
C
C     NEW SECTION. SKIP ORIGINAL POINTS. LOCATE AND COPY NEW POINTS
C     FROM ISCRD.
C
c-----------------------------------------------------------------------
C-----SKIP ORIGINAL DATA.
   70 IF(N2.LE.0) GO TO 90
      DO 80 J=1,N2,NPAGE
      READ(ISCRC) XC,YC
   80 CONTINUE
C-----DEFINE NEW POINT COUNT.
   90 N2=N2TABD(MTX)
      IF(IVERSE.EQ.6) GO TO 110
      IF(L2.LE.0) GO TO 100
      TEMP3=TEMP1
      GO TO 110
  100 TEMP3=C1
      IF(MTH.EQ.1) TEMP1=TEMP3
  110 CALL OUT9(TEMP3,FIELD6(1,1))
      CALL OUT9(C2   ,FIELD6(1,2))
      IF(N2.LE.0) GO TO 120
      WRITE(OUTP,150) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      WRITE(*   ,150) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
C-----POSITION TO DATA ON ISCRD.
      CALL FINDD(MTX)
C-----OUTPUT DATA.
      CALL TABOUT(ISCRD,N2)
      GO TO 130
C-----CANNOT CREATE SECTION...NO CONTRIBUTIONS.
  120 WRITE(OUTP,180) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
      WRITE(*   ,180) MFH,MTH,N2,((FIELD6(M,J),M=1,11),J=1,2)
C-----END OF SECTION LOOP.
  130 CONTINUE
C-----ALL SECTIONS PROCESSED. ADD FEND LINE.
      MFH=0
      CALL OUTSF
      WRITE(OUTP,170)
      WRITE(*   ,170)
C-----PRINT RUNNING TIME
      CALL TIMER
      RETURN
  140 FORMAT(1X,78('-')/' Description of Output Cross Sections'/
     1 1X,78('-')/' MF  MT  Points      Kelvin     Q-Value',
     1  ' Messages'/1X,78('-'))
  150 FORMAT(I3,I4,I8,1X,11A1,1X,11A1,' Reconstructed')
  160 FORMAT(I3,I4,I8,1X,11A1,1X,11A1)
  170 FORMAT(1X,78('-')/' All Cross Sections Output'/1X,78('-'))
  180 FORMAT(I3,I4,I8,1X,11A1,1X,11A1,' Cannot Create Section')
      END
      SUBROUTINE OKMFMT(MF,MT)
C=======================================================================
C
C     CHECK TO DETERMINE IF MF AND MT NUMBERS ARE DEFINED.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/TEMPO/TEMP1,TEMP3,IVERSE
      DIMENSION MFOK5(2,3),MTOK5(2,19),MFOK6(2,6),MTOK6(2,24)
c-----------------------------------------------------------------------
C
C     ENDF-5 AND EARLIER VERSIONS
C
c-----------------------------------------------------------------------
      DATA MFN5/3/
      DATA MFOK5/1,10,  12,27,  31,33/
      DATA MTN5/19/
      DATA MTOK5/
     1   1,  4,    6,  9,   16, 30,   32, 38,   46, 49,   51, 91,
     1 101,109,  111,114,  120,120,  151,151,  203,207,  251,253,
     2 451,459,  501,502,  504,504,  515,518,  532,533,  602,602,
     3 700,799/
c-----------------------------------------------------------------------
C
C     ENDF-6 AND LATER VERSIONS
C
c-----------------------------------------------------------------------
      DATA MFN6/6/
C-----12/4/17 - added MF=26
      DATA MFOK6/1,10,  12,15,  23,23,  26,27,  31,35, 39,40/
C-----01/27/09 - ADDED 875, 891
C-----12/4/17 - added MT = 523, 526, 527, 528
      DATA MTN6/24/
C----- 3/6/11 - added MT = 152 to 200
C-----12/4/17 - added MT = 523, 526, 527, 528
      DATA MTOK6/
     1   1,  5,   10, 10,   11, 26,   27, 30,   32, 38,   41, 45,
     1  50, 91,  101,109,  111,117,  151,200,  201,207,  251,255,
     2 301,452,  454,459,  501,502,  504,504,  505,506,  515,517,
     2 522,523,  526,528,  534,572,  600,849,  851,870,  875,891/
      IF(IVERSE.GE.6) GO TO 40
c-----------------------------------------------------------------------
C
C     ENDF-5 AND EARLIER VERSIONS.
C
c-----------------------------------------------------------------------
C-----LOOK UP MF NUMBER.
      MFERR=0
      DO 10 I=1,MFN5
      IF(MF.GE.MFOK5(1,I).AND.MF.LE.MFOK5(2,I)) GO TO 20
   10 CONTINUE
      MFERR=1
C-----LOOK UP MT NUMBER.
   20 MTERR=0
      DO 30 I=1,MTN5
      IF(MT.GE.MTOK5(1,I).AND.MT.LE.MTOK5(2,I)) GO TO 80
   30 CONTINUE
      MTERR=1
      GO TO 80
c-----------------------------------------------------------------------
C
C     ENDF-6
C
c-----------------------------------------------------------------------
C-----LOOK UP MF NUMBER.
   40 MFERR=0
      DO 50 I=1,MFN6
      IF(MF.GE.MFOK6(1,I).AND.MF.LE.MFOK6(2,I)) GO TO 60
   50 CONTINUE
      MFERR=1
C-----LOOK UP MT NUMBER.
   60 MTERR=0
      DO 70 I=1,MTN6
      IF(MT.GE.MTOK6(1,I).AND.MT.LE.MTOK6(2,I)) GO TO 80
   70 CONTINUE
      MTERR=1
c-----------------------------------------------------------------------
C
C     PRINT ERROR MESSAGES, IF ANY.
C
c-----------------------------------------------------------------------
   80 IF(MFERR.LE.0) GO TO 90
      IF(MTERR.EQ.0) WRITE(OUTP,110) MF,MT
      IF(MTERR.GT.0) WRITE(OUTP,120) MF,MT
      GO TO 100
   90 IF(MTERR.GT.0) WRITE(OUTP,130) MF,MT
  100 RETURN
  110 FORMAT(I3,I4,32X,' WARNING...MF is Not Defined in ENDF')
  120 FORMAT(I3,I4,32X,' WARNING...MF and MT Are Not Defined in',
     1 ' ENDF')
  130 FORMAT(I3,I4,32X,' WARNING...MT is Not Defined in ENDF')
      END
      SUBROUTINE FINDC(MTX)
C=======================================================================
C
C     POSITION ISCRC TO JUST BEFORE DATA POINTS OF MTX-TH SECTION
C     ON ISCRC.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      COMMON/MTOLD/MTC,MTCX,N2TABC(1000),MTTABC(1000)
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
C-----IF POSITION AT END OF ISCRC REWIND IT.
      IF(MTC.GT.MTCX) GO TO 20
C-----SKIP SECTION HEADER INFORMATION.
   10 READ(ISCRC) C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,
     1 C1,C2,L1,L2,N1,N2
C-----IF ISCRC IS POSITIONED BEYOND REQUIRED SECTION REWIND ISCRC AND
C-----INITIALIZE INDEX.
      IF(MTX.eq.MTC) go to 50
      IF(MTX.gt.MTC) go to 30
   20 REWIND ISCRC
      MTC=1
      GO TO 10
C-----SKIP SECTION.
   30 N2=N2TABC(MTC)
      MTC=MTC+1
      IF(N2.LE.0) GO TO 10
      DO 40 I=1,N2,NPAGE
      READ(ISCRC) XC,YC
   40 CONTINUE
      GO TO 10
C-----INCREMENT INDEX TO INDICATE THAT NEXT READ WILL READ ONE SECTION.
   50 MTC=MTC+1
      RETURN
      END
      SUBROUTINE FINDD(MTX)
C=======================================================================
C
C     POSITION ISCRD TO JUST BEFORE DATA POINTS OF MTX-TH SECTION
C     ON ISCRD.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/MTNEW/MTD,MTDX,N2TABD(20),MTTABD(20)
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
C-----IF ISCRD IS POSITIONED BEYOND REQUIRED SECTION REWIND ISCRD AND
C-----INITIALIZE INDEX.
   10 IF(MTX.eq.MTD) go to 40
      IF(MTX.gt.MTD) go to 20
      REWIND ISCRD
      MTD=1
      GO TO 10
C-----SKIP SECTION.
   20 N2X=N2TABD(MTD)
      MTD=MTD+1
      IF(N2X.LE.0) GO TO 10
      DO 30 I=1,N2X,NPAGE
      READ(ISCRD) XC,YC
   30 CONTINUE
      GO TO 10
C-----INCREMENT INDEX TO INDICATE THAT NEXT READ WILL READ ONE SECTION.
   40 MTD=MTD+1
      RETURN
      END
      SUBROUTINE FINDE(MTX)
C=======================================================================
C
C     POSITION ISCRC (ACTUAL ISCRE) TO JUST BEFORE DATA POINTS OF MTX-TH
C     SECTION ON ISCRC.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/MTNEED/MTE,MTEX,N2TABE(20),MTTABE(20)
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
C-----IF ISCRE IS POSITIONED BEYOND REQUIRED SECTION REWIND ISCRE AND
C-----INITIALIZE INDEX.
   10 IF(MTX.eq.MTE) go to 40
      IF(MTX.gt.MTE) go to 20
      REWIND ISCRC
      MTE=1
      GO TO 10
C-----SKIP SECTION.
   20 N2X=N2TABE(MTE)
      MTE=MTE+1
      IF(N2X.LE.0) GO TO 10
      DO 30 I=1,N2X,NPAGE
      READ(ISCRC) XC,YC
   30 CONTINUE
      GO TO 10
C-----INCREMENT INDEX TO INDICATE THAT NEXT READ WILL READ ONE SECTION.
   40 MTE=MTE+1
      RETURN
      END
      SUBROUTINE NEED(MAKE1,MAKE2,MT,MTLIST)
C=======================================================================
C
C     DETERMINE IF MT IS REQUIRED BY RECONSTRUCTION REQUESTS NR1 THROUGH
C     NR2. IF MT IS REQUIRED RETURN MTLIST=1 (ADD) OR =-1 (SUBTRACT),
C     OTHERWISE RETURN =0 (NO REQUIRED).
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/MAKERN/MAKE ,MTMAKE(20),MTRANG(20), MTADD(3,15,20)
      COMMON/WAITER/WEIGHT
      COMMON/OHRATS/MYRATS
C-----SET UP LOOP OVER REQUESTS.
      DO 30 MR=MAKE1,MAKE2
C-----SET UP LOOP OVER MT RANGES.
      NRANGE=MTRANG(MR)
      DO 20 NR=1,NRANGE
C-----FIRST CHECK FOR RATIO DATA.
      IF(MTADD(3,NR,MR).EQ.0) GO TO 10
      IF(MT.EQ.MTADD(1,NR,MR).OR.MT.EQ.MTADD(2,NR,MR)) GO TO 40
      GO TO 20
C-----NEXT CHECK FOR RANGES.
   10 IF(MT.lt.IABS(MTADD(1,NR,MR))) go to 20
      IF(MT.eq.IABS(MTADD(1,NR,MR))) go to 40
      IF(MT.le.IABS(MTADD(2,NR,MR))) go to 40
   20 CONTINUE
   30 CONTINUE
C-----MT IS NOT NEEDED.
      MTLIST=0
      GO TO 60
C-----MT IS NEEDED. DEFINE MT NUMBER FOR OUTPUT (ADD = MT, MINUS =-MT)
C-----AND WEIGHT (ADD = 1.0, MINUS = -1.0).
   40 WEIGHT=1.0d0
      MTLIST=MT
      IF(MTADD(1,NR,MR).GE.0) GO TO 50
      WEIGHT=-1.0d0
      MTLIST=-MT
C-----DEFINE RESULT AS EITHER SUM (MYRATS=0), PRODUCT (MYRATS=4) OR
C-----RATIO (OTHERWISE = + OR - 3)
   50 MYRATS=0
      IF(MTADD(3,NR,MR).NE.0) MYRATS=MTADD(3,NR,MR)
   60 RETURN
      END
      SUBROUTINE ADDB2C
C=======================================================================
C
C     COMBINE A SECTION FROM B AND C AND STORE THE RESULT IN A.
C
C     HOW B AND C ARE COMBINED WILL DEPEND ON MYRATS
C
C     MYRATS = 0 - A = B + C
C            = 1 - A = B / C
C
C     WHEN DEFINING RATIOS IF THE DENOMINATOR IS ZERO AND THE NUMERATOR
C     IS NON-ZERO THE RATIOS WILL BE DEFINED TO BE ZERO.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/TABA/I2A,N2A,IPA1,IPA2
      COMMON/TABB/I2B,N2B,IPB1,IPB2
      COMMON/TABC/I2C,N2C,IPC1,IPC2
      COMMON/ENDSA/XANOW,XALAST,YANOW,YALAST
      COMMON/ENDSB/XBNOW,XBLAST,YBNOW,YBLAST
      COMMON/ENDSC/XCNOW,XCLAST,YCNOW,YCLAST
      COMMON/OHRATS/MYRATS
C-----INITIALIZE POINT INDICES.
      I2B=-1
      I2C=-1
      N2A=-1
C-----READ FIRST POINT FROM B AND C.
      CALL GETB
      CALL GETC
C-----SELECT LOWER ENERGY.
   10 IF(XBNOW.eq.XCNOW) go to 70
      IF(XBNOW.gt.XCNOW) go to 100
c-----------------------------------------------------------------------
C
C     E-B IS LESS. IF C STARTS AT A HIGHER ENERGY XC-A = XC-B. IF
C     NOT, INTERPOLATE C TO DEFINE XC-C AT E-B.
C
c-----------------------------------------------------------------------
      XANOW=XBNOW
      IF(I2C.gt.1) go to 40
      IF(MYRATS.ne.0) go to 20
      YANOW=YBNOW
      GO TO 30
   20 YANOW=0.0d0
   30 CALL GETB
      GO TO 160
   40 YCTERP=((XBNOW-XCLAST)*YCNOW+(XCNOW-XBNOW)*YCLAST)/(XCNOW-XCLAST)
      IF(MYRATS.ne.0) go to 50
      YANOW=YBNOW+YCTERP
      GO TO 60
   50 CALL RATIOS(YANOW,YBNOW,YCTERP)
   60 CALL GETB
      GO TO 160
c-----------------------------------------------------------------------
C
C     ENERGIES ARE EQUAL. NO INTERPOOLATION REQUIRED.
C
c-----------------------------------------------------------------------
   70 XANOW=XBNOW
      IF(MYRATS.ne.0) go to 80
      YANOW=YBNOW+YCNOW
      GO TO 90
   80 CALL RATIOS(YANOW,YBNOW,YCNOW)
   90 CALL GETB
      CALL GETC
      GO TO 160
c-----------------------------------------------------------------------
C
C     E-C IS LESS. IF B STARTS AT A HIGHER ENERGY XC-A = XC-C. IF
C     NOT, INTERPOLATE B TO DEFINE XC-B AT E-C.
C
c-----------------------------------------------------------------------
  100 XANOW=XCNOW
      IF(I2B.gt.1) go to 130
      IF(MYRATS.ne.0) go to 110
      YANOW=YCNOW
      GO TO 120
  110 YANOW=0.0d0
  120 CALL GETC
      GO TO 160
  130 YBTERP=((XCNOW-XBLAST)*YBNOW+(XBNOW-XCNOW)*YBLAST)/(XBNOW-XBLAST)
      IF(MYRATS.ne.0) go to 140
      YANOW=YBTERP+YCNOW
      GO TO 150
  140 CALL RATIOS(YANOW,YBTERP,YCNOW)
  150 CALL GETC
c-----------------------------------------------------------------------
C
C     SAVE A. CONTINUE UNTIL ALL POINTS HAVE BEEN USED.
C
c-----------------------------------------------------------------------
  160 CALL SAVEA
      IF(I2B.LE.N2B.OR.I2C.LE.N2C) GO TO 10
c-----------------------------------------------------------------------
C
C     SUMMATION IS FINISHED. IF REQUIRED COPY LAST PAGE OF A TO SCRATCH
C     ISCRA.
C
c-----------------------------------------------------------------------
      CALL ENDA
      RETURN
      END
      SUBROUTINE RATIOS(YAIN,YBIN,YCIN)
C=======================================================================
C
C     DEFINE RATIO OR PRODUCT
C     MYRATS = 4         - PRODUCT - YA = YB*YC
C            = OTHERWISE - RATIO   - YA = YB/YC
C
C     FOR RATIO, IF MYRATS IS LESS THAN ZERO REVERSE TO DEFINE
C     YA = YC/YB
C
C     IF YC = 0 - AND YB = 0 - YA = 1
C           = 0 - OTHERWISE  - YA = 0
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/OHRATS/MYRATS
c-----------------------------------------------------------------------
C
C     PRODUCT.
C
c-----------------------------------------------------------------------
      IF(MYRATS.NE.4) GO TO 10
      YAIN=YBIN*YCIN
      RETURN
c-----------------------------------------------------------------------
C
C     RATIO - DIRECT OR INVERSE.
C
c-----------------------------------------------------------------------
   10 IF(MYRATS.lt.0) go to 20
C-----YA = YB/YC
      YBUSE=YBIN
      YCUSE=YCIN
      GO TO 30
C-----YA = YC/YB
   20 YBUSE=YCIN
      YCUSE=YBIN
   30 IF(YCUSE.ne.0.0d+0) go to 50
      IF(YBUSE.ne.0.0d+0) go to 40
C-----BOTH YC AND YB ARE ZERO
      YAIN=1.0d0
      RETURN
C-----YC IS ZERO AND YB IS NOT ZERO
   40 YAIN=0.0d0
      RETURN
C-----YC IS NOT ZERO
   50 YAIN=YBUSE/YCUSE
      RETURN
      END
      SUBROUTINE GETA
C=======================================================================
C
C     DEFINE NEXT DATA POINT FROM ENDF FORMATTED FILE.
C     READ DATA A PAGE AT A TIME FROM UNIT ITAPE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*1 FIELD6
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/TABA/I2A,N2A,IPA1,IPA2
      COMMON/ENDSA/XANOW,XALAST,YANOW,YALAST
      COMMON/OPS/IMOPS(14)
      COMMON/MAXIEMEV/XMAX
      COMMON/PROJECT/AWI
      COMMON/LASTE/ELAST
      COMMON/FIELDC/FIELD6(11,6)
      COMMON/PAGER/NPAGE,NPAGEM1
c-----2019/2/26 = upper energy and cross section limits for ALL MT
      INCLUDE 'fixup.h'
      DATA OKDIFF/1.0D-09/
C-----INITIALIZE WHEN FIRST POINT IS REQUESTED.
      IF(I2A.ge.0) go to 10
c-----------------------------------------------------------------------
C
C     DEFINE FIRST POINT. FOR NON-THRESHOLD REACTIONS THIS IS ALWAYS
C     THE FIRST POINT READ. FOR THRESHOLD REACTIONS THIS IS THE FIRST
C     POINT AT OR ABOVE THE THRESHOLD AND THE CROSS SECTION MUST BE
C     EQUAL TO ZERO.
C
c-----------------------------------------------------------------------
C-----INITIALIZE INDICES AND LOAD FIRST PAGE.
      I2A=1
      IPA1=0
      IPA2=NPAGE
c-----2019/2/26 - Save MAT, MF, MT.
      call maxie1(MATH,MFH,MTH)
C-----INITIALIZE LAST ENERGY
      ELAST=0.0d0
      IF(IPA2.GT.N2A) IPA2=N2A
      IPA3=IPA2-IPA1
      CALL POINTI(XA,YA,IPA3)
c-----2019/2/26 - Savec MT limit X and Y limikts
      call maxie2(XA(IPA3),YA(IPA3))
C-----INITIALIZE LAST POINT TO ZERO ENERGY AND CROSS SECTION.
      XALAST=0.0d0
      YALAST=0.0d0
C-----DEFINE FIRST POINT
      XANOW=XA(I2A)
      YANOW=YA(I2A)
c-----------------------------------------------------------------------
C
C     2020/2/2 - THRESHOLD REACTION TREATMENT NO LONGER ALLOWED
C
c-----------------------------------------------------------------------
c-----2019/10/31 - Added to ALWAYS accept first point, bypassing the
C-----             previous Threshold Treatment, no longer allowed.
      go to 50
C-----INCREMENT POINT INDEX AND SAVE LAST POINT VALUES.
   10 I2A=I2A+1
      XALAST=XANOW
      YALAST=YANOW
c-----------------------------------------------------------------------
C
C     IF NO POINTS REMAIN CONTINUE CROSS SECTION AS HISTOGRAM FROM
C     LAST POINT.
C
c-----------------------------------------------------------------------
      IF(I2A.le.N2A) go to 30
c-----------------------------------------------------------------------
c
c     First point beyond END extend as = 0
c     Beyond extend as CONSTANT
c
c-----------------------------------------------------------------------
C-----EXTEND CROSS SECTION AS CONSTANT EQUAL TO EITHER LAST VALUE
      IF(I2A.gt.(N2A+1)) go to 20
C-----EXTEND CROSS SECTION AS ZERO (UNLESS IT IS ALREADY ZERO).
      IF(YANOW.EQ.0.0d0) GO TO 20
      YANOW=0.0d0
      GO TO 50
   20 XANOW=XMAX
      GO TO 50
c-----------------------------------------------------------------------
C
C     POINTS REMAIN. ARE THERE ANY POINTS LEFT IN CORE.
C
c-----------------------------------------------------------------------
   30 IF(I2A.le.IPA2) go to 40
C-----NO. INCREMENT INDICES AND LOAD NEXT PAGE.
      IPA1=IPA2
      IPA2=IPA2+NPAGE
      IF(IPA2.GT.N2A) IPA2=N2A
      IPA3=IPA2-IPA1
      CALL POINTI(XA,YA,IPA3)
c-----2019/2/26 - Savec MT limit X and Y limikts
      call maxie2(XA(IPA3),YA(IPA3))
C-----DEFINE INDEX TO CORE AND THEN DEFINE X AND Y VALUES.
   40 ICORE=I2A-IPA1
      XANOW=XA(ICORE)
      YANOW=YA(ICORE)
C-----INSURE CROSS SECTION IS NOT NEGATIVE (INPUT OPTION).
   50 IF(IMOPS(6).LE.0.OR.YANOW.GE.0.0d0) GO TO 60
      CALL OUT9(XANOW ,FIELD6(1,1))
      CALL OUT9(YANOW ,FIELD6(1,2))
      WRITE(OUTP,100) ((FIELD6(M,J),M=1,11),J=1,2)
      YANOW=0.0d0
C-----DELETE POINTS NOT IN ASCENDING ENERGY ORDER (INPUT OPTION).
   60 IF(IMOPS(7).LE.0.OR.(XANOW.GE.XALAST)) GO TO 80
C-----ALLOW FOR SMALL DIFFERENCES (TO ABOUT 9 DIGITS)
      IF(DABS(XALAST-XANOW).LE.OKDIFF*XALAST) GO TO 70
      CALL OUT9(XALAST,FIELD6(1,1))
      CALL OUT9(XANOW ,FIELD6(1,2))
      WRITE(OUTP,110) ((FIELD6(M,J),M=1,11),J=1,2)
      GO TO 10
   70 XANOW=XALAST
C-----DELETE DUPLICATE POINTS (INPUT OPTION).
   80 IF(IMOPS(8).LE.0) GO TO 90
      IF(XANOW.NE.XALAST.OR.YANOW.NE.YALAST) GO TO 90
      CALL OUT9(XALAST,FIELD6(1,1))
      WRITE(OUTP,120) (FIELD6(M,1),M=1,11)
      GO TO 10
   90 RETURN
  100 FORMAT(39X,' E=',11A1,' eV. Cross Section=',11A1,
     1 ' (Set to Zero)')
  110 FORMAT(39X,' E=',11A1,' Next Point E=',11A1,' Deleted')
  120 FORMAT(39X,' E=',11A1,' Duplicate Point Deleted')
      END
      SUBROUTINE GETB
C=======================================================================
C
C     DEFINE NEXT DATA POINT FROM SCRATCH FILE ISCRB.
C     READ DATA A PAGE AT A TIME FROM UNIT ISCRB (IN BINARY).
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/TABB/I2B,N2B,IPB1,IPB2
      COMMON/ENDSB/XBNOW,XBLAST,YBNOW,YBLAST
      COMMON/MAXIEMEV/XMAX
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
C-----INITIALIZE WHEN FIRST POINT IS REQUESTED.
      IF(I2B.gt.0) go to 20
C-----INITIALIZE INDICES.
      I2B=1
      IPB1=0
      IPB2=NPAGE
      IF(IPB2.GT.N2B) IPB2=N2B
C-----IF DATA IS ON SCRATCH REWIND AND READ FIRST PAGE.
      IF(N2B.LE.NPAGE) GO TO 10
      REWIND ISCRB
      READ(ISCRB) XB,YB
   10 XBLAST=XB(1)
      YBLAST=YB(1)
      GO TO 50
c-----------------------------------------------------------------------
C
C     DEFINE NEXT POINT.
C
c-----------------------------------------------------------------------
C-----INCREMENT POINT INDEX AND SAVE LAST POINT VALUES.
   20 I2B=I2B+1
      XBLAST=XBNOW
      YBLAST=YBNOW
C-----IF NO POINTS REMAIN CONTINUE CROSS SECTION AS HISTOGRAM FROM
C-----LAST POINT.
      IF(I2B.le.N2B) go to 40
C-----EXTEND CROSS SECTION AS ZERO.
      IF(I2B.gt.(N2B+1)) go to 30
      IF(YBNOW.EQ.0.0d0) GO TO 30
      YBNOW=0.0d0
      GO TO 60
C-----EXTEND FOLLOWING POINTS TO KEEP ZERO CROSS SECTON AND SET ENERGY
C-----TO MAXIMUM (E.G. 100 MEV).
   30 XBNOW=XMAX
      GO TO 60
C-----POINTS REMAIN. ARE THERE ANY POINTS LEFT IN CORE.
   40 IF(I2B.le.IPB2) go to 50
C-----NO. INCREMENT INDICES AND LOAD NEXT PAGE.
      IPB1=IPB2
      IPB2=IPB2+NPAGE
      IF(IPB2.GT.N2B) IPB2=N2B
      READ(ISCRB) XB,YB
C-----DEFINE INDEX TO CORE AND THEN DEFINE X AND Y VALUES.
   50 ICORE=I2B-IPB1
      XBNOW=XB(ICORE)
      YBNOW=YB(ICORE)
   60 RETURN
      END
      SUBROUTINE GETC
C=======================================================================
C
C     DEFINE NEXT DATA POINT FROM SCRATCH FILE ISCRC.
C     READ DATA A PAGE AT A TIME FROM UNIT ISCRC (IN BINARY).
C
C     DEFINE CROSS SECTION TO BE ADDED OR SUBTRACTED BY MULTIPLYING
C     CROSS SECTION BY WEIGHT (WEIGHT=1.0 - PLUS, WEIGHT=-1.0 - MINUS)
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/TABC/I2C,N2C,IPC1,IPC2
      COMMON/ENDSC/XCNOW,XCLAST,YCNOW,YCLAST
      COMMON/MAXIEMEV/XMAX
      COMMON/WAITER/WEIGHT
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
C-----INITIALIZE WHEN FIRST POINT IS REQUESTED.
      IF(I2C.gt.0) go to 10
C-----INITIALIZE INDICES AND LOAD FIRST PAGE.
      I2C=1
      IPC1=0
      IPC2=NPAGE
      IF(IPC2.GT.N2C) IPC2=N2C
C-----DATA IS ALWAYS ON SCRATCH. READ FIRST PAGE.
      READ(ISCRC) XC,YC
      XCLAST=XC(1)
      YCLAST=YC(1)
      GO TO 40
c-----------------------------------------------------------------------
C
C     DEFINE NEXT POINT.
C
c-----------------------------------------------------------------------
C-----INCREMENT POINT INDEX AND SAVE LAST POINT VALUES.
   10 I2C=I2C+1
      XCLAST=XCNOW
      YCLAST=YCNOW
C-----IF NO POINTS REMAIN CONTINUE CROSS SECTION AS HISTOGRAM FROM
C-----LAST POINT.
      IF(I2C.le.N2C) go to 30
C-----EXTEND CROSS SECTION AS ZERO.
      IF(I2C.gt.(N2C+1)) go to 20
      IF(YCNOW.EQ.0.0d0) GO TO 20
      YCNOW=0.0d0
      GO TO 50
C-----EXTEND FOLLOWING POINTS TO KEEP ZERO CROSS SECTON AND SET ENERGY
C-----TO MAXIMUM (E.G. 100 MEV).
   20 XCNOW=XMAX
      GO TO 50
C-----POINTS REMAIN. ARE THERE ANY POINTS LEFT IN CORE.
   30 IF(I2C.le.IPC2) go to 40
C-----NO. INCREMENT INDICES AND LOAD NEXT PAGE.
      IPC1=IPC2
      IPC2=IPC2+NPAGE
      IF(IPC2.GT.N2C) IPC2=N2C
      READ(ISCRC) XC,YC
C-----DEFINE INDEX TO CORE AND THEN DEFINE X AND Y VALUES.
   40 ICORE=I2C-IPC1
      XCNOW=XC(ICORE)
      YCNOW=WEIGHT*YC(ICORE)
   50 RETURN
      END
      SUBROUTINE SAVEC
C=======================================================================
C
C     SAVE CURRENT DATA POINT. WHEN PAGE IS FULL WRITE DATA
C     A PAGE AT A TIME TO UNIT ISCRC (IN BINARY).
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/TABC/I2C,N2C,IPC1,IPC2
      COMMON/ENDSC/XCNOW,XCLAST,YCNOW,YCLAST
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
C-----INITIALIZE WHEN FIRST POINT IS TO BE SAVED.
      IF(N2C.gt.0) go to 10
C-----INITIALIZE INDICES AND LOAD FIRST PAGE.
      N2C=0
      IPC1=0
      IPC2=NPAGE
c-----------------------------------------------------------------------
C
C     DEFINE NEXT POINT.
C
c-----------------------------------------------------------------------
C-----INCREMENT POINT COUNT.
   10 N2C=N2C+1
C-----IF PAGE IS FULL UNLOAD IT TO SCRATCH.
      IF(N2C.le.IPC2) go to 20
      IPC1=IPC2
      IPC2=IPC2+NPAGE
      WRITE(ISCRC) XC,YC
C-----DEFINE INDEX TO CORE AND THEN SAVE X AND Y VALUES.
   20 ICORE=N2C-IPC1
      XC(ICORE)=XCNOW
      YC(ICORE)=YCNOW
      RETURN
      END
      SUBROUTINE CORE2A
C=======================================================================
C
C     MOVING AND SAVING OF POINTS DURING SUMMATION ARE PERFORMED BY
C     THIS ROUTINE.
C
C     ADDITION OF FIRST SECTION TO SUM DOES NOT REQUIRE MERGE. COPY
C     SECTION FROM CORE TO A.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/TABA/I2A,N2A,IPA1,IPA2
      COMMON/CORTAB/MFCORE,MTCORE,N2CORE
      INCLUDE 'fixup.h'
c-----------------------------------------------------------------------
C
C     COPY FIRST SECTION FROM CORE TO A. ALL DATA IS ALWAYS CORE
C     RESIDENT - SCRATCH IS NOT USED.
C
c-----------------------------------------------------------------------
C-----NOTHING TO DO IF NO POINTS IN CORE.
      IF(N2CORE.LE.0) GO TO 20
C-----DEFINE POINT COUNT.
      N2A=N2CORE
C-----COPY POINTS FROM CORE TO A.
      DO 10 I=1,N2A
      XA(I)=XCORE(I)
      YA(I)=YCORE(I)
   10 CONTINUE
      WRITE(OUTP,30) MFCORE,MTCORE,N2CORE,N2A
   20 RETURN
   30 FORMAT(I3,I4,2I9)
      END
      SUBROUTINE COPC2A
C=======================================================================
C
C     MOVING AND SAVING OF POINTS DURING SUMMATION ARE PERFORMED BY
C     THIS ROUTINE.
C
C     ADDITION OF FIRST SECTION TO SUM DOES NOT REQUIRE MERGE. COPY
C     SECTION FROM SCRATCH ISCRC TO A. MULTIPLY BY WEIGHT (ADD = 1.0,
C     MINUS = -1.0)
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/TABA/I2A,N2A,IPA1,IPA2
      COMMON/TABC/I2C,N2C,IPC1,IPC2
      COMMON/WAITER/WEIGHT
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
c-----------------------------------------------------------------------
C
C     COPY FIRST SECTION FROM ISCRC TO A. IF ALL DATA IS CORE RESIDENT
C     LEAVE IT THERE. OTHERWISE COPY TO SCRATCH, END FILE AND REWIND.
C
c-----------------------------------------------------------------------
C-----DEFINE POINT COUNT.
      N2A=N2C
C-----REWIND SCRATCH IF IT WILL BE USED.
      IF(N2A.GT.NPAGE) REWIND ISCRA
C-----COPY POINTS FROM ISCRC TO A.
      DO 30 I=1,N2A,NPAGE
      READ(ISCRC) XA,YA
C-----IF WEIGHT IS NOT 1.0 MULTIPLY CROSS SECTION BY WEIGHT (ADD =1.0,
C-----SUBTRACT = -1.0).
      IF(WEIGHT.EQ.1.0d0) GO TO 20
      II=I+NPAGEM1
      IF(II.GT.N2A) II=N2A
      III=(II-I)+1
      DO 10 J=1,III
      YA(J)=WEIGHT*YA(J)
   10 CONTINUE
   20 IF(N2A.LE.NPAGE) GO TO 40
      WRITE(ISCRA) XA,YA
   30 CONTINUE
      END FILE ISCRA
      REWIND ISCRA
   40 RETURN
      END
      SUBROUTINE SAVEA
C=======================================================================
C
C     MOVING AND SAVING OF POINTS DURING SUMMATION ARE PERFORMED BY
C     THIS ROUTINE.
C
C     SAVE CURRENT DATA POINT. WHEN PAGE IS FULL WRITE DATA A PAGE AT
C     A TIME TO UNIT ISCRA (IN BINARY).
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/ENDSA/XANOW,XALAST,YANOW,YALAST
      COMMON/TABA/I2A,N2A,IPA1,IPA2
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
C-----INITIALIZE WHEN FIRST POINT IS TO BE SAVED.
      IF(N2A.gt.0) go to 10
C-----INITIALIZE INDICES AND LOAD FIRST PAGE.
      N2A=0
      IPA1=0
      IPA2=NPAGE
      REWIND ISCRA
c-----------------------------------------------------------------------
C
C     DEFINE NEXT POINT.
C
c-----------------------------------------------------------------------
C-----INCREMENT POINT COUNT.
   10 N2A=N2A+1
C-----IF PAGE IS FULL UNLOAD IT TO SCRATCH.
      IF(N2A.le.IPA2) go to 20
      IPA1=IPA2
      IPA2=IPA2+NPAGE
      WRITE(ISCRA) XA,YA
C-----DEFINE INDEX TO CORE AND THEN SAVE X AND Y VALUES.
   20 ICORE=N2A-IPA1
      XA(ICORE)=XANOW
      YA(ICORE)=YANOW
      RETURN
      END
      SUBROUTINE ENDA
C=======================================================================
C
C     MOVING AND SAVING OF POINTS DURING SUMMATION ARE PERFORMED BY
C     THIS ROUTINE.
C
C     ADDITION OF NEXT SECTION IS COMPLETE. LEAVE A IN CORE OR ON
C     SCRATCH A.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/TABA/I2A,N2A,IPA1,IPA2
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
      IF(N2A.LE.NPAGE) GO TO 10
      WRITE(ISCRA) XA,YA
      END FILE ISCRA
      REWIND ISCRA
   10 CONTINUE
      RETURN
      END
      SUBROUTINE COPA2X(ISCRX)
C=======================================================================
C
C     PARTIAL OR FINAL SUMMATION IS NOW STORED IN A. IF PARTIAL
C     SUMMATION (INDICATED BY ISCRX=ISCRB) TRANSFER TO B. IF FINAL
C     SUMMATION TRANSFER TO SCRATCH ISCRX.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/TABA/I2A,N2A,IPA1,IPA2
      COMMON/TABB/I2B,N2B,IPB1,IPB2
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
      IF(N2A.GT.NPAGE) GO TO 30
C-----IF PARTIAL SUMMATION COPY A TO B.
      IF(ISCRX.NE.ISCRB) GO TO 20
      DO 10 I=1,N2A
      XB(I)=XA(I)
      YB(I)=YA(I)
   10 CONTINUE
      GO TO 50
   20 WRITE(ISCRX) XA,YA
      GO TO 60
C-----IF PARTIAL SUMMATION REWIND ISCRB BEFORE WRITE.
   30 IF(ISCRX.EQ.ISCRB) REWIND ISCRB
      DO 40 I=1,N2A,NPAGE
      READ(ISCRA) XA,YA
      WRITE(ISCRX) XA,YA
   40 CONTINUE
C-----IF PARTIAL SUMMATION END FILE AND REWIND ISCRB.
      IF(ISCRX.NE.ISCRB) GO TO 60
      END FILE ISCRB
      REWIND ISCRB
C-----DEFINE NUMBER OF POINTS IN B.
   50 N2B=N2A
   60 RETURN
      END
      SUBROUTINE COPA2E(MTA)
C=======================================================================
C
C     THE REACTION THAT IS CURRENTLY SAVED IN A IS REQUIRED FOR LATER
C     SUMMATIONS. SAVE THE REACTION ON E.
C
C     IF NO REACTIONS ARE YET ON E COPY A TO E.
C     IF THERE ARE REACTIONS ON E MERGE E AND A TOGETHER ONTO B AND
C     WHEN THE MERGE IS COMPLETED SWITCH SCRATCH FILES B AND E SO THAT
C     THE RESULT IS AGAIN ON E.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/TABA/I2A,N2A,IPA1,IPA2
      COMMON/MTNEED/MTE,MTEX,N2TABE(20),MTTABE(20)
      COMMON/PAGER/NPAGE,NPAGEM1
      INCLUDE 'fixup.h'
      DIMENSION N2TABX(20),MTTABX(20)
C-----REWIND SCRATCH FILE B.
      REWIND ISCRB
C-----INITIALIZE INDEX TO E AND NEW NUMBER OF SECTIONS ON E.
      MTE=1
      MTXX=0
C-----IF NO DATA ON E COPY A WITHOUT MERGE.
      IF(MTEX.LE.0) GO TO 50
c-----------------------------------------------------------------------
C
C     COPY ALL SECTIONS FROM E THAT HAVE A SMALLER MT THAN MTA.
C
c-----------------------------------------------------------------------
C-----REWIND SCRATCH E AND SET UP LOOP OVER SECTIONS ON E.
      REWIND ISCRE
      DO 20 MTE=1,MTEX
C-----DEFINE MT NUMBER AND NUMBER OF POINTS FOR NEXT SECTION ON E.
      MTX=MTTABE(MTE)
      N2X=N2TABE(MTE)
C-----MERGE DATA INTO MT ORDER.
      IF(MTA.lt.MTX) go to 50
      IF(MTA.eq.MTX) go to 30
C-----COPY DATA FROM E TO B.
      DO 10 I=1,N2X,NPAGE
      READ(ISCRE) XB,YB
      WRITE(ISCRB) XB,YB
   10 CONTINUE
C-----SAVE INFORMATION FOR SECTION.
      MTXX=MTXX+1
      MTTABX(MTXX)=MTX
      N2TABX(MTXX)=N2X
   20 CONTINUE
C-----ALL DATA FROM E HAS BEEN MERGED AND DATA FROM A HAS NOT YET BEEN
C-----MERGED. SET INDEX TO INDICATE NO MORE SECTIONS ON E AND COPY A
C-----TO B.
      MTE=MTEX+1
      GO TO 50
C-----SAME MT NUMBER ON E AND A. SKIP SECTION ON E AND USE LATEST
C-----RECONSTRUCTED SECTION FROM B.
   30 DO 40 I=1,N2X,NPAGE
      READ(ISCRE) XB,YB
   40 CONTINUE
c-----------------------------------------------------------------------
C
C     COPY A TO B.
C
c-----------------------------------------------------------------------
   50 IF(N2A.GT.NPAGE) GO TO 60
      WRITE(ISCRB) XA,YA
      GO TO 80
   60 REWIND ISCRA
      DO 70 I=1,N2A,NPAGE
      READ(ISCRA) XA,YA
      WRITE(ISCRB) XA,YA
   70 CONTINUE
C-----SAVE INFORMATION FOR SECTION.
   80 MTXX=MTXX+1
      MTTABX(MTXX)=MTA
      N2TABX(MTXX)=N2A
C-----IF ANY SECTIONS REMAIN ON E COPY THEM TO B.
      IF(MTE.GT.MTEX) GO TO 110
c-----------------------------------------------------------------------
C
C     COPY ALL SECTIONS FROM E THAT HAVE A HIGHER MT THAN MTA.
C
c-----------------------------------------------------------------------
      DO 100 M=MTE,MTEX
      N2X=N2TABE(M)
      DO 90 I=1,N2X,NPAGE
      READ(ISCRE) XB,YB
      WRITE(ISCRB) XB,YB
   90 CONTINUE
C-----SAVE INFORMATION FOR SECTION.
      MTXX=MTXX+1
      MTTABX(MTXX)=MTTABE(M)
      N2TABX(MTXX)=N2X
  100 CONTINUE
c-----------------------------------------------------------------------
C
C     ALL SECTIONS HAVE BEEN MERGED IN MT ORDER TO B.
C
c-----------------------------------------------------------------------
C-----END FILE AND REWIND.
  110 END FILE ISCRB
      REWIND ISCRB
C-----SWITCH SCRATCH B AND E SO THAT RESULT IS AGAIN ON E.
      II=ISCRE
      ISCRE=ISCRB
      ISCRB=II
C-----DEFINE NUMBER OF SECTIONS AND MT/N2 FOR ALL SECTIONS ON B.
      MTEX=MTXX
      DO 120 I=1,MTEX
      MTTABE(I)=MTTABX(I)
      N2TABE(I)=N2TABX(I)
  120 CONTINUE
C-----SET INDEX TO INDICATE THAT E HAS BEEN REWOUND.
      MTE=1
      RETURN
      END
      SUBROUTINE TABOUT(ISCRX,IXY)
C=======================================================================
C
C     WRITE TAB1 SECTION WITH IXY DATA POINTS.
C     OUTPUT WILL INCLUDE HEADER AND LEADER LINES, INTERPOLATION LAW
C     AND ALL DATA POINTS.
C     READ POINTS A PAGE AT A TIME FROM SCRATCH FILE ISCRX.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*1 FIELD6
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      COMMON/FLAGS/MINUS3,IMPLUS
      COMMON/LASTE/ELAST
      COMMON/OPS/IMOPS(14)
      COMMON/PAGER/NPAGE,NPAGEM1
      COMMON/FIELDC/FIELD6(11,6)
      INCLUDE 'fixup.h'
      DIMENSION NBTO(1),INTO(1)
      DATA INTO/2/
c-----------------------------------------------------------------------
C
C     IF REQUESTED DELETE SECTION IF CROSS SECTION =0
C     ASSUME THIS CAN ONLY HAPPEN FOR SMALL, IN CORE, SECTIONS.
C
c-----------------------------------------------------------------------
      IMLOAD=0
      IF(N2.GT.NPAGE.OR.IMOPS(14).LE.0) GO TO 20
C-----SET FLAG TO INDICATE FIRST PAGE IS ALREADY IN CORE.
      IMLOAD=1
      READ(ISCRX) XA,YA
      DO 10 IP1=1,N2
      IF(YA(IP1).NE.0.0d0) GO TO 20
   10 CONTINUE
      WRITE(OUTP,80)
      RETURN
c-----------------------------------------------------------------------
C
C     OUTPUT SECTION.
C
c-----------------------------------------------------------------------
C-----DEFINE ONE INTERPOLATION REGION WITH IXY POINTS.
   20 N2=IXY
      NBTO(1)=N2
      N1=1
c-----------------------------------------------------------------------
c
c     2017/10/17 MF=23 (Photon Cross Sections) skip = 0 at start
c
c-----------------------------------------------------------------------
      if(MF.eq.23) then         ! Only MF=23
      if(XA(1).eq.XA(2)) then   ! Only repeated E
      if(YA(1).eq.0.0d0) then   ! Only start y = 0
      do i=2,N2                 ! Ignore first point
      XA(i-1) = XA(i)
      YA(i-1) = YA(i)
      enddo
      N2 = N2 - 1
      NBTO(1) = N2
      endif
      endif
      endif
c-----------------------------------------------------------------------
C-----INITIALIZE LAST ENERGY FOR OUTPUT ENERGY ORDER TEST.
      ELAST=0.0d0
C-----INITIALIZE COUNT OF NEGATIVE CROSS SECTIONS.
      MINUS3=0
      IMPLUS=0
C-----OUTPUT SECTION HEAD LINE.
      CALL CONTOF
C-----OUTPUT SECTION LEADER LINE.
      CALL CARDOF
C-----OUTPUT INTERPOLATION LAW AS LINEAR-LINEAR.
      CALL TERPO(NBTO,INTO,N1)
C-----SET UP LOOP OVER PAGES OF DATA.
      DO 50 IP1=1,N2,NPAGE
      IP2=IP1+NPAGEM1
      IF(IP2.GT.N2) IP2=N2
      ICORE=(IP2-IP1)+1
C-----FIRST PAGE MAY HAVE ALREADY BEEN LOADED ABOVE.
      IF(IMLOAD.LE.0) READ(ISCRX) XA,YA
      IMLOAD=0
C-----TEST ENERGY ORDER.
      DO 40 I=1,ICORE
      IF(XA(I).GE.ELAST) GO TO 30
      CALL OUT9(ELAST,FIELD6(1,1))
      CALL OUT9(XA(I),FIELD6(1,2))
      WRITE(OUTP,60) ((FIELD6(M,J),M=1,11),J=1,2)
   30 ELAST=XA(I)
   40 CONTINUE
C-----OUTPUT A PAGE OF POINTS.
      CALL POINTO(XA,YA,ICORE)
   50 CONTINUE
C-----OUTPUT SEND LINE.
      CALL OUTSF
C-----PRINT MESSAGE IF ANY CROSS SECTIONS ARE NEGATIVE.
      IF(MINUS3.GT.0) WRITE(OUTP,70) MINUS3
C-----PRINT MESSAGE IF CROSS SECTIONS IS NOT POSITIVE AT ANY ENERGY.
      IF(IMPLUS.LE.0) WRITE(OUTP,90)
      RETURN
   60 FORMAT(39X,' ERROR...Last Point E=',11A1,' eV'/
     1       39X,'         Next Point E=',11A1,' eV'/
     1       39X,'         Energy Order ERROR')
   70 FORMAT(39X,' WARNING...Above Cross Section is Negative at',
     1       39X,'          ',I6,' Energies')
   80 FORMAT(39X,' WARNING...Cross Section = 0 at All'/
     1       39X,'           Energies. Section Deleted')
   90 FORMAT(39X,' WARNING...Cross Section is Not Positive'/
     1       39X,'           at Any Energies. Section Output')
      END
      SUBROUTINE CONTIF
C=======================================================================
C
C     READ ENDF HEADER RECORD.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/OPS/IMOPS(14)
C-----READ LINE.
      CALL CONTI
C-----CHECK MAT/MF/MT.
      CALL SAMEIN
C-----IF CURRENT LINE IS NOT A SEND LINE CHECK FOR LEGAL MF/MT.
      IF(MTH.GT.0.AND.IMOPS(10).GT.0) CALL OKMFMT(MFH,MTH)
      RETURN
      END
      SUBROUTINE CONTOF
C=======================================================================
C
C     WRITE ENDF HEADER RECORD.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 DOIT
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/OPS/IMOPS(14)
C-----IF SEND, FEND OR MEND OUTPUT IN STANDARD FORM.
      IF(MTH.GT.0) GO TO 10
      CALL CONTO
      RETURN
C-----CHECK OUTPUT MAT/MF/MT.
   10 CALL SAMOUT(DOIT)
      IF(DOIT.LE.0) GO TO 20
C-----IF CURRENT LINE IS NOT A SEND LINE CHECK FOR LEGAL MF/MT.
      IF(IMOPS(10).GT.0) CALL OKMFMT(MFH,MTH)
C-----OUTPUT
      CALL CONTO
   20 RETURN
      END
      SUBROUTINE CARDIF
C=======================================================================
C
C     READ NEXT ENDF LEADER LINE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      RETURN
      END
      SUBROUTINE CARDOF
C=======================================================================
C
C     WRITE NEXT ENDF LEADER LINE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 DOIT
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      IF(MTH.GT.0) GO TO 10
      CALL OUTSF
      RETURN
C-----CHECK OUTPUT MAT/MF/MT.
   10 CALL SAMOUT(DOIT)
      IF(DOIT.LE.0) GO TO 20
C-----OUTPUT
      CALL CARDO(C1,C2,L1,L2,N1,N2)
   20 RETURN
      END
      SUBROUTINE COPYSF
C=======================================================================
C
C     COPY A SECTION
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 DOIT
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
C-----COPY UNTIL SEND LINE IS FOUND.
   10 CALL LINEIN
C-----CHECK MAT/MF/MT.
      CALL SAMEIN
      IF(MTH.LE.0) GO TO 20
      CALL LINEOUT
      GO TO 10
C-----CHECK OUTPUT MAT/MF/MT.
   20 CALL SAMOUT(DOIT)
      IF(DOIT.LE.0) GO TO 30
C-----SEND LINE READ. OUTPUT SEND LINE. SET SEQUENCE NUMBER TO ZERO ON
C-----MEND AND TEND LINES.
      IF(MATH.LE.0) NOSEQ=0
      CALL OUTS(MATH,MFH)
   30 RETURN
      END
      SUBROUTINE OUTSF
C=======================================================================
C
C     OUTPUT ENDF TEND/MEND/FEND OR SEND LINE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 DOIT
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
C-----SET AT LEAST MT=0
      MTH=0
C-----CHECK OUTPUT MAT/MF/MT.
      CALL SAMOUT(DOIT)
      IF(DOIT.LE.0) GO TO 10
C-----SET SEQUENCE NUMBER EQUAL TO ZERO ON MEND AND TEND LINES.
      IF(MATH.LE.0) NOSEQ=0
      IF(MATH.LE.0) MFH=0
      CALL OUTS(MATH,MFH)
   10 RETURN
      END
      SUBROUTINE SAMEIN
C=======================================================================
C
C     WHILE READING INPUT CHECK FOR CHANGE IN MAT/MF/MT WITHOUT
C     INTERVENING MEND/FEND/SEND LINES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LAST1/MATLST,MFLST,MTLST,IZALST,AWRLST,MATIN,MFIN,MTIN,
     1 MATOUT,MFOUT,MTOUT
c-----------------------------------------------------------------------
C
C     EDIT CURRENT MAT/MF/MT.
C
c-----------------------------------------------------------------------
C-----AVOID -0 AND ANYTHING BUT -1 ON TEND LINES.
      IF(IABS(MATH).LE.0) MATH=0
      IF(IABS(MFH).LE.0) MFH=0
      IF(IABS(MTH).LE.0) MTH=0
      IF(MATH.LT.0) MATH=-1
c-----------------------------------------------------------------------
C
C     CHECK FOR SEND/FEND/MEND/TEND LINES.
C
c-----------------------------------------------------------------------
C-----WAS LAST LINE AT LEAST SEND.
      IF(MTIN.GT.0) GO TO 10
C-----WAS LAST LINE AT LEAST FEND.
      IF(MFIN.gt.0) go to 40
C-----WAS LAST LINE AT LEAST MEND.
      IF(MATIN.eq.0) go to 100
      IF(MATIN.gt.0) go to 70
C-----LAST LINE WAS A TEND LINE. NO LINES EXPECTED AFTER TEND.
      WRITE(OUTP,130) MATIN,MFIN,MTIN,MATH,MFH,MTH
      GO TO 120
c-----------------------------------------------------------------------
C
C     LAST LINE NOT MEND/FEND/SEND. NEXT LINE MUST BE,
C     (1) SEND LINE WITH SAME MAT/MF OR
C     (2) NEXT LINE OF SECTION WITH SAME MAT/MF/MT.
C
c-----------------------------------------------------------------------
C-----CHECK FOR CURRENT SEND LINE.
   10 IF(MTH.NE.0) GO TO 20
C-----CURRENT LINE IS A SEND. MUST HAVE SAME MAT/MF.
      IF(MATH.EQ.MATIN.AND.MFH.EQ.MFIN) GO TO 120
      GO TO 30
C-----CURRENT LINE NOT SEND. MUST HAVE SAME MAT/MF/MT.
   20 IF(MATH.EQ.MATIN.AND.MFH.EQ.MFIN.AND.MTH.EQ.MTIN) GO TO 120
   30 WRITE(OUTP,140) MATIN,MFIN,MTIN,MATH,MFH,MTH
      GO TO 120
c-----------------------------------------------------------------------
C
C     LAST LINE SEND, NOT MEND/FEND. NEXT LINE MUST BE,
C     (1) FEND LINE WITH SAME MAT OR
C     (2) FIRST LINE OF A SECTION WITH SAME MAT/MF AND POSITIVE MT.
C
c-----------------------------------------------------------------------
C-----CHECK FOR CURRENT FEND LINE.
   40 IF(MTH.NE.0.OR.MFH.NE.0) GO TO 50
C-----CURRENT LINE IS A FEND. MUST HAVE SAME MAT.
      IF(MATH.EQ.MATIN) GO TO 120
      GO TO 60
C-----CURRENT LINE NOT FEND. MUST HAVE SAME MAT/MF AND POSITIVE MT.
   50 IF(MATH.EQ.MATIN.AND.MFH.EQ.MFIN.AND.MTH.GT.0) GO TO 120
   60 WRITE(OUTP,150) MATIN,MFIN,MTIN,MATH,MFH,MTH
      GO TO 120
c-----------------------------------------------------------------------
C
C     LAST LINE FEND, NOT MEND. NEXT LINE MUST BE,
C     (1) MEND LINE OR
C     (2) FIRST LINE OF A FILE WITH SAME MAT AND POSITIVE MF/MT.
C
c-----------------------------------------------------------------------
C-----CHECK FOR CURRENT MEND LINE.
   70 IF(MTH.NE.0.OR.MFH.NE.0.OR.MATH.NE.0) GO TO 80
C-----CURRENT LINE IS A MEND. MUST NOT HAVE NEGATIVE MAT.
      IF(MATH.GE.0) GO TO 120
      GO TO 90
C-----CURRENT LINE NOT MEND. MUST HAVE SAME MAT AND POSITIVE MF/MT.
   80 IF(MATH.EQ.MATIN.AND.MFH.GT.0.AND.MTH.GT.0) GO TO 120
   90 WRITE(OUTP,160) MATIN,MFIN,MTIN,MATH,MFH,MTH
      GO TO 120
c-----------------------------------------------------------------------
C
C     LAST LINE MEND. NEXT LINE MUST BE,
C     (1) TEND LINE OR
C     (2) FIRST LINE OF A FILE WITH POSITIVE MAT/MF/MT.
C
c-----------------------------------------------------------------------
C-----CHECK FOR CURRENT TEND LINE.
  100 IF(MTH.NE.0.OR.MFH.NE.0.OR.MATH.GE.0) GO TO 110
C-----CURRENT LINE IS A TEND.
      GO TO 120
C-----CURRENT LINE NOT TEND. MUST HAVE POSITIVE MAT/MF/MT.
  110 IF(MATH.GT.0.AND.MFH.GT.0.AND.MTH.GT.0) GO TO 120
      WRITE(OUTP,170) MATIN,MFIN,MTIN,MATH,MFH,MTH
C-----SAVE CURRENT MAT/MF/MT.
  120 MATIN=MATH
      MFIN=MFH
      MTIN=MTH
      RETURN
  130 FORMAT(39X,' Input WARNING...After MAT/MF/MT=',I5,I3,I4/
     1       39X,'                 Found MAT/MF/MT=',I5,I3,I4/
     2 39X,' Do Not Expect Any Lines After TEND Line')
  140 FORMAT(39X,' Input WARNING...After MAT/MF/MT=',I5,I3,I4/
     1       39X,'                 Found MAT/MF/MT=',I5,I3,I4/
     2 39X,' Expected SEND or Line With Same MAT/MF/MT')
  150 FORMAT(39X,' Input WARNING...After MAT/MF/MT=',I5,I3,I4/
     1       39X,'                 FoudD MAT/MF/MT=',I5,I3,I4/
     2 39X,' Expected FEND or Line With Same MAT/MF AND POSITIVE MT')
  160 FORMAT(39X,' Input WARNING...After MAT/MF/MT=',I5,I3,I4/
     1       39X,'                 Found MAT/MF/MT=',I5,I3,I4/
     2 39X,' Expected MEND or Line With Same MAT and Positive MF/MT')
  170 FORMAT(39X,' Input WARNING...After MAT/MF/MT=',I5,I3,I4/
     1       39X,'                 Found MAT/MF/MT=',I5,I3,I4/
     2 39X,' Expected TEND or Line With Positive MAT/MF/MT')
      END
      SUBROUTINE SAMOUT(DOIT)
C=======================================================================
C
C     WHILE WRITING OUTPUT CHECK FOR CHANGE IN MAT/MF/MT WITHOUT
C     INTERVENING MEND/FEND/SEND LINES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE,DOIT
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LAST1/MATLST,MFLST,MTLST,IZALST,AWRLST,MATIN,MFIN,MTIN,
     1 MATOUT,MFOUT,MTOUT
C-----INITIALIZE FLAG TO OUTPUT NEXT RECORD.
      DOIT=1
c-----------------------------------------------------------------------
C
C     EDIT CURRENT MAT/MF/MT.
C
c-----------------------------------------------------------------------
C-----AVOID -0 AND ANYTHING BUT -1 ON TEND LINE.
      IF(IABS(MATH).LE.0) MATH=0
      IF(IABS(MFH).LE.0) MFH=0
      IF(IABS(MTH).LE.0) MTH=0
      IF(MATH.LT.0) MATH=-1
c-----------------------------------------------------------------------
C
C     CHECK FOR SEND/FEND/MEND/TEND LINES.
C
c-----------------------------------------------------------------------
C-----WAS LAST LINE AT LEAST SEND.
      IF(MTOUT.GT.0) GO TO 10
C-----WAS LAST LINE AT LEAST FEND.
      IF(MFOUT.gt.0) go to 40
C-----WAS LAST LINE AT LEAST MEND.
      IF(MATOUT.eq.0) go to 100
      IF(MATOUT.gt.0) go to 70
C-----LAST LINE WAS A TEND LINE. NO LINES EXPECTED AFTER TEND.
      WRITE(OUTP,200) MATOUT,MFOUT,MTOUT,MATH,MFH,MTH
      GO TO 190
c-----------------------------------------------------------------------
C
C     LAST LINE NOT MEND/FEND/SEND. NEXT LINE MUST BE,
C     (1) SEND LINE WITH SAME MAT/MF OR
C     (2) NEXT LINE OF SECTION WITH SAME MAT/MF/MT.
C
c-----------------------------------------------------------------------
C-----CHECK FOR CURRENT SEND LINE.
   10 IF(MTH.NE.0) GO TO 20
C-----CURRENT LINE IS A SEND. MUST HAVE SAME MAT/MF.
      IF(MATH.EQ.MATOUT.AND.MFH.EQ.MFOUT) GO TO 190
      GO TO 30
C-----CURRENT LINE NOT SEND. MUST HAVE SAME MAT/MF/MT.
   20 IF(MATH.EQ.MATOUT.AND.MFH.EQ.MFOUT.AND.MTH.EQ.MTOUT) GO TO 190
   30 WRITE(OUTP,210) MATOUT,MFOUT,MTOUT,MATH,MFH,MTH
      GO TO 120
c-----------------------------------------------------------------------
C
C     LAST LINE SEND, NOT MEND/FEND. NEXT LINE MUST BE,
C     (1) FEND LINE WITH SAME MAT OR
C     (2) FIRST LINE OF A SECTION WITH SAME MAT/MF AND POSITIVE MT.
C
c-----------------------------------------------------------------------
C-----CHECK FOR CURRENT FEND LINE.
   40 IF(MTH.NE.0.OR.MFH.NE.0) GO TO 50
C-----CURRENT LINE IS A FEND. MUST HAVE SAME MAT.
      IF(MATH.EQ.MATOUT) GO TO 190
      GO TO 60
C-----CURRENT LINE NOT FEND. MUST HAVE SAME MAT/MF AND POSITIVE MT.
   50 IF(MATH.EQ.MATOUT.AND.MFH.EQ.MFOUT.AND.MTH.GT.0) GO TO 190
   60 WRITE(OUTP,220) MATOUT,MFOUT,MTOUT,MATH,MFH,MTH
      GO TO 120
c-----------------------------------------------------------------------
C
C     LAST LINE FEND, NOT MEND. NEXT LINE MUST BE,
C     (1) MEND LINE OR
C     (2) FIRST LINE OF A FILE WITH SAME MAT AND POSITIVE MF/MT.
C
c-----------------------------------------------------------------------
C-----CHECK FOR CURRENT MEND LINE.
   70 IF(MTH.NE.0.OR.MFH.NE.0.OR.MATH.NE.0) GO TO 80
C-----CURRENT LINE IS A MEND. MUST NOT HAVE NEGATIVE MAT.
      IF(MATH.GE.0) GO TO 190
      GO TO 90
C-----CURRENT LINE NOT MEND. MUST HAVE SAME MAT AND POSITIVE MF/MT.
   80 IF(MATH.EQ.MATOUT.AND.MFH.GT.0.AND.MTH.GT.0) GO TO 190
   90 WRITE(OUTP,230) MATOUT,MFOUT,MTOUT,MATH,MFH,MTH
      GO TO 120
c-----------------------------------------------------------------------
C
C     LAST LINE MEND. NEXT LINE MUST BE,
C     (1) TEND LINE OR
C     (2) FIRST LINE OF A FILE WITH POSITIVE MAT/MF/MT.
C
c-----------------------------------------------------------------------
C-----CHECK FOR CURRENT TEND LINE.
  100 IF(MTH.NE.0.OR.MFH.NE.0.OR.MATH.GE.0) GO TO 110
C-----CURRENT LINE IS A TEND.
      GO TO 190
C-----CURRENT LINE NOT TEND. MUST HAVE POSITIVE MAT/MF/MT.
  110 IF(MATH.GT.0.AND.MFH.GT.0.AND.MTH.GT.0) GO TO 190
      WRITE(OUTP,240) MATOUT,MFOUT,MTOUT,MATH,MFH,MTH
c-----------------------------------------------------------------------
C
C     LINE SEQUENCE ERROR. OUTPUT MISSING SEND/FEND/MEND LINES.
C
c-----------------------------------------------------------------------
C-----IF LAST LINE OUTPUT WAS A MEND LINE THERE OR NO REASON FOR ANY
C-----MORE OUTPUT.
  120 IF(MATOUT.GT.0) GO TO 130
C-----CHECK FOR DUPLICATE MEND LINE.
      IF(MATH.EQ.0) GO TO 180
C-----LAST LINE WAS NOT A MEND LINE. CURRENT LINE MUST HAVE SAME MAT.
  130 IF(MATH.EQ.MATOUT) GO TO 140
C-----MAT CHANGED. OUTPUT SEND/FEND/MEND
      IF(MTOUT.GT.0) THEN
      WRITE(OUTP,250) MATOUT,MFOUT,MTOUT
      CALL OUTS(MATOUT,MFOUT)
      ENDIF
      IF(MFOUT.GT.0) THEN
      WRITE(OUTP,260) MATOUT,MFOUT
      CALL OUTS(MATOUT,    0)
      ENDIF
      IF(MATOUT.GT.0) THEN
      WRITE(OUTP,270) MATOUT
      CALL OUTS(     0,    0)
      ENDIF
      GO TO 190
C-----IF LAST LINE OUTPUT WAS A FEND LINE THERE OR NO REASON FOR ANY
C-----MORE OUTPUT.
  140 IF(MFOUT.GT.0) GO TO 150
C-----CHECK FOR DUPLICATE FEND LINE.
      IF(MFH.EQ.0) GO TO 180
C-----LAST LINE WAS NOT A FEND LINE. CURRENT LINE MUST HAVE SAME MF.
  150 IF(MFH.EQ.MFOUT) GO TO 160
C-----MF CHANGED. OUTPUT SEND/FEND
      IF(MTOUT.GT.0) THEN
      WRITE(OUTP,250) MATOUT,MFOUT,MTOUT
      CALL OUTS(MATOUT,MFOUT)
      ENDIF
      IF(MFOUT.GT.0) THEN
      WRITE(OUTP,260) MATOUT,MFOUT
      CALL OUTS(MATOUT,    0)
      ENDIF
      GO TO 190
C-----IF LAST LINE OUTPUT WAS A SEND LINE THERE OR NO REASON FOR ANY
C-----MORE OUTPUT.
  160 IF(MTOUT.GT.0) GO TO 170
C-----CHECK FOR DUPLICATE SEND LINE.
      IF(MTH.EQ.0) GO TO 180
C-----LAST LINE WAS NOT A SEND LINE. CURRENT LINE MUST HAVE SAME MT.
  170 IF(MTH.EQ.MTOUT) GO TO 190
C-----MT CHANGED. OUTPUT SEND
      IF(MTOUT.GT.0) THEN
      WRITE(OUTP,250) MATOUT,MFOUT,MTOUT
      CALL OUTS(MATOUT,MFOUT)
      ENDIF
      GO TO 190
C-----PREVENT DUPLICATE LINE OUTPUT.
  180 DOIT=0
      WRITE(OUTP,280)
C-----SAVE CURRENT MAT/MF/MT.
  190 MATOUT=MATH
      MFOUT=MFH
      MTOUT=MTH
      RETURN
  200 FORMAT(39X,' Output WARNING...After MAT/MF/MT=',I5,I3,I4/
     1       39X,'                  Found MAT/MF/MT=',I5,I3,I4/
     2 39X,' Do Not Expect Any Lines After TEND LINE')
  210 FORMAT(39X,' Output WARNING...After MAT/MF/MT=',I5,I3,I4/
     1       39X,'                  Found MAT/MF/MT=',I5,I3,I4/
     2 39X,' Expected SEND or Line With Same MAT/MF/MT')
  220 FORMAT(39X,' Output WARNING...After MAT/MF/MT=',I5,I3,I4/
     1       39X,'                  Found MAT/MF/MT=',I5,I3,I4/
     2 39X,' Expected FEND or Line With Same MAT/MF and Positive MT')
  230 FORMAT(39X,' Output WARNING...After MAT/MF/MT=',I5,I3,I4/
     1       39X,'                  Found MAT/MF/MT=',I5,I3,I4/
     2 39X,' Expected MEND or Line With Same MAT and Positive MF/MT')
  240 FORMAT(39X,' Output WARNING...After MAT/MF/MT=',I5,I3,I4/
     1       39X,'                  Found MAT/MF/MT=',I5,I3,I4/
     2 39X,' Expected TEND or Line With Positive MAT/MF/MT')
  250 FORMAT(39X,' Output SEND Line for MAT/MF/MT=',I5,I3,I4)
  260 FORMAT(39X,' Output FEND Line for MAT/MF   =',I5,I3,I4)
  270 FORMAT(39X,' Output MEND Line for MAT      =',I5,I3,I4)
  280 FORMAT(39X,' Duplicate End Line Skipped')
      END
      SUBROUTINE XBLOCK
C=======================================================================
C
C     DEFINE BUILT-IN SUMMATION/DELETION/THRESHOLD EXCLUSION TABLES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/MAKERN/MAKE ,MTMAKE(20),MTRANG(20), MTADD(3,15,20)
      COMMON/MAKERP/MAKEP,MTMAKP(10),MTRANP(10),MTADDP(3,15,10)
      COMMON/SAVE5/MTRAN5(20),MTADD5(2,15,20)
      COMMON/SAVE6/MTRAN6(20),MTADD6(2,15,20)
      COMMON/DELETE/IDEL,MTDEL(2,20)
      DIMENSION MTMAKX(20),MTADD5X(2,15,20),MTADD6X(2,15,20),
     1 MTDELX(2,20),MTMAPX(10),MTADPX(2,15,10)
C-----------------------------------------------------------------------
C
C     DEFINE TABLE OF RANGES OF MT NUMBERS WHOSE THRESHOLD SHOULD NOT
C     BE CHANGED.
C
c     2020/2/2 - Threshold Correction no longer allowed
C
C     AT PRESENT THE REACTIONS EXCLUDED FROM THRESHOLD CORRECTION ARE,
C     (1) THE TOTAL CROSS SECTION (MT=1)
C     (2) THE TOTAL INELASTIC (MT=4)
C     (3) THE TOTAL AND FIRST CHANCE FISSION (MT=18,19)
C     (4) THE INELASTIC CONTINUUM (MT=91)
C     (5) CHARGED PARTICLE PRODUCING REACTIONS (MT=103,116)
C
C-----------------------------------------------------------------------
C
C     DEFINE MT NUMBERS TO BE DELETED
C
C     IDEL   = NUMBER OF MTS TO BE DELETED
C     MTDEL  = TABLE OF MT NUMBERS TO BE DELETED
C
C     ANY PRESENT NO REACTIONS ARE DELETED.
C
c-----------------------------------------------------------------------
      DATA MTDELX/
c-----2021/3/25 - Added MT=3 = Nonelastic
c-----MYDELX = 2 X 20
     1 3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     2 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
C-----------------------------------------------------------------------
C
C     DEFINE MT NUMBERS TO BE RECONSTRUCTED
C
C     MAKE  = NUMBER OF MTS TO BE RECONSTRUCTED
C     MTMAKE= TABLE OF MT NUMBERS TO RECONSTRUCT
C     MTRANG= TABLE OF THE NUMBER OF MT RANGES THAT CONTRIBUTE TO EACH
C             RECONSTRUCTION.
C     MTADD = TABLE OF MT RANGES (UP TO 10 PER RECONSTRUCTED MT) THAT
C             CONTRIBUTE TO THE RECONSTRUCTED MT.
C
C     AT PRESENT THE REACTIONS TO BE RECONSTRUCTED AND THE ORDER IN
C     WHICH THEY ARE RECONSTRUCTED ARE,
C
C     ENDF-5 AND EARLIER VERSIONS OF ENDF
C     -----------------------------------
C         (MT=  4) = THE SUM OF MT= 51 THROUGH  91
C         (MT=103) = THE SUM OF MT=700 THROUGH 718 (NOT 719)
C         (MT=104) = THE SUM OF MT=720 THROUGH 738 (NOT 739)
C         (MT=105) = THE SUM OF MT=740 THROUGH 758 (NOT 759)
C         (MT=106) = THE SUM OF MT=760 THROUGH 778 (NOT 779)
C         (MT=107) = THE SUM OF MT=780 THROUGH 798 (NOT 799)
C         (MT=101) = THE SUM OF MT=102 THROUGH 114
C         (MT= 18) = (MT=19)+(MT=20 AND 21) AND (MT=38)
C                    (THIS IS DONE ONLY IF MT=18 IS NOT PRESENT IN
C                     THE EVALUATION AS READ IN).
C         (MT= 27) = THE SUM OF MT= 18 AND 101
C                    (MT=101 RECONSTRUCTED ABOVE USED IN SUM).
C         (MT=  3) = THE SUM OF (MT=4)+(MT=6-9)+(MT=16-17)+(MT=22-37)+
C                    (MT=41-45)
C                    (MT=4 AND 27 RECONSTRUCTED ABOVE USED IN SUM).
C         (MT= 19) = (MT=18) - (MT=20 AND 21) - (MT=38)
C                    (THIS IS DONE ONLY IF MT=18 IS PRESENT IN
C                     THE EVALUATION AS READ IN).
C                    (DEFINE FIRST CHANCE FISSION BY SUBTRACTION TO
C                    ALLOW RESONANCE CONTRIBUTION FROM MT=18 TO BE
C                    INCLUDED IN MT=19).
C         (MT=  1) = THE SUM OF MT=2 AND 3
C                    (MT=3 RECONSTRUCTED ABOVE USED IN SUM).
C
C     ENDF-6
C     ---------------------------------------
C      UPDATES FOR ENDF/B-VI, MOD.3
C     3/19/96 - ADDED NEW MT = 11,44,45,117
C     ---------------------------------------
C         (MT=  4) = THE SUM OF MT= 51 THROUGH  91
C         (MT=103) = THE SUM OF MT=600 THROUGH 649
C         (MT=104) = THE SUM OF MT=650 THROUGH 699
C         (MT=105) = THE SUM OF MT=700 THROUGH 749
C         (MT=106) = THE SUM OF MT=750 THROUGH 799
C         (MT=107) = THE SUM OF MT=800 THROUGH 849
C NEW     (MT= 16) = THE SUM OF MT=875 THROUGH 891
C         (MT=101) = THE SUM OF MT=102 THROUGH 117
C         (MT= 18) = (MT=19)+(MT=20 AND 21) AND (MT=38)
C                    (THIS IS DONE ONLY IF MT=18 IS NOT PRESENT IN
C                     THE EVALUATION AS READ IN).
C         (MT= 27) = THE SUM OF MT= 18 AND 101
C                    (MT=101 RECONSTRUCTED ABOVE USED IN SUM).
C         (MT=  3) = THE SUM OF (MT=4-5)+(MT=11-17)+(MT=22-37)+
C                    (MT=41-45)
C                    (MT=4 AND 27 RECONSTRUCTED ABOVE USED IN SUM)
C                     NOTE, MT=27 ALREADY INCLUDES MT=18 AND MT=102
C                     THROUGH 117, SO THEY NEED NOT BE INCLUDED HERE.
C         (MT= 19) = (MT=18) - (MT=20 AND 21) - (MT=38)
C                    (THIS IS DONE ONLY IF MT=18 IS PRESENT IN
C                     THE EVALUATION AS READ IN).
C                    (DEFINE FIRST CHANCE FISSION BY SUBTRACTION TO
C                    ALLOW RESONANCE CONTRIBUTION FROM MT=18 TO BE
C                    INCLUDED IN MT=19).
C         (MT=  1) = THE SUM OF MT=2 AND 3
C                    (MT=3 RECONSTRUCTED ABOVE USED IN SUM).
C
C     NOTE, THE NUMBER OF REACTIONS AND THE REACTIONS TO BE DEFINED
C     BY SUMMATION ARE THE SAME IN ALL VERSIONS OF ENDF. ONLY THE
C     ACTUAL SUMMATIONS RULES DIFFER.
C
C     ENDF-6 PHOTONS
C     ---------------------------------------
C         (MT=516) = THE SUM OF MT= 515 AND 517
C         (MT=522) = THE SUM OF MT= 534 THROUGH  572
C         (MT=501) = THE SUM OF MT= 502, 504, 516 AND 522
C
C-----------------------------------------------------------------------
C-----2007/5/6 - ADDED MT=16 TO SUMS = 875 THROUGH 891
      DATA MTMAKX/
     1 4,103,104,105,106,107, 16, 27, 19, 3, 1, 0,0,0,0,0,0,0,0,0/
C      1   2   3   4   5   6   7   8   9  A  1  2 3 4 5 6 7 8 9 10
C-----------------------------------------------------------------------
C
C     ENDF-5 AND EARLIER VERSIONS OF ENDF
C
c-----------------------------------------------------------------------
      DATA MTADD5X/
c            1       2       3       4       5   6   7   8   9  10
c                                               11  12  13  14  15
     1  51, 91,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     1                                         0,0,0,0,0,0,0,0,0,0,
     2 700,718,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     2                                         0,0,0,0,0,0,0,0,0,0,
     3 720,738,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     3                                         0,0,0,0,0,0,0,0,0,0,
     4 740,758,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     4                                         0,0,0,0,0,0,0,0,0,0,
     5 760,778,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     5                                         0,0,0,0,0,0,0,0,0,0,
     6 780,798,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     6                                         0,0,0,0,0,0,0,0,0,0,
     7 875,891,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     7                                         0,0,0,0,0,0,0,0,0,0,
     8  18, 18,101,101,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     8                                         0,0,0,0,0,0,0,0,0,0,
     9  18, 18,-20,-21,-38,-38,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     9                                         0,0,0,0,0,0,0,0,0,0,
     A   4,  5,  6,  9, 16, 17, 22, 37,  0,  0,0,0,0,0,0,0,0,0,0,0,
     A                                         0,0,0,0,0,0,0,0,0,0,
     1   2,  3,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     1                                         0,0,0,0,0,0,0,0,0,0,
     2   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     2                                         0,0,0,0,0,0,0,0,0,0,
     3   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     3                                         0,0,0,0,0,0,0,0,0,0,
     4   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     4                                         0,0,0,0,0,0,0,0,0,0,
     5   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     5                                         0,0,0,0,0,0,0,0,0,0,
     6   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     6                                         0,0,0,0,0,0,0,0,0,0,
     7   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     7                                         0,0,0,0,0,0,0,0,0,0,
     8   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     8                                         0,0,0,0,0,0,0,0,0,0,
     9   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     9                                         0,0,0,0,0,0,0,0,0,0,
     A   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     A                                         0,0,0,0,0,0,0,0,0,0/
C-----------------------------------------------------------------------
C
C     ENDF-6
C
c-----------------------------------------------------------------------
c-----Note - corrected dedfinition of MF=3, not to include MT=18,
c            since it is already included in MT=27.
c-----MTADD6X = 2 X 15 X 20
      DATA MTADD6X/
c            1       2       3       4       5   6   7   8   9  10
c                                               11  12  13  14  15
     1  50, 91,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     1                                         0,0,0,0,0,0,0,0,0,0,
     2 600,649,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     2                                         0,0,0,0,0,0,0,0,0,0,
     3 650,699,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     3                                         0,0,0,0,0,0,0,0,0,0,
     4 700,749,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     4                                         0,0,0,0,0,0,0,0,0,0,
     5 750,799,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     5                                         0,0,0,0,0,0,0,0,0,0,
     6 800,849,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     6                                         0,0,0,0,0,0,0,0,0,0,
     7 875,891,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     7                                         0,0,0,0,0,0,0,0,0,0,
c-----(n, disppearance) = no n out
c            1       2       3       4       5       6
     8 102,109,111,117,155,155,182,182,191,193,197,197,
c      *** ***                   7   8   9  10  11  12  13  14  15
     8                         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     9  18, 18,-20,-21,-38,-38,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
c      *** ***
     9                                         0,0,0,0,0,0,0,0,0,0,
c            1       2       3       4       5       6       7
     A   4,  5, 11, 11, 16, 18, 22, 25, 27, 30, 32, 37, 41, 42,
c                          ***
c    A       8       9      10      11      12      13  14  15
     A  44, 45,152,154,156,181,183,190,194,196,198,200,0,0,0,0,
c    A  44, 45,103,107,152,154,156,181,183,190,194,196,198,200,0,0,
c              *** ***
     1   2,  3,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     1                                         0,0,0,0,0,0,0,0,0,0,
     2   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     2                                         0,0,0,0,0,0,0,0,0,0,
     3   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     3                                         0,0,0,0,0,0,0,0,0,0,
     4   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     4                                         0,0,0,0,0,0,0,0,0,0,
     5   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     5                                         0,0,0,0,0,0,0,0,0,0,
     6   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     6                                         0,0,0,0,0,0,0,0,0,0,
     7   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     7                                         0,0,0,0,0,0,0,0,0,0,
     8   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     8                                         0,0,0,0,0,0,0,0,0,0,
     9   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     9                                         0,0,0,0,0,0,0,0,0,0,
     A   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     A                                         0,0,0,0,0,0,0,0,0,0/
C-----------------------------------------------------------------------
C
C     ENDF-6 PHOTONS and ELECTRONS
C
c-----------------------------------------------------------------------
C
c     2017/12/5 - Updated for ELECTRON = added MT=526, 528 to TOTAL
C     MT = 501 = Total
c        = 522 = Total Ionization
c     Create these SUM MTs
C
c-----------------------------------------------------------------------
      DATA MTMAPX/516,  522,    501,7*0/
c                 tot   tot     tot
c                 pair  ion
c-----Use these MTs to define above SUMS
c     MTAPPX = 2 X 15 X 10
      DATA MTADPX/
c            1       2       3       4       5   6   7   8   9  10
     1 515,515,517,517,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
c                                               11  12  13  14  15
     1                                         0,0,0,0,0,0,0,0,0,0,
     2 534,572,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     2                                         0,0,0,0,0,0,0,0,0,0,
     3 502,502,504,504,516,516,522,522,526,528,0,0,0,0,0,0,0,0,0,0,
     3                                         0,0,0,0,0,0,0,0,0,0,
     4   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     4                                         0,0,0,0,0,0,0,0,0,0,
     5   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     5                                         0,0,0,0,0,0,0,0,0,0,
     6   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     6                                         0,0,0,0,0,0,0,0,0,0,
     7   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     7                                         0,0,0,0,0,0,0,0,0,0,
     8   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     8                                         0,0,0,0,0,0,0,0,0,0,
     9   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     9                                         0,0,0,0,0,0,0,0,0,0,
     A   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,0,0,0,0,0,
     A                                         0,0,0,0,0,0,0,0,0,0/
c      coh     incoh   tot     ion     scat,brem,excit
c                      pair    tot
c     ---- PHOTON---------- --BOTH---- ---ELECTRONS-----
C-----------------------------------------------------------------------
C
C     LOAD DATA INTO LABELLED COMMON
C
C-----------------------------------------------------------------------
C-----------------------------------------------------------------------
C
C     MT NUMBERS TO DELETE.
C
C-----02/26/03 - COUNT MT NUMBERS TO BE DELETED
C-----------------------------------------------------------------------
      DO 10 IDEL=20,1,-1
      IF(MTDELX(2,IDEL).GT.0) GO TO 20
   10 CONTINUE
      IDEL = 0
   20 IF(IDEL.LE.0) GO TO 40
      DO 30 I=1,IDEL
      MTDEL(1,I)=MTDELX(1,I)
      MTDEL(2,I)=MTDELX(2,I)
   30 CONTINUE
C-----------------------------------------------------------------------
C
C     MT NUMBERS TO DEFINE BY SUMMATION.
C
C-----02/26/03 - COUNT MT NUMBERS TO BE DEFINED BY SUMMATION
C-----------------------------------------------------------------------
   40 DO 50 MAKE=20,1,-1
      IF(MTMAKX(MAKE).GT.0) GO TO 60
   50 CONTINUE
      MAKE = 0
   60 IF(MAKE.LE.0) GO TO 160
C-----------------------------------------------------------------------
C
C     INTIALIZE RECONSTRUCTION RULES TO ENDF-6 CONVENTIONS.
C     SAVE BOTH ENDF-5 AND 6 CONVENTIONS FOR LATER USE.
C     NOTE, IN BOTH CASES THE NUMBER OF MT'S AND THE ACTUAL MT
C     NUMBERS ARE THE SAME (MAKEZ,MTMAKE). ONLY THE SUMMATION
C     RULES ARE DIFFERENT (MTRANG,MTADD).
C
C-----------------------------------------------------------------------
C
C     ENDF-5
C
C-----------------------------------------------------------------------
C-----02/26/03 - COUNT NUMBER OF MT RANGES USED FOR SUMMATION
      DO 90 I=1,MAKE
      DO 70 K=15,1,-1
      IF(MTADD5X(2,K,I).NE.0) GO TO 80
   70 CONTINUE
      K = 0
   80 MTRAN5(I) = K
   90 CONTINUE
C-----------------------------------------------------------------------
C
C     ENDF-6
C
C-----------------------------------------------------------------------
C-----02/26/03 - COUNT NUMBER OF MT RANGES USED FOR SUMMATION
      DO 120 I=1,MAKE
      DO 100 K=15,1,-1
      IF(MTADD6X(2,K,I).NE.0) GO TO 110
  100 CONTINUE
      K = 0
  110 MTRAN6(I) = K
  120 CONTINUE
C-----------------------------------------------------------------------
C
C     LOAD RULES FOR NEUTRONS
C
C-----------------------------------------------------------------------
      DO 150 I=1,MAKE
      MTMAKE(I)=MTMAKX(I)
      MTRANG(I)=MTRAN6(I)
      DO 140 K=1,15
      DO 130 J=1,2
      MTADD (J,K,I)=MTADD6X(J,K,I)
      MTADD5(J,K,I)=MTADD5X(J,K,I)
      MTADD6(J,K,I)=MTADD6X(J,K,I)
  130 CONTINUE
      MTADD (3,K,I)=0
  140 CONTINUE
  150 CONTINUE
C-----------------------------------------------------------------------
C
C     ENDF-6 PHOTONS
C
C-----02/26/03 - COUNT MT NUMBERS OF BE DEFINED BY SUMMATION
C-----------------------------------------------------------------------
  160 DO 170 MAKEP=10,1,-1
      IF(MTMAPX(MAKEP).GT.0) GO TO 180
  170 CONTINUE
      MAKEP = 0
  180 IF(MAKEP.LE.0) RETURN
      DO 230 I=1,MAKEP
      MTMAKP(I)=MTMAPX(I)
C-----02/26/03 - COUNT NUMBER OF MT RANGES USED FOR SUMMATION
      DO 190 K=15,1,-1
      IF(MTADPX(2,K,I).NE.0) GO TO 200
  190 CONTINUE
      K = 0
  200 MTRANP(I) = K
      DO 220 J=1,2
      DO 210 L=1,10
      MTADDP(J,L,I)=MTADPX(J,L,I)
  210 CONTINUE
  220 CONTINUE
  230 CONTINUE
      RETURN
      END
      SUBROUTINE SCANER(LINEIN,MTI,ITYPE,MTREAD,KRANGE)
C=======================================================================
C
C     SCAN A LINE OF CHARACTERS FOR STRINGS OF DIGITS.
C
C     COLUMNS 1-5 MAY CONTAIN A CHARACTER (S,D,R,BLANK) FOLLOWED
C     BY AN MT NUMBER - OR IT MAY CONTAIN A CHARACTER (D) FOLLOWED
C     BY BLANKS.
C      ITYPE = 0 - S OR BLANK = SUM (OR DIFFERENCES)
C            = 1 - D = DELETE
c***** 2020/2/2 - NO LONGER ALLOWED
C            = 2 - T = NO THRESHOLD ENERGY CORRECTIONS
c***** 2020/2/2 - NO LONGER ALLOWED
C            = 3 - R = RATIO
C            = 4 - * = PRODUCT
C
C     COLUMNS 6-72 MAY CONTAIN PAIRS OF MT NUMBERS - OR BE COMPLETELY
C     BLANK = IN THE CASE OF MT NUMBERS TO BE DELETED - THE FIRST MT
C     NUMBER OF EACH MT PAIR MAY BE PRECEEDED BY A - (MINUS SIGN)
C
C     ALL OTHER CHARACTERS ARE SKIPPED (IGNORED)
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 DIGITS,LINEIN,MINUS,TYPEIT
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      DIMENSION LINEIN(72),DIGITS(10),TYPEIT(5),MTREAD(2,10)
      DATA DIGITS/'0','1','2','3','4','5','6','7','8','9'/
      DATA TYPEIT/'S','D','T','R','*'/
      DATA MINUS/'-'/
c-----------------------------------------------------------------------
C
C     SCAN COLUMNS 1-5 FOR TYPE FOLLOWED BY MT NUMBER.
C
c-----------------------------------------------------------------------
C-----INITIALIZE TYPE TO SUMMATION
      ITYPE=0
      MTI=0
      DO 70 N=1,5
C-----ALLOW TYPE CHARACTER BEFORE ANY DIGITS.
      IF(MTI.NE.0) GO TO 40
      DO 10 IT=1,5
      IF(LINEIN(N).EQ.TYPEIT(IT)) GO TO 20
   10 CONTINUE
      GO TO 40
C-----TYPE CHARACTER FOUND.
   20 ITYPE=IT-1
c-----------------------------------------------------------------------
c
c     2020/2/2 - Threshold Correction no longer allowed.
c
c-----------------------------------------------------------------------
      if(ITYPE.eq.2) then
      WRITE(OUTP,30)
      WRITE(*   ,30)
   30 format(1x,78('=')/
     1 ' ERROR - Threshold Correction is no longer allowed.'/
     2 '         Correct Input Parameters and re-run.'/1x,78('='))
      CALL ENDERROR
      endif
      GO TO 70
C-----SCAN FOR DIGITS.
   40 DO 50 I=1,10
      IF(LINEIN(N).EQ.DIGITS(I)) GO TO 60
   50 CONTINUE
C-----NOT A DIGIT - IGNORE
      GO TO 70
C-----DIGIT FOUND
   60 MTI=10*MTI+(I-1)
   70 CONTINUE
c-----------------------------------------------------------------------
C
C     SCAN COLUMNS 6-72 FOR PAIRS OF MT NUMBERS - THE FIRST OF EACH
C     PAIR MAY BE PRECEEDED BY A - (MINUS SIGN).
C
c-----------------------------------------------------------------------
C-----INITIALIZE DIGIT COUNT AND ACTUAL NUMBER.
      KRANGE=0
      KFIELD=3
C-----INITIALIZE DIGIT COUNT, ACTUAL NUMBER AND SIGN.
      IDIGIT=0
      MDIG=0
      ISIGN=1
C-----LOOP OVER COLUMNS
      DO 120 N=6,72
C-----SCAN FOR DIGITS
      DO 80 I=1,10
      IF(LINEIN(N).EQ.DIGITS(I)) GO TO 110
   80 CONTINUE
C-----NOT A DIGIT. IF ANY PRECEDING DIGITS SAVE THEM AS A NUMBER.
      IF(IDIGIT.LE.0) GO TO 100
      KFIELD=KFIELD+1
      IF(KFIELD.LT.3) GO TO 90
C-----ONLY TRANSLATE UP TO 10 PAIRS OF MT NUMBERS.
      IF(KRANGE.GE.10) GO TO 150
      KRANGE=KRANGE+1
      KFIELD=1
   90 MTREAD(KFIELD,KRANGE)=ISIGN*MDIG
C-----INITIALIZE FOR NEXT NUMBER.
      IDIGIT=0
      MDIG=0
      ISIGN=1
C-----IS THIS A - (MINUS SIGN)
  100 IF(LINEIN(N).NE.MINUS) GO TO 120
      ISIGN=-1
      GO TO 120
C-----DIGIT FOUND.
  110 IDIGIT=IDIGIT+1
      MDIG=10*MDIG+(I-1)
  120 CONTINUE
C-----END OF LINE. DEFINE LAST FIELD IF ANY DIGITS AT END OF LINE.
      IF(IDIGIT.LE.0) GO TO 140
      KFIELD=KFIELD+1
      IF(KFIELD.LT.3) GO TO 130
C-----ONLY TRANSLATE UP TO 10 PAIRS OF MT NUMBERS.
      IF(KRANGE.GE.10) GO TO 150
      KRANGE=KRANGE+1
      KFIELD=1
  130 MTREAD(KFIELD,KRANGE)=ISIGN*MDIG
C-----DEFINE LAST ZERO IF AN ODD NUMBER OF FIELDS HAVE BBEN READ.
  140 IF(KFIELD.EQ.1) MTREAD(2,KRANGE)=0
  150 RETURN
      END
      SUBROUTINE FILIO1
C=======================================================================
C
C     DEFINE ALL I/O UNITS AND OPTIONALLY DEFINE FILENAMES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*72 NAMEIN,NAMEOUT
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/IOSTATUS/ISTAT1,ISTAT2
      COMMON/UNITS/ISCRA,ISCRB,ISCRC,ISCRD,ISCRE
      COMMON/NAMEX/NAMEIN,NAMEOUT
C-----DEFINE I/O UNITS.
      INP=2
      OUTP=3
      ITAPE=10
      OTAPE=11
      ISCRA=12
      ISCRB=14
      ISCRC=15
      ISCRD=16
      ISCRE=17
C-----DEFINE ALL FILE NAMES.
      OPEN(OUTP,FILE='FIXUP.LST',STATUS='UNKNOWN')
      CALL SCRATCH1(ISCRA,'FIXUP.001   ')
      CALL SCRATCH1(ISCRB,'FIXUP.002   ')
      CALL SCRATCH1(ISCRC,'FIXUP.003   ')
      CALL SCRATCH1(ISCRD,'FIXUP.004   ')
      CALL SCRATCH1(ISCRE,'FIXUP.005   ')
      OPEN(INP,FILE='FIXUP.INP',STATUS='OLD',ERR=10)
      ISTAT1 = 0
      RETURN
   10 ISTAT1 = 1
      RETURN
      ENTRY FILIO2
C=======================================================================
C
C     DEFINE ENDF DATA FILE NAMES.
C
C=======================================================================
      OPEN(OTAPE,FILE=NAMEOUT,STATUS='UNKNOWN')
      OPEN(ITAPE,FILE=NAMEIN,STATUS='OLD',ERR=20)
      ISTAT2 = 0
      RETURN
   20 ISTAT2 = 1
      RETURN
      END
      SUBROUTINE MTREADIN
C=======================================================================
C
C     READ TABLE OF MT DEFINITIONS.
C
c     Only use ENDF-8 - ENDF/B-VIII - Definitions
C     MTTABB(I,..), I = 1 = 1 = MT used/0 = No used
C                     = 2 = # of times Used as SUM result
C                     = 3 = # of times used IN SUM
C                     = 4 = Exempt
C                     = 5
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*40 MTTABA,MTTABIN
c-----01/18/11 - increased dimension from 200 to 1,000
      COMMON/MTDAT1/MTTABA(1000)
      COMMON/MTDAT2/MTTABB(5,1000)
C-----Initialize
      do i=1,1000
      MTTABA(i) = '   '
      do j=1,5
      MTTABB(j,i) = 0
      enddo
      enddo
c-----------------------------------------------------------------------
c
c     Define EXEMPT MT = not not be included in SUMs
c
c-----------------------------------------------------------------------
      MTTABB(4,  1) = 1   ! Total                   never used in sum
      MTTABB(4, 10) = 1   ! Total Continuum
      MTTABB(4, 18) = 1   ! Fission  (difference & final sum)
      MTTABB(4, 19) = 1   ! First Chance Fission (defined, not usd)
      MTTABB(4,101) = 1   ! Neutron Disapearance
      MTTABB(4,151) = 1   ! Resonance Parameters
      do j=201,218        ! Particle Production
      MTTABB(4,j)   = 1
      enddo
      MTTABB(4,222) = 1   ! Thermal Scatter
      do j=251,255        ! Parameters, e.g., <mu>
      MTTABB(4,j)   = 1
      enddo
      do j=301,452        ! Kerma & DPA &....
      MTTABB(4,j)   = 1
      enddo
      do j=454,460        ! <nu>....
      MTTABB(4,j)   = 1
      enddo
      MTTABB(4,500) = 1   ! C.P. Stopping Power
      MTTABB(4,501) = 1   ! Total ?????????
      MTTABB(4,505) = 1   ! I Anomylous
      MTTABB(4,506) = 1   ! R Anomylous
      MTTABB(4,523) = 1   ! Excitation              Electron - Add
      MTTABB(4,525) = 1   ! Large Angle
      MTTABB(4,533) = 1   ! Relaxation
      do j=851,870        ! Covariance
      MTTABB(4,j)   = 1
      enddo
C-----------------------------------------------------------------------
c
c     Open and Read ALL MT.DAT
c
C-----------------------------------------------------------------------
      open(9,file='MT.DAT',status='OLD',err=40)
C-----SET UP LOOP TO READ MT DEFINITIONS (NOW UP TO 1,000).
      DO 20 I=1,1000
      READ(9,10,END=30) MTIN1,MTIN2,MTTABIN
   10 FORMAT(2I4,9X,A40)
      if(MTIN1.le.0) go to 20
      do j=MTIN1,MTIN2
      MTTABB(1,j) = 1
      MTTABA(j) = MTTABIN
      enddo
   20 CONTINUE
c-----Finished with MT.DAT
   30 CLOSE(9)
      RETURN
C-----------------------------------------------------------------------
c
c     ERROR opening file
c
C-----------------------------------------------------------------------
   40 write(*,50)
   50 format(' ERROR...Opening MT.DAT = MT Definitions.'/
     1       '         EXECUTION TERMINATED')
      STOP
      END
      SUBROUTINE MTCHEK
C=======================================================================
C
C     CHECK Deletion & Summation Rules
C
c     Only use ENDF-8 - ENDF/B-VIII - Definitions
C     MTTABB(I,..), I = 1 = 1 = MT used/0 = No used
C                     = 2 = # of times Used as SUM result
C                     = 3 = # of times used IN SUM
C                     = 4 + Exempt
C                     = 5
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*40 MTTABA,MTTABIN
c-----01/18/11 - increased dimension from 200 to 1,000
      COMMON/MTDAT1/MTTABA(1000)
      COMMON/MTDAT2/MTTABB(5,1000)
      COMMON/MAKERN/MAKE ,MTMAKE(20),MTRANG(20), MTADD(3,15,20)
      COMMON/MAKERP/MAKEP,MTMAKP(10),MTRANP(10),MTADDP(3,15,10)
      COMMON/DELETE/IDEL,MTDEL(2,20)
      COMMON/OPS/IMOPS(14)
c-----------------------------------------------------------------------
c
c     IMOPS(4) = Check DELETIONS
c
c-----------------------------------------------------------------------
c-----2021-2 = Only check if using built-in tables
      if(IMOPS(4).ne.2) go to 20
      if(IDEL.le.0) go to 20
      do 12 i=1,IDEL
      jj1 = MTDEL(1,i)
      jj2 = MTDEL(2,i)
      do 11 j=jj1,jj2
      if(MTTABB(1,j).gt.0) go to 11
      write(*,10) j
      write(3,10) j
   10 format(' WARNING...MT=',i5,' Not Defined for DELETION')
   11 continue
   12 continue
c-----------------------------------------------------------------------
c
c     IMOPS(5) = Check NEUTRON SUMS
c
c-----------------------------------------------------------------------
c-----2021-2 = Only check if using built-in tables
   20 if(IMOPS(5).ne.2) go to 100
      if(MAKE.le.0) go to 40
      do 35 i=1,MAKE
c-----Sum
      MTUSE = MTMAKE(i)
      MTTABB(2,MTUSE) = MTTABB(2,MTUSE) + 1      ! Used AS SUM
      if(MTTABB(1,MTUSE).gt.0) go to 31
      write(*,30) MTUSE
      write(3,30) MTUSE
   30 format(' WARING...MT=',i5,' Not Defined for Neutron SUMMATION')
c-----Parts
   31 do 34 k=1,15
      jj1 = IABS(MTADD(1,k,i))     ! Allow for subtraction
      jj2 = IABS(MTADD(2,k,i))
      if(jj1.le.0) go to 35
      do 33 j=jj1,jj2
      if(MTTABB(4,j).gt.0) go to 33              ! NOT exempt
      MTUSE = j
      MTTABB(3,MTUSE) = MTTABB(3,MTUSE) + 1      ! Used IN SUM
      if(MTTABB(3,MTUSE).gt.1) then
      write(*,7774) k,j,MTTABB(3,MTUSE)
 7774 format(' k/j/#=',3i5,' #1 neutrons')
      endif
      if(MTTABB(1,MTUSE).gt.0) go to 33
      write(*,30) MTUSE
      write(3,30) MTUSE
   33 continue
   34 continue
   35 continue
c-----------------------------------------------------------------------
c
c     Check PHOTON SUMS
c
c-----------------------------------------------------------------------
   40 if(MAKEP.le.0) go to 60
      do 55 i=1,MAKEP
c-----Sum
      MTUSE = MTMAKP(i)
      MTTABB(2,MTUSE) = MTTABB(2,MTUSE) + 1      ! Used AS SUM
      if(MTTABB(1,MTUSE).gt.0) go to 51
      write(*,50) MTUSE
      write(3,50) MTUSE
   50 format(' WARNING...MT=',i5,' Not Defined for Photon SUMMATION')
c-----Parts
   51 do 54 k=1,10
      jj1 = IABS(MTADDP(1,k,i))   ! Allow for subtraction
      jj2 = IABS(MTADDP(2,k,i))
      if(jj1.le.0) go to 55
      do 53 j=jj1,jj2
      if(MTTABB(4,j).gt.0) go to 53              ! NOT exempt
      MTUSE = j
      MTTABB(3,MTUSE) = MTTABB(3,MTUSE) + 1      ! Used IN SUM
      if(MTTABB(3,MTUSE).gt.1) then
      write(*,7773) k,j,MTTABB(3,MTUSE)
 7773 format(' k/j/#=',3i5,' #2 photons')
      endif
      if(MTTABB(1,MTUSE).gt.0) go to 53
      write(*,50) MTUSE
      write(3,50) MTUSE
   53 continue
   54 continue
   55 continue
c-----------------------------------------------------------------------
C
C     Check for Unused MT
c
c-----------------------------------------------------------------------
   60 do 65 i=1,1000
      if(MTTABB(4,i).gt.0) go to 65              ! NOT exempt
      if(MTTABB(1,i).le.0) go to 65
      if(MTTABB(3,i).le.0) then
      write(3,62) i,MTTABA(i)
      write(*,62) i,MTTABA(i)
   62 format(' WARNING...MT=',i5,1x,a40,' Not Used in SUMMATION')
      endif
   65 continue
c-----------------------------------------------------------------------
C
C     Check for Used MT more than once
c
c-----------------------------------------------------------------------
      do 75 i=1,1000
      if(MTTABB(1,i).le.0) go to 75
      if(MTTABB(3,i).gt.1) then
      write(3,72) i,MTTABA(i),MTTABB(3,i)
      write(*,72) i,MTTABA(i),MTTABB(3,i)
   72 format(' WARNING..MT=',i5,1x,a40,' Used',i2,' Times in SUMMATION')
      endif
   75 continue
c-----------------------------------------------------------------------
C
C     Finished
c
c-----------------------------------------------------------------------
  100 return
      end
