C This file is part of PREPRO.
C
C    Author: Dermott (Red) Cullen
C Copyright: (C) International Atomic Energy Agency
C
C PREPRO is free software; you can redistribute it and/or modify it
C under the terms of the MIT License; see LICENSE file for more details.


C=======================================================================
C
C     PROGRAM SIXPAK
C     ==============
C     VERSION 92-1 (JANUARY 1992)
C     VERSION 92-2 (FEBRUARY 1992)*INCREASED CORE ALLOCATION TO
C                                  ACCOMMODATE JEF AND EFF EVALUATIONS.
C     VERSION 92-3 (APRIL 1992)   *ADDED ADDITIONAL DATA TESTS.
C     VERSION 92-4 (SEPT. 1992)   *CORRECTED KALBACH-MANN CALCULATIONS.
C                                 *FOR PHOTON PRODUCTION OUTPUT MF=12
C                                  (MULTIPLICITY), MF=14 (ISOTROPIC
C                                  ANGULAR DISTRIBUTIONS) AND MF=15
C                                  (SPECTRA) - PREVIOUSLY ONLY MF=15.
C                                 *FIRST ORDER CORRECTIONS TRANSFORMING
C                                  CENTER-OF-MASS SPECTRA TO LAB SYSTEM
C                                  FOR OUTPUT IN MF=5
C                                 *CORRECTED ISOTROPIC ANGULAR
C                                  DISTRIBUTION FLAG (LI)
C     VERSION 94-1 (JANUARY 1994) *VARIABLE ENDF/B INPUT DATA FILENAME
C                                  TO ALLOW ACCESS TO FILE STRUCTURES
C                                  (WARNING - INPUT PARAMETER FORMAT
C                                  HAS BEEN CHANGED)
C                                 *CLOSE ALL FILES BEFORE TERMINATING
C                                  (SEE, SUBROUTINE ENDIT)
C                                 *INCREASED MAXIMUM TABLE SIZE FROM
C                                  2000 TO 6000.
C     VERSION 96-1 (JANUARY 1996) *COMPLETE RE-WRITE
C                                 *IMPROVED COMPUTER INDEPENDENCE
C                                 *ALL DOUBLE PRECISION
C                                 *ON SCREEN OUTPUT
C                                 *UNIFORM TREATMENT OF ENDF/B I/O
C                                 *IMPROVED OUTPUT PRECISION
C     VERSION 99-1 (MARCH 1999)   *CORRECTED CHARACTER TO FLOATING
C                                  POINT READ FOR MORE DIGITS
C                                 *UPDATED TEST FOR ENDF/B FORMAT
C                                  VERSION BASED ON RECENT FORMAT CHANGE
C                                 *GENERAL IMPROVEMENTS BASED ON
C                                  USER FEEDBACK
C     VERSION 99-2 (JUNE 1999)    *ASSUME ENDF/B-VI, NOT V, IF MISSING
C                                  MF=1, MT-451.
C     VERS. 2000-1 (FEBRUARY 2000)*GENERAL IMPROVEMENTS BASED ON
C                                  USER FEEDBACK
C     VERS. 2002-1 (JANUARY 2002) *CORRECTED ANGULAR DISTRIBUTION (MF=4)
C                                  OUTPUT TO INSURE USED FIELDS ARE 0
C                  (MAY 2002)     *OPTIONAL INPUT PARAMETERS
C                  (NOV. 2002)    *EXTENDED TO ALLOW CHARGED PARTICLE
C                                  ANGULAR DISTRIBUTION IN MF=4 -
C                                  WARNING - STRICTLY SPEAKING THIS IS
C                                  NOT LEGAL, SINCE MF=4 IS SUPPOSED TO
C                                  BE USED ONLY FOR NEUTRON ANGULAR
C                                  DISTRIBUTIONS - BUT WHERE MT MAKES
C                                  IT OBVIOUS THAT THE OUTGOING PARTICLE
C                                  IS NOT A NEUTRON HOPEFULLY IT WILL
C                                  NOT CAUSE A PROBLEM IF MF=4 IS USED
C                                  FOR CHARGED PARTICLES.
C     VERS. 2004-1 (MARCH 2004)   *ADDED INCLUDE FOR COMMON
C                                 *INCREASED MAXIMUM TABLE SIZE FROM
C                                  6,000 TO 12,000.
C                                 *ADDED DUMMY A FOR ELEMENTS
C                                 *CORRECTED OUTPUT INTERPOLATON LAWS
C     VERS. 2007-1 (JAN.  2007)   *CHECKED AGAINST ALL ENDF/B-VII.
C                                 *INCREASED MAXIMUM TABLE SIZE FROM
C                                  12,000 TO 120,000.
C     VERS. 2007-2 (DEC.  2007)   *72 CHARACTER FILE NAMES.
C     VERS. 2010-1 (Apr.  2010)   *General update based on user feedback
C     VERS. 2011-1 (May   2011)   *Added MF/MT=9/5 yield output starting
C                                  from  MF/MT=6/5 distributions.
C                                 *Increased maximum Legendre order from
C                                  30 to 1,000 - WARNING - using more
C                                  than 30 results in NONSENSE = NOISE!!
C     VERS. 2012-1 (Oct.  2012)   *Increased max. point count to 500,000
C                                 *Added CODENAME
C                                 *32 and 64 bit Compatible
C                                 *Added ERROR stop
C                                 *For photons, combine discrete and
C                                  continuum into tabulated increasing
C                                  energy order.
C                                 *Check energy output order increasing.
C                                  Print WARNING if not increasing - do
C                                  not STOP- stopping would prevent ALL
C                                  output - the user may not be at all
C                                  interested in the BAD data, but may
C                                  be interested in other output data
C                                  that is o.k.
C     VERS. 2015-1 (Jan.  2015)   *Extended OUT9.
C                                 *Replaced ALL 3 way IF Statements.
C                                 *Deleted unused coding.
C     VERS. 2017-1 (May   2017)   *Increased max. point to 600,000
C                                 *Updated based on user feedback
C     VERS. 2017-2 (Oct.  2017)   *Updated for new P(nu) formats =
C                                  Recognized and ignored = no MF=5
C                                  equivalent.
C     VERS. 2018-1 (Jan.  2018)   *Updated to skip Nu-Bar Data = there
C                                  is no double-differential data to
C                                  process.
C                                 *On-linr report for ALL ENDERROR
C     VERS. 2019-1 (June  2019)   *Additional Interpolation Law Tests
C                                 *Checked Maximum Tabulated Energy to
C                                  insure it is the same for all MTs -
C                                  if not, print WARNING messages.
C                                 *WARNING MT=5 - not allowed in MF=4/5
C                                  see ENDF102 - but will translate here
C                                  to allow diagnostic use ONLY.
C                                 *Corrected END Histogram - guarantee
C                                  it ends with zero cross section,e.g.,
C                                  (E,Y) only defines upper energy of
C                                  the last group - Y has no meaning,
C                                  by ENDF convention it should be Y = 0
C     VERS. 2020-1 (Mar.  2020)   *Added ENDFB.MF3 for MF/MT=3/5 parta
C                                  based on MF=6/5.
C                                 *Added Target Isomer State
C     VERS. 2021-1 (Jan.  2021)   *Updated for FORTRAN 2018
C
C     OWNED, MAINTAINED AND DISTRIBUTED BY
C     ------------------------------------
C     THE NUCLEAR DATA SECTION
C     INTERNATIONAL ATOMIC ENERGY AGENCY
C     P.O. BOX 100
C     A-1400, VIENNA, AUSTRIA
C     EUROPE
C
C     ORIGINALLY WRITTEN BY
C     ------------------------------------
C     Dermott E. Cullen
C
C     PRESENT CONTACT INFORMATION
C     ---------------------------
C     Dermott E. Cullen
C     1466 Hudson Way
C     Livermore, CA 94550
C     U.S.A.
C     Telephone  925-443-1911
C     E. Mail    RedCullen1@Comcast.net
C     Website    RedCullen1.net/HOMEPAGE.NEW
C
C     COLLABORATION
C     ==================================================================
C     DEVELOPED IN COLLABORATION WITH,
C
C     *THE NATIONAL NUCLEAR DATA CENTER, BROOKHAVEN NATIONAL LAB
C
C     *THE NUCLEAR DATA SECTION, IAEA, VIENNA, AUSTRIA
C
C     *CENTRO TECNICO AEROSPACIAL, SAO JOSE DOS CAMPOS, BRAZIL
C
C     AS A PART OF AN INTERNATIONAL PROJECT ON THE EXCHANGE OF
C     NUCLEAR DATA
C
C     ACKNOWLEDGEMENT (VERSION 92-1)
C     ==================================================================
C     THE AUTHOR THANKS SOL PEARLSTEIN (BROOKHAVEN NATIONAL LAB) FOR
C     SIGNIFICANTLY CONTRIBUTING TOWARD IMPROVING THE ACCURACY AND
C     COMPUTER INDEPENDENCE OF THIS CODE - THANKS, SOL
C
C     ACKNOWLEDGEMENT (VERSION 92-4)
C     ==================================================================
C     THE AUTHOR THANKS BOB MACFARLANE (LOS ALAMOS) FOR SUGGESTING HOW
C     TO PROPERLY OUTPUT THE PHOTON PRODUCTION DATA TO PUT IT INTO
C     EXACTLY THE FORM NEEDED FOR USE IN PROCESSING CODES.
C
C     THE AUTHOR THANKS CHRIS DEAN (WINFRITH) FOR POINTING OUT ERRORS
C     IN THE EARLIER TREATMENT OF THE KALBACH-MANN FORMALISM AND IN
C     THE DEFINITION OF THE ISOTROPIC ANGULAR DISTRIBUTION FLAG (LI).
C
C     AUTHORS MESSAGE
C     ==================================================================
C     THE COMMENTS BELOW SHOULD BE CONSIDERED THE LATEST DOCUMENTATION
C     INCLUDING ALL RECENT IMPROVEMENTS. PLEASE READ ALL OF THESE
C     COMMENTS BEFORE IMPLEMENTING AND USING THESE CODES.
C
C     AT THE PRESENT TIME WE ARE ATTEMPTING TO DEVELOP A SET OF COMPUTER
C     INDEPENDENT PROGRAMS THAT CAN EASILY BE IMPLEMENTED ON ANY ONE
C     OF A WIDE VARIETY OF COMPUTERS. IN ORDER TO ASSIST IN THIS PROJECT
C     IT WOULD BE APPECIATED IF YOU WOULD NOTIFY THE AUTHOR OF ANY
C     COMPILER DIAGNOSTICS, OPERATING PROBLEMS OR SUGGESTIONS ON HOW TO
C     IMPROVE THIS PROGRAM. HOPEFULLY, IN THIS WAY FUTURE VERSIONS OF
C     THIS PROGRAM WILL BE COMPLETELY COMPATIBLE FOR USE ON YOUR
C     COMPUTER.
C
C     PURPOSE
C     ==================================================================
C     1) CHECK ALL DOUBLE-DIFFERENTIAL DATA (MF=6)
C
C     2) OUTPUT EQUIVALENT MF = 4, 5, 12, 14 AND 15 DATA.
C
C     DATA CHECKING
C     ==================================================================
C     ALL OF THE ENDF/B-VI MF=6 DATA IS CHECKED - FOR DETAILS SEE BELOW.
C
C     THE MF=6 DATA IS NOT CORRECTED AND OUTPUT IN THE ENDF/B FORMAT.
C     IT IS MERELY CHECKED. IF ERRORS ARE FOUND IT IS UP TO THE USER
C     TO TAKE CORRECTIVE ACTION ON THE MF=6 DATA.
C
C     IN CONTRAST WHEN PROBLEMS ARE FOUND IN DATA WHICH WILL BE OUTPUT
C     IN THE ENDF/B FORMAT (MF=4, 5, 12, 14 AND 15), WHENEVER POSSIBLE
C     CORRECTIVE ACTION WILL BE TAKEN.
C
C     FURTHER CHECKS AND CORRECTIONS
C     ==================================================================
C     ONCE THE DATA HAS BEEN OUTPUT IN MF = 4, 5, 12, 14 AND 15 FORMATS
C     FURTHER CORRECTIVE ACTION CAN BE TAKEN AS FOLLOWS,
C
C     PROGRAM LEGEND
C     ==============
C     CAN BE USED TO CORRECT ANGULAR DISTRIBUTIONS WHICH ARE NEGATIVE,
C     TO CONVERT FROM LEGENDRE COEFFICIENTS TO TABULATED ANGULAR
C     DISTRIBUTIONS AND GENERALLY PERFORM MORE EXTENSIVE TESTS OF
C     ALL MF=4 DATA.
C
C     PROGRAM EVALPLOT
C     ================
C     VERSION 92-1 AND LATER VERSIONS CAN PLOT ALL OF THE MF=4, 5 AND 15
C     DATA OUTPUT BY THIS CODE. EARLIER VERSIONS CAN PLOT MF=4 AND 5.
C     GRAPHICS IS AN EXCELLENT WAY TO CHECK THIS DATA.
C
C     PROGRAM PLOTTAB
C     ===============
C     THIS IS A GENERAL PLOTTING PROGRAM AND THERE IS AN INTERFACE IN
C     THIS CODE TO PRODUCE OUTPUT FOR ANY MF=6 DATA IN THE PLOTTAB
C     INPUT FORMAT. THIS PROGRAM CAN BE USED TO CHECK ALL OF THE MF=6
C     DATA AS WELL AS THE EQUIVALENT MF=4, 5, 12, 14 AND 15 DATA - AS
C     WELL AS COMPARING THE ORIGINAL MF=6 AND EQUIVALENT DATA.
C
C     DATA OUTPUT
C     ==================================================================
C     THE ENDF/B MF=4, 5, 12, 14 AND 15 FORMATS ONLY ALLOW FOR NEUTRONS
C     INCIDENTS
C
C     THE ENDF/B MF=4 AND 5 FORMATS ONLY ALLOW FOR NEUTRONS OUTGOING.
C
C     THE ENDF/B MF=12, 14 AND 15 ONLY ALLOWS FOR PHOTONS OUTGOING.
C
C     THESE ARE THE ONLY COMBINATIONS OF DATA OUTPUT BY THIS CODE.
C
C     ALL OTHER COMBINATIONS OF INCIDENT AND OUTGOING PARTICLES ARE
C     CHECKED, BUT THE RESULTS CANNOT BE OUTPUT IN THE ENDF/B FORMAT.
C     HOWEVER, USING THE PLOTTAB INTERFACE BUILT INTO THIS CODE THIS
C     DATA CAN, AND HAS BEEN, OUTPUT AND CHECKED.
C
C     THE NEUTRON DATA IN MF=4 CAN BE IN THE FORM OF EITHER TABULATED
C     ANGULAR DISTRIBUTIONS OR LEGENDRE COEFFICIENTS.
C
C     THE NEUTRON (MF=5) OR PHOTON (MF=15) SPECTRA ARE BOTH IN EXACTLY
C     THE SAME FORMAT = ARBITRARY TABULATED FUNCTIONS - ENDF/B OPTION
C     LF=1.
C
C     ENDF/B DATA OUTPUT ORDER
C     ==================================================================
C     ENDF/B DATA IS OUTPUT IN ASCENDING MAT, MF, MT ORDER. IN ORDER TO
C     ALLOW THIS PROGRAM TO PRODUCE ALL OUTPUT IN A SINGLE PASS THROUGH
C     THE MF=6 DATA, OUTPUT FOR EACH (MAT, MT) IS OUTPUT TO SEPERATE
C     FILES FOR MF=4, 5, 12, 14 AND 15.
C
C     FOR SUBSEQUENT USE THE ENDF/B FORMATTED DATA OUTPUT BY THIS CODE
C     CAN BE MERGED TOGETHER USING PROGRAM MERGER (CONTAIN THE AUTHOR
C     OF THIS CODE FOR A COPY OF MERGER), E.G., MERGE MF=12, 14 AND 15
C     DATA IN ORDER TO THEN CALCULATE PHOTON PRODUCTION DATA OR MF=4
C     AND 5 CAN BE MERGED TOGETHER TO CALCULATE NEUTRON TRANSFER - OR
C     ALL OF THEM CAN BE MERGED TOGETHER TO PERFORM NEUTRON AND PHOTON
C     CALCULATIONS.
C
C     CORRELATED (MF=6) VS. UNCORRELATED (MF=4 AND 5) DATA
C     ==================================================================
C     THE ENDF/B DOUBLE DIFFERENTAL = CORRELATED - DATA IN MF=6
C     REPRESENTS DATA IN THE FORM,
C
C     F(E,EP,COS) = SIG(E)*Y(E)*G0(E,EP)*F(E,EP,COS)
C
C     SIG(E)      = MF=3 CROSS SECTIONS
C     Y(E)        = YIELD (MULTIPLICITY)
C     G0(E,EP)    = ENERGY SPECTRUM
C     F(E,EP,COS) = ANGULAR DISTRIBUTION
C
C     IN A SITUATION WHERE YOU HAVE MONOENERGETIC AND MONODIRECTIONAL
C     NEUTRONS INCIDENT YOU WILL BE ABLE TO OBSERVE CORRELATION EFFECTS
C     IN THE NEUTRON SPECTRUM AND ANGULAR DISTRIBUTION.
C
C     EVEN IN SITUATIONS WHERE YOU HAVE A NARROW SPECTRUM OF NEUTRONS
C     THAT ARE HIGHLY DIRECTIONALLY ORIENTED YOU MAY BE ABLE TO OBSERVE
C     THESE CORRELATION EFFECTS, E.G., A NARROW 14 MEV FUSION SOURCE
C     INCIDENT ON THE FIRST WALL OF A CTR DEVICE.
C
C     FOR SUCH SITUATIONS USE OF THE CORRELATED (MF=6) DATA IS REQUIRED
C     IN CALCULATIONS.
C
C     HOWEVER, IN MANY APPLICATIONS WHERE THERE IS A BROAD SPECTRUM OF
C     NEUTRONS AND THE NEUTRON FLUX IS NOT HIGHLY DIRECTIONALLY
C     ORIENTED, THE NEUTRON MULTIPLICATION, SPECTRUM AND ORIENTATION
C     CAN BE FAIRLY ACCURATELY CALCULATED WITHOUT CONSIDERING
C     CORRELATION EFFECTS.
C
C     THE UNCORRELATED DATA PRODUCED BY THIS CODE REPLACES THE
C     CORRELATED DATA,
C
C     F(E,EP,COS) = SIG(E)*Y(E)*G0(E,EP)*F(E,EP,COS)
C
C     BY THE UNCORRELATED DATA,
C
C     F(E,EP,COS) = SIG(E)*Y(E)*G0(E,EP)*F0(E,COS)
C
C     BY INTEGRATING G0(E,EP)*F(E,EP,COS) OVER SECONDARY ENERGY (EP)
C     TO DEFINE AN AVERAGE ANGULAR DISTRIBUTION, F0(E,COS).
C
C     WHAT IS LOST IN THIS PROCESS IS THE CORRELATION BETWEEN EP AND COS
C     SO THAT IN A TRANSPORT CALCULATION ALL MOMENTS OF THE FLUX WILL
C     HAVE THE SAME SPECTRUM, G0(E,EP) AND EACH WILL BE EFFECTED BY THE
C     AVERAGE ANGULAR DISTRIBUTION.
C
C     FOR APPLICATIONS TO HIGH ENERGY FUSION APPLICATIONS CORRELATED
C     DATA SHOULD BE USED. HOWEVER, FOR LOWER ENERGY APPLICATIONS,
C     SUCH AS FISSION REACTORS, IT SHOULD BE ADEQUATE TO USE THE
C     UNCORRELATED DATA - IN THIS CASE THE MOST IMPORTANT EFFECT
C     WILL BE THE OVERALL NEUTRON MULTIPLICATION AND SPECTRUM.
C
C     AN IMPORTANT CONSIDERATION IN DESIGNING THIS PROGRAM IS THAT
C     MANY COMPUTER CODES - DATA PROCESSING AND TRANSPORT CODES -
C     CANNOT USE THE CORRELATED (MF=6) DATA - NOR ARE THEY INTENDED
C     FOR HIGH ENERGY USE. FOR THESE CODES THE UNCORRELATED DATA
C     PRODUCED BY THIS CODE SHOULD BE ADEQUATE TO MEET THEIR NEEDS.
C
C     WARNING - IT CANNOT BE STRESSED ENOUGH THAT THE OUTPUT OF THIS
C     CODE SHOULD ONLY BE USED FOR LOW ENERGY APPLICATIONS - FAILURE
C     TO HEED THIS WARNING CAN LEAD TO COMPLETELY UNRELIABLE RESULTS.
C
C     ENDF/B FORMAT
C     ==================================================================
C     THIS PROGRAM ONLY USES THE ENDF/B BCD OR CARD IMAGE FORMAT (AS
C     OPPOSED TO THE BINARY FORMAT) AND CAN HANDLE DATA IN ANY VERSION
C     OF THE ENDF/B FORMAT (I.E., ENDF/B-I, II,III, IV, V OR VI FORMAT).
C
C     IT IS ASSUMED THAT THE DATA IS CORRECTLY CODED IN THE ENDF/B
C     FORMAT AND NO ERROR CHECKING IS PERFORMED. IN PARTICULAR IT IS
C     ASSUMED THAT THE MAT, MF AND MT ON EACH LINE IS CORRECT. SEQUENCE
C     NUMBERS (COLUMNS 76-80) ARE IGNORED ON INPUT, BUT WILL BE
C     CORRECTLY OUTPUT ON ALL LINES. THE FORMAT OF SECTION MF=1, MT=451
C     AND ALL SECTIONS OF MF=6 MUST BE CORRECT. THE PROGRAM SKIPS ALL
C     OTHER SECTIONS OF DATA AND AS SUCH IS INSENSITIVE TO THE FORMAT
C     OF ALL OTHER SECTIONS.
C
C     CONTENTS OF OUTPUT
C     ==================================================================
C     6 ENDF/B FORMATTED OUTPUT FILES ARE PRODUCED FOR NEUTRON INCIDENT
C     DATA,
C
C     1) ENDFB.MF4 - ANGULAR DISTRIBUTIONS AND LEGENDRE COEFFICIENTS
C                    FOR NEUTRONS
C     2) ENDFB.MF5 - TABULATED NEUTRON ENERGY SPECTRA
C     3) ENDFB.M12 - PHOTON EMISSION MULTIPLICITY
C     4) ENDFB.M14 - PHOTON EMISSION ANGULAR DISTRIBUTIONS (ALWAYS
C                    ISOTROPIC)
C     5) ENDFB.M15 - TABULATED PHOTON EMISSION SPECTRA
C     6) ENDFB.MF3 - TABULATED Charged Particle Cross Section for MT=5
C
C     EMITTED PARTICLE YIELD
C     ==================================================================
C     NEUTRONS
C     ========
C     IN MF=6 THE YIELD FOR EACH REACTION IS THE ACTUAL MULTIPLICITY OF
C     THE REACTION, E.G., (N,2N) = 2. IN USING MF=4 AND 5 DATA THE
C     ENDF/B CONVENTION IS THAT THE MULTIPLICITY IS IMPLIED BY THE
C     MT NUMBER, E.G., MT=16 = (N,2N) = 2.
C
C     THE ONLY EXCEPT IN ENDF/B-VI IS MT=201 = TOTAL NEUTRON PRODUCTION
C     WHERE AN ACTUAL ENERGY DEPENDENT YIELD IS INCLUDED IN MF=6.
C     HOWEVER, IN THIS CASE THE MF=3 CROSS SECTION INCLUDES THE
C     MULTIPLICITY (S. PEARLSTEIN, PRIVATE COMMUNICATION, JAN. 1992),
C     SIG(MT=201) = 2*SIG(N,2N)+3*SIG(N,3N).....ETC.
C
C     SO THAT FOR ALL ENDF/B-VI DATA AS OF JANUARY 1992 THE MF=4 AND 5
C     DATA OUTPUT BY THIS CODE CAN BE USED IN CONJUNCTION WITH THE MF=3
C     CROSS SECTIONS - WITHOUT ANY REFERENCE TO THE MF=6 YIELD.
C
C     PHOTONS
C     =======
C     UNLIKE THE NEUTRONS WHERE WITH ONLY ONE EXCEPTION (MT=201) THE
C     MF=6 YIELD IS ENERGY INDEPENDENT, IN THE CASE OF PHOTON EMISSION
C     ALMOST ALL OF THE PHOTONS HAVE AN ENERGY DEPENDENT YIELD.
C
C     THIS PROGRAM WILL OUTPUT THE PHOTON MULTIPLICITY IN MF=12 AND
C     INDICATE THAT THERE IS A NORMALIZED DISTRIBUTION IN MF=15
C     (LF=1 IN MF=12).
C
C     THIS PROGRAM WILL OUTPUT THE NORMALIZED PHOTON SPECTRA IN MF=15.
C     CONTINUOUS ENERGY SPECTRA AND DISCRETE PHOTONS WILL ALL BE OUTPUT
C     AS NORMALIZED SPECTRA.
C
C     THIS PROGRAM WILL ALSO OUTPUT MF=14 PHOTON ANGULAR DISTRIBUTION
C     DATA, ALWAYS USING THE ISOTROPIC FLAG TO MINIMIZE OUTPUT.
C
C     WARNING OF ENERGY DEPENDENT YIELD
C     =================================
C     THIS PROGRAM WILL PRINT A WARNING MESSAGE IF A SECTION OF DATA
C     BEING OUTPUT IN THE ENDF/B FORMAT HAS AN ENERGY DEPENDENT MF=6
C     YIELD AND THE EMITTED PARTICLE IS A NEUTRON - SINCE THE ENDF/B
C     CONVENTION IS THAT FOR EACH MT NUMBER THE MULTIPLICITY IS IMPLIED
C     WE DO NOT EXPECT AN ENERGY DEPENDENT MULTIPLICITY FOR NEUTRON
C     EMISSION.
C
C     USING THE OUTPUT
C     ==================================================================
C     NOTE, THAT IN USING THIS DATA, STARTING FROM THE RELATIONSHIP,
C
C     F(E,EP,COS) = SIG(E)*Y(E)*G0(E,EP)*F0(E,COS)
C
C     USING THE ENDF/B CONVENTION THAT THE MULTIPLICITY IS EITHER
C     IMPLIED BY THE MT NUMBER (E.G., MT=16 = N,2N - MULTIPLICITY = 2)
C     OR INCLUDED IN THE CROSS SECTION (E.G., MT=201 = TOTAL NEUTRON
C     PRODUCTION) ALL THE INFORMATION REQUIRED FOR A CALCULATION IS
C     AVAILABLE IN,
C
C     MF=3       - SIG(E)
C     MF=4       - F0(E,COS) - FOR OUTGOING NEUTRONS
C     MF=5       - G0(E,EP)  - FOR OUTGOING NEUTRONS
C     MF=12      - Y(E)      - FOR OUTGOING PHOTONS
C     MF=14      - F0(E,COS) - FOR OUTGOING PHOTONS (ALWAYS ISOTROPIC)
C     MF=15      - G0(E,EP)  - FOR OUTGOING PHOTONS
C
C     DOCUMENTATION
C     ==================================================================
C     ONLY SECTIONS OF MF=4, 5, 12, 14, 15 ARE OUTPUT ON A ENDF/B FILE.
C     THE ONLY DOCUMENTATION IS THE ENDF/B TAPE LABEL (FIRST RECORD OF
C     EACH FILE) WHICH IDENTIFIES THE DATA AS SIXPAK OUTPUT.
C
C     REACTION INDEX
C     ==================================================================
C     THIS PROGRAM DOES NOT USE THE REACTION INDEX WHICH IS GIVEN IN
C     SECTION MF=1, MT=451 OF EACH EVALUATION.
C
C     SECTION SIZE
C     ==================================================================
C     ALL OF THE DATA IN ENDF/B-VI, MF=6 ARE QUITE SMALL TABLES. AS SUCH
C     THIS PROGRAM ONLY ALLOWS TABLES OF UP TO 12000 POINTS (12,000 X,
C     Y VALUES). THIS SIZE IS MORE THAN ADEQUATE TO HANDLE ALL OF THE
C     CURRENT ENDF/B-VI DATA, AND IT CAN BE EASILY INCREASED TO HANDLE
C     ANY NEWER DATA AS IT BECOMES AVAILABLE.
C
C     PLEASE CONTACT THE AUTHOR IF YOU HAVE AN EVALUATION WHICH EXCEEDS
C     THIS LIMIT.
C
C     SELECTION OF DATA
C     ==================================================================
C     THE PROGRAM SELECTS DATA TO BE PROCESSED BASED ON MAT/MT RANGES
C     (MF=6 ASSUMED). THIS PROGRAM ALLOWS UP TO 100 MAT/MT RANGES TO BE
C     SPECIFIED BY INPUT PARAMETERS. THE PROGRAM WILL ASSUME THAT THE
C     ENDF/B TAPE IS IN MAT ORDER. THE PROGRAM WILL TERMINATE EXECUTION
C     WHEN A MAT IS FOUND THAT IS ABOVE ALL REQUESTED MAT RANGES.
C
C     PROGRAM OPERATION
C     ==================================================================
C     EACH SECTION (MT) OF MF=6 DATA IS SUBDIVIDED INTO SUBSECTIONS -
C     ONE SUBSECTION FOR EACH EMITTED PARTICLE.
C
C     EACH SUBSECTION OF DATA IS CONSIDERED SEPARATELY. EACH SUBSECTION
C     OF ENDF/B MF=6 DATA TO PROCESS IS IN THE FORM,
C
C     F(E,EP,COS) = SIG(E)*Y(E)*G0(E,EP)*F(E,EP,COS)
C
C     SIG(E)      = MF=3 CROSS SECTIONS
C     Y(E)        = YIELD (MULTIPLICITY)
C     G0(E,EP)    = ENERGY SPECTRUM
C     F(E,EP,COS) = ANGULAR DISTRIBUTION
C
C     G0(E,EP) = 1 WHEN INTEGRATED OVER EP (SECONDARY ENERGY)
C     G0(E,EP)*F(E,EP,COS) = 1 WHEN INTEGRATED OVER EP AND COS
C
C     THIS PROGRAM WILL DEFINE THE ZEROTH ORDER MOMENTS OF THE
C     ENERGY AND ANGULAR DISTRIBUTIONS,
C
C     G0(E,EP)  = G0(E,EP)*F(E,EP,COS) INTEGRATED OVER COS
C     F0(E,COS) = G0(E,EP)*F(E,EP,COS) INTEGRATED OVER EP
C
C     FOR NEUTRON INDUCED REACTIONS THE ENDF/B FORMATTED OUTPUT WILL BE
C
C     F0(E,COS)- IN ENDFB.MF4 FOR NEUTRONS OUT OF A REACTION
C     G0(E,EP) - IN ENDFB.MF5 FOR NEUTRONS OUT OF A REACTION
C              - IN ENDFB.M15 FOR PHOTONS OUT OF A REACTION
C
C     FOR NEUTRONS INCIDENT AND NEUTRONS EMITTED THIS DATA WILL BE
C     OUTPUT IN MF=4 AND 5 FORMATS.
C
C     FOR NEUTRONS INCIDENT AND PHOTONS EMITTED THIS DATA WILL BE
C     OUTPUT IN MF=15 FORMAT - THE SPECTRA ARE OUTPUT AND THE
C     ANGULAR DISTRIBUTION IS IGNORED.
C
C     ALL PHOTON EMISSION IN THE ENDF/B-VI LIBRARY AS OF JANUARY 1992
C     IS ISOTROPIC AND AS SUCH NO DISTRIBUTION OF PHOTON ANGULAR
C     DISTRIBUTIONS NEED BE OUTPUT - IT IS ALWAYS ISOTROPIC.
C
C     FOR ALL OTHER COMBINATIONS INCIDENT AND EMITTED PARTICLES
C     THERE WILL BE NO ENDF/B FORMATTED OUTPUT.
C
C     VARIATIONS FROM ENDF/B MANUAL
C     ==================================================================
C     LAW=1, LANG=2 = KALBACH-MANN
C     ============================
C     FOR THE DISTRIBUTIONS,
C
C     F(MU,E,EP) = G0(E,EP)*A*(COSH(MU*A)+R(E,EP)*SINH(MU*A))
C
C     G0(E,EP) = 1 - WHEN INTEGRATED OVER EP.
C
C     A*(COSH(MU*A)+R(E,EP)*SINH(MU*A)) = 2 - WHEN INTEGRATD OVER MU
C
C     THIS MEANS AS DEFINED IN THE ENDF/B MANUAL THE DISTRIBUTIONS
C     ARE NORMALIZED TO 2, INSTEAD OF 1. IN ORDER TO OBTAIN CORRECTLY
C     NORMALIZED DISTRIBUTIONS THE DISTRIBUTION SHOULD BE DEFINED
C     TO INCLUDE A FACTOR OF 1/2 MULTIPLYING THE ANGULAR PART OF
C     THE DISTRIBUTION.
C
C     F(MU,E,EP) = G0(E,EP)*0.5*A*(COSH(MU*A)+R(E,EP)*SINH(MU*A))
C
C     THIS IS THE FORM USED IN THIS CODE
C
C     LAW=1, ND NOT 0 = DISCRETE SECONDARY ENERGY DISTRIBUTION
C     ========================================================
C     THE ENDF/B MANUAL SAYS THESE ARE FLAGGED WITH NEGATIVE ENERGIES.
C     IN ENDF/B-VI ALL OF THESE HAVE POSITIVE ENERGY. THIS CODE DOES
C     NOT CONSIDER THE ENDF/B-VI DATA TO BE IN ERROR.
C
C     WITH THE CONVENTION ACTUALLY USED IN ENDF/B-VI ALL SECONDARY
C     ENERGIES SHOULD BE NON-NEGATIVE AND IN ASCENDING ENERGY ORDER
C     FOR EACH INCIDENT ENERGY.
C
C     FROM THE ENDF/B MANUAL IT IS NOT OBVIOUS WHAT G0(E,EP) SHOULD BE
C     FOR DISCRETE PHOTONS - PHYSICALLY THIS IS A DELTA FUNCTION. IN
C     ENDF/B-VI IT IS ENTERED AS 1.0 = INTERPRETING IT AS INTEGRATED
C     OVER SECONDARY ENERGY - IN WHICH CASE THE DELTA FUNCTION = 1.0.
C
C     LIMITATIONS
C     ==================================================================
C     CHECKING DATA
C     ==================================================================
C     THIS PROGRAM CHECKS ALL ENDF/B-VI MF=6 DATA. THE FOLLOWING CHECKS
C     ARE PERFORMED.
C
C     PARAMETERS
C     ==========
C     ALL PARAMETERS ARE CHECKED FOR CONSISTENCY. IF PARAMETERS ARE
C     NOT CONSISTENT THE PROGRAM MAY NOT BE ABLE TO PERFORM THE
C     FOLLOWING TESTS AND WILL MERELY SKIP A SECTION OF DATA.
C
C     INTERPOLATION LAWS
C     ==================
C     ALL INTEGRATIONS ARE PERFORMED USING THE INTERPOLATION LAW GIVEN
C     FOR SECONDARY ENERGY AND/OR COSINE. INTEGRATIONS ARE NOT
C     PERFORMED OVER INCIDENT - ONLY INTEGRATION OVER SECONDARY ENERGY
C     AND/OR COSINE ARE PERFORMED AT EACH INCIDENT ENERGY. THEREFORE
C     THE INTERPOLATION LAW FOR INCIDENT ENERGY IS NOT USED BY THIS
C     CODE.
C
C     ALL INTERPOLATION LAWS ARE CHECKED. ALL DATA ASSOCIATED WITH
C     INTERPOLATION LAWS ARE CHECKED, E.G., NO NON-NEGATIVE VALUES
C     REQUIRING LOG INTERPOLATION. IN ORDER TO PERFORM REQUIRED
C     INTEGRALS OVER COS AND EP IT IS IMPERATIVE THAT THE INTERPOLATION
C     LAWS BE COMPATIBLE WITH THE DATA.
C
C     ENDF/B-VI ALLOWS NEW INTERPOLATION LAWS FOR CORRESPONDING POINT
C     AND UNIT BASE TRANSFORMATION INTERPOLATION. NONE OF THESE NEW
C     INTERPOLATION LAWS ARE USED IN THE ENDF/B-VI LIBRARY AS OF
C     JANUARY 1992 TO INTERPOLATE IN SECONDARY ENERGY OR COSINE.
C     THEREFORE THIS PROGRAM CAN PERFORM ALL OF THE REQUIRED INTEGRALS
C     OVER SECONDARY ENERGY AND/OR COSINE USING ONLY THE OLDER
C     INTERPOLATION CODES. THIS PROGRAM ONLY PERFORMS INTEGRALS FOR
C     EACH INCIDENT ENERGY, SO THAT INTERPOLATION IN INCIDENT ENERGY
C     IS NOT PERFORMED BY THIS PROGRAM.
C
C     NEW INTERPOLATION SCHEMES ARE USED FOR INCIDENT ENERGY - FOR
C     EXAMPLE, CORRESPONDING POINT INTERPOLATION IS SPECIFIED TO ALLOW
C     INTERPOLATION IN G0(E,EP) TO SIMULATE CASES WHERE THE INPUT ENERGY
C     LIMIT IS DEFINED BY E-EP = A DIAGONAL CURVE ACROSS (E,EP) SPACE.
C     THIS INTERPOLATION CODE CANNOT BE SPECIFIED IN THE MF=5 OUTPUT
C     OF THIS CODE - MF=5 ONLY ALLOWS THE OLDER INTERPOLATION LAWS
C     INT=1 THROUGH 5. THEREFORE THIS PROGRAM WILL USE THE CLOSEST
C     CORRESPONDING INTERPOLATION CODE FOR OUTPUT TO MF=5. FOR USE
C     WHERE THE OUTPUT OF THIS CODE = LOW ENERGY APPLICATIONS - THIS
C     SHOULD HAVE LITTLE EFFECT ON RESULTS.
C
C     FOR CONSISTENCY WITH EARLIER VERSIONS OF ENDF/B IN CREATING THE
C     ENDF/B OUTPUT, IF ANY INPUT INTERPOLATION LAW IS NOT IN THE
C     RANGE 1-5, IT WILL FIRST BE TESTED TO SEE IF MOD(10) IT IS
C     IN THIS RANGE, FINALLY IF EVEN THIS DOESN'T WORK IT IS SET
C     EQUAL TO 2 (LINEARLY INTERPOLATION). THIS METHOD WILL EFFECTIVELY
C     REPLACE CORRESPONDING POINT AND UNIT BASE TRANSFORMATION BY THE
C     CLOSEST RELATED INTERPOLATION LAW 1 THROUGH 5 - AGAIN NOTE, AS
C     OF JANUARY 1992 NONE OF THESE NEW LAWS ARE USED IN ENDF/B-VI. IF
C     THIS MUST BE DONE FOR INTERPOLATION IN SECONDARY ENERGY OR COSINE
C     AN ERROR MESSAGE WILL BE PRINTED - SINCE THIS WOULD EFFECT THE
C     ACCURACY OF THE INTEGRALS PERFORMED BY THIS PROGRAM. IF THIS MUST
C     BE DONE FOR INCIDENT ENERGY NO MESSAGE IS PRINTED - SINCE THIS
C     WILL NOT EFFECT THE ACCURACY OF THE INTEGRALS PERFORMED BY THIS
C     PROGRAM.
C
C     SPECTRA AND ANGULAR DISTRIBUTIONS
C     =================================
C     ALL SPECTRA AND ANGULAR DISTRIBUTIONS ARE CHECKED TO INSURE
C     THEY ARE NORMALIZED AND DO NOT INCLUDE ANY NEGATIVE VALUES.
C
C     LEGENDRE COEFFICIENTS
C     =====================
C     THE NORMALIZATION, F0, CANNOT BE NEGATIVE.
C
C     LEGENDRE COEFFICIENTS IN NORMAL FORM ARE CHECKED TO INSURE
C     THEY ARE IN THE RANGE -1 TO +1 = THE LEGENDRE EXPANSION OF A
C     DELTA FUNCTION AT COS=+1 OR -1 - COEFFICIENTS SHOULD NOT
C     EXCEED WHAT YOU GET FROM A DELTA FUNCTION.
C
C     ANGULAR DISTRIBUTIONS ARE CHECKED AT COS = -1, 0 AND +1.
C
C     CREATING ENDF/B OUTPUT
C     ==================================================================
C     THIS PROGRAM CAN CREATE EQUIVALENT MF =4, 5, 12, 14, 15 DATA FOR
C     ALL OF THE DATA INCLUDED IN ENDF/B-VI AS OF JANUARY 1992, EXCEPT
C     FOR 1 SECTION OF LAW=6 DATA (SEE DETAILS BELOW).
C
C     THIS PROGRAM HAS NOT BEEN TESTED ON OTHER DATA LIBRARIES, E.G.,
C     JEF, JENDL, ETC.
C
C     THE PROGRAM HAS THE FOLLOWING LIMITATION AS FAR AS CREATING
C     ENDF/B FORMATTED OUTPUT.
C
C     ISOTROPIC PHOTON EMISSION
C     =========================
C     FOR PHOTON EMISSION THE DISTRIBUTIONS ARE ASSUMED TO BE ISOTROPIC
C     AND ONLY THE MULTIPLICITY IS OUTPUT IN MF=12, ISOTROPIC ANGULAR
C     DISTRIBUTIONS IN MF=14 AND THE SPECTRA IN MF=15. ALL ENDF/B-VI
C     MF=6 DATA AS OF JANUARY 1992 INCLUDE ONLY ISOTROPIC PHOTON
C     EMISSION - SO THAT THIS IS NOT A LIMITATION ON TRANSLATING
C     ENDF/B-VI DATA.
C
C     EITHER TABULATED OR LEGENDRE COEFFICIENTS
C     =========================================
C     FOR LAW=2 THE REPRESENTATION, EITHER TABULATED OR LEGENDRE
C     COEFFICIENTS, CAN BE SPECIFIED FOR EACH INCIDENT ENERGY.
C
C     IN ORDER TO OBTAIN CORRECT ENDF/B OUTPUT THE REPRESENTATION
C     MUST BE THE SAME FOR ALL INCIDENT ENERGIES = MF=4 DATA CAN ONLY
C     BE TABULATED OR LEGENDRE OVER THE ENTIRE ENERGY RANGE.
C
C     YIELD AND OUTPUT NORMALIZATION
C     ==============================
C     THE YIELD INCLUDED WITH EACH SECTION OF DATA IS NOT USED FOR
C     OUTPUT FOR NEUTRONS, BUT IS INCLUDED IN THE OUTPUT FOR PHOTONS.
C     IN ALL CASES THE ANGULAR DISTRIBUTIONS AND SPECTRA OUTPUT ARE
C     NORMALIZED TO UNITY.
C
C     LAW=0
C     =====
C     NO OUTPUT - INCIDENT NEUTRON - EMITTED PHOTON OR NEUTRON
C                 REACTIONS ARE NOT EXPECTED.
C
C     LAW=1
C     =====
C     FOR EACH INCIDENT ENERGY DISCRETE AND CONTINUOUS EMISSION SPECTRA
C     CANNOT BE MIXED TOGETHER - THEY MUST BE ALL EITHER DISCRETE OR
C     CONTINUOUS. IF DISCRETE EMISSION IS GIVEN ONLY 1 SECONDARY
C     ENERGY (NEP=1) MAY BE GIVEN = A NORMALIZED DISTRIBUTION FOR A
C     SINGLE DISCRETE EMISSION ENERGY. ALL OF THE ENDF/B-VI DATA AS
C     OF JANUARY 1992 CONFORM TO THESE LIMITATIONS.
C
C     SINCE THE FLAG NA, TO INDICATE ISOTROPIC DISTRIBUTIONS, IS ONLY
C     GIVEN FOR EACH SECONDARY ENERGY (EP) THE PROGRAM CANNOT DECIDE
C     IN ADVANCE WHETHER OR NOT THE DISTRIBUTION WILL BE ISOTROPIC
C     AT ALL INCIDENT ENERGIES. THEREFORE ISOTROPIC DISTRIBUTIONS
C     WILL BE OUTPUT EITHER: LANG = 1 - AS 1 LEGENDRE COEFFICIENT = 0.0
C     OR LANG = NOT 1 - AS A 2 POINT ANGULAR DISTRIBUTION AT COS = -1.0
C     AND +1.0 WITH BOTH VALUES EQUAL TO 0.5 (A NORMALIZED ISOTROPIC
C     DISTRIBUTION).
C
C     DISCRETE PHOTONS ARE OUTPUT IN MF=15 AS 3 POINT DISTRIBUTIONS
C     WITH SECONDARY ENERGY POINTS AT EP-DEP, EP, EP+DEP, WHERE
C     DEP=0.001*EP. THE VALUES AT EP-DEP AND EP+DEP ARE 0.0, AND
C     AT EP THE VALUE IS 1000.0/EP TO NORMALIZE THE DISTRIBUTION.
C
C     LAW=2
C     =====
C     NO LIMITATION ON REPRESENTATIONS.
C
C     LAW=3
C     =====
C     NO LIMITATION ON REPRESENTATIONS.
C
C     LAW=4
C     =====
C     NO OUTPUT - INCIDENT NEUTRON - EMITTED PHOTON OR NEUTRON
C                 REACTIONS ARE NOT EXPECTED.
C
C     LAW=5
C     =====
C     NO OUTPUT - INCIDENT NEUTRON - EMITTED PHOTON OR NEUTRON
C                 REACTIONS ARE NOT EXPECTED.
C
C     LAW=6
C     =====
C     NO OUTPUT - ENDF/B-VI ONLY INCLUDES 1 SECTION OF THIS TYPE OF DATA
C                 FOR (N,D) 2N,P.
C
C     LAW=7
C     =====
C     FOR EACH INCIDENT ENERGY THE REPRESENTATION MUST BE EITHER,
C
C     1) SQUARE = FOR EACH INCIDENT COSINE EXACTLY THE SAME SECONDARY
C                 ENERGIES.
C
C     2) LINEAR = FOR EACH INCIDENT COSINE THE INTERPOLATION LAW
C                 BETWEEN SECONDARY ENERGIES MUST BE LINEAR.
C
C     THESE 2 PRESENTATIONS ARE THE ONLY ONES PRESENTED IN ENDF/B-VI
C     AS OF JANUARY 1992 - SO THIS PROGRAM CAN TRANSLATED ALL LAW=7
C     DATA FOR ENDF/B-VI.
C
C     LABORATORY VS. CENTER-OF-MASS SYSTEM
C     ==================================================================
C     IN MANY CASES PEOPLE ASSUME THAT FOR HEAVY (HIGH ATOMIC WEIGHT)
C     MATERIALS THE CENTER-OF-MASS AND LAB SYSTEMS ARE ALMOST IDENTICAL,
C     SINCE IN THIS CASE THE CENTER-OF-MASS ENERGY WILL BE MUCH SMALLER
C     THAN THE INCIDENT ENERGY. FOR A PROCESS SUCH AS ELASTIC SCATTERING
C     WHERE FOR HEAVY MATERIALS THE SECONDARY ENERGY, EP, WILL ALWAYS
C     BE A LARGE FRACTION OF THE INCIDENT ENERGY, THIS ASSUMPTION IS
C     VALID. HOWEVER, FOR THE TYPICAL REACTIONS INCLUDED IN MF=6 THIS
C     IS NOT ALWAYS TRUE - IN MANY OF THESE CASES THE SECONDARY ENERGY
C     CAN EXTEND ALL THE WAY DOWN TO ZERO, AND IN PARTICULAR IT CAN
C     BE SMALL COMPARED TO THE CENTER-OF-MASS ENERGY - WHICH MAKES THE
C     TRANSFORMATION FROM CENTER-OF-MASS TO LAB IMPORTANT. THEREFORE
C     GENERALLY TO TREAT MF=6 DATA WE MUST CONSIDER THIS TRANSFORMATION.
C
C     THE FOLLOWING DISCUSSING ONLY APPLIES TO SPECTRA THAT MAY BE
C     OUTPUT IN MF=5 = ONLY DATA FOR NEUTRONS INCIDENT AND EMITTED -
C     IN PARTICULAR THE FOLLOWING DEFINITIONS ARE NOT GENERAL - THEY
C     ARE ONLY VALID FOR INCIDENT AND EMITTED NEUTRONS.
C
C     DOUBLE DIFFERENTIAL DATA IN MF=6 MAY BE GIVEN IN EITHER THE LAB
C     OR C.M. SYSTEM. SIMILARLY ANGULAR DISTRIBUTIONS IN MF=4 MAY BE
C     GIVEN IN EITHER THE LAB OR C.M. SYSTEM. IN CONTRAST ENERGY
C     SPECTRA IN MF=5 CAN ONLY BE GIVEN IN THE LABORATORY SYSTEM.
C
C     THE ANGULAR DISTRIBUTIONS OUTPUT BY THIS CODE IN MF=4 ARE IN THE
C     SAME SYSTEM IN WHICH THEY ARE GIVEN IN MF=6 - EITHER LAB OR
C     CENTER-OF-MASS SYSTEM.
C
C     THE ENERGY SPECTRA OUTPUT BY THIS CODE IN MF=5 MUST BE IN THE LAB
C     SYSTEM - THIS IS THE ONLY ALLOWED FORM FOR MF=5 DATA.
C
C     FOR MF=6 SPECTRA GIVEN IN THE LAB SYSTEM THIS MERELY REQUIRES
C     COPYING THE GIVEN SPECTRA TO MF=5 OUTPUT.
C
C     FOR MF=6 SPECTRA GIVEN IN THE CENTER-OF-MASS SYSTEM ONLY FIRST
C     ORDER CORRECTIONS IN THE SPECTRA AND USED AND THEY ARE THEN
C     OUTPUT IN MF=5 AS IN THE LAB SYSTEM - THE FIRST ORDER CORRECTIONS
C     ARE DESCRIBED BELOW.
C
C     DEFINING,
C     MM      = CENTER OF MASS MOTION
C     CM      = OUTGOING (EMITTED) PARTICLE IN CENTER OF MASS
C     LAB     = OUTGOING (EMITTED) PARTICLE IN LAB
C     THETA   = CM SCATTERING ANGLE RELATIVE TO INCIDENT DIRECTION
C     COS(CM) = COSINE OF THE CM SCATTERING ANGLE
C
C     FOR NEUTRONS INCIDENT WITH AN ENERGY, E, AND THEREFORE A SPEED,
C
C     VN(E) = 2*SQRT(E)/MASS(IN)
C
C     THE CENTER-OF-MASS SPEED IS GIVEN BY,
C
C     V(MM) = VN(E)/(1 + A)
C
C     AND THE CENTER OF MASS ENERGY BY,
C
C     E(MM) = 1/2*MASS(IN)*V(MM)**2
C           = 1/2*MASS(IN)*VN(E)**2/(1 + A)**2
C           = E/(1 + A)**2
C
C     FOR DISTRIBUTIONS GIVEN IN MF=6 IN THE CM, THE SPEED, V(CM),
C     SHOULD BE VECTORIALLY ADDED TO THAT OF OUTGOING PARTICLES TO
C     DEFINE THE OUTGOING PARTICLES LAB VELOCITY, AND IN TURN IT'S
C     ENERGY,
C
C     V(LAB)*COS(LAB) = V(MM) + V(CM)*COS(CM)
C     V(LAB)*SIN(LAB) =         V(CM)*SIN(CM)
C
C     V(LAB)**2 = V(MM)**2 + V(CM)**2 + 2*COS(CM)*V(MM)*V(CM)
C
C     EP(LAB)   = 0.5*MASS(OUT)*V(LAB)**2
C
C               = E(MM) + EP(CM) + 2*COS(CM)*SQRT(E(MM)*EP(CM))
C
C     WE CAN ALSO DEFINE THE REVERSE TRANSFORMATION USING,
C
C     V(CM)*COS(CM) = V(LAB)*COS(LAB) - V(MM)
C     V(CM)*SIN(CM) = V(LAB)*SIN(LAB)
C
C     V(CM)**2 = V(MM)**2 + V(LAB)**2 - 2*COS(LAB)*V(MM)*V(LAB)
C
C     EP(CM)   = 0.5*MASS(OUT)*V(CM)**2
C
C               = E(MM) + EP(LAB) - 2*COS(LAB)*SQRT(E(MM)*EP(LAB))
C
C     WE CAN DEFINE COS(LAB) FROM THE RELATIONSHIP,
C
C     V(LAB)*COS(LAB) = V(MM) + V(CM)*COS(CM)
C
C     COS(LAB)        =[V(MM) + V(CM)*COS(CM)]/V(LAB)
C
C                      [V(MM) + V(CM)*COS(CM)]
C     COS(LAB)        =---------------------------------------------
C                      SQRT[V(MM)**2+V(CM)**2+2*COS(CM)*V(MM)*V(CM)]
C
C     OR COS(CM) FROM THE RELATIONSHIP,
C
C     V(CM)*COS(CM)  = V(LAB)*COS(LAB) - V(MM)
C
C     COS(CM)         =[V(LAB)*COS(LAB) - V(MM)]/V(CM)
C
C                      [V(LAB)*COS(LAB) - V(MM)]
C     COS(CM)         =------------------------------------------------
C                      SQRT[V(LAB)**2+V(CM)**2-2*COS(LAB)*V(LAB)*V(MM)]
C
C     THE JACOBIAN CAN BE DEFINED FROM,
C
C     V(LAB)*COS(LAB) = V(MM) + V(CM)*COS(CM)
C
C     J = D[COS(CM)]/D[COS(LAB)] = V(LAB)/V(CM)
C                                = SQRT[EP(LAB)/EP(CM)]
C
C     WITH THESE DEFINITIONS OF EP(LAB) AND COS(LAB) IN TERMS OF E(MM),
C     EP(CM) AND COS(CM) IT IS POSSIBLE TO PERFORM A POINT-BY-POINT
C     TRANSFORMATION OF DISTRIBUTIONS FROM THE CM TO LAB SYSTEM USING
C     THESE DEFINITIONS - OR IF WE WISHED WE COULD PERFORM THE REVERSE
C     TRANSFORMATION USING THE ABOVE RELATIONSHIPS AND THE IDENTITY,
C
C     F(E,EP(LAB),COS(LAB))*D(COS(LAB))=F(E,EP(CM),COS(CM))*D(COS(CM))
C
C     THIS IS NOT WHAT WILL BE DONE HERE, SINCE WE WILL ONLY BE
C     INTERESTED IN THE ZEROTH ORDER MOMENTS OF THESE DISTRIBUTIONS,
C     BUT WE WILL BE INTERESTED IN DEFINING THOSE MOMENTS IN THE
C     LAB SYSTEM IN TERMS OF MF=6 SPECTRA GIVEN IN THE CM SYSTEM USING,
C
C     F(E,EP(LAB),COS(LAB)) = F(E,EP(CM),COS(CM))*J
C
C     THE LIMITS OF EP(LAB) ARE DEFINED BY SETTING COS(CM) = +1 OR -1,
C
C     EP(LAB)   = (SQRT(EP(CM)) + SQRT(E(MM)))**2  FOR COS(CM) = +1
C               = (SQRT(EP(CM)) - SQRT(E(MM)))**2  FOR COS(CM) = -1
C
C     IN THIS FORM WE CAN SEE THAT AS LONG AS THE SECONDARY ENERGY IN
C     THE CENTER-OF-MASS SYSTEM, EP(CM), IS MUCH LARGER THAN THE
C     ENERGY OF THE CENTER-OF-MASS, E(MM), THE CENTER-OF-MASS AND LAB
C     ENERGIES WILL BE ALMOST EQUAL - SIMILARLY FOR THE COSINE, IN
C     THIS CASE COS(LAB) AND COS(CM) WILL BE ALMOST EQUAL - HOWEVER,
C     FOR THE MF=6 DATA WE CANNOT ASSUME THAT THIS IS TRUE.
C
C     TO FIRST ORDER THE ANGULAR DEPENDENCE CAN BE IGNORED,
C
C     EP(LAB)   = E(MM) + EP(CM)
C
C     ALL THIS SAYS IS THAT TO FIRST ORDER THE EFFECT OF TRANSFORMING
C     FROM THE CM TO LAB SYSTEM IS TO INCREASE THE ENERGY OF THE
C     EMITTED PARTICLE IN THE CENTER-OF-MASS SYSTEM BY THE ENERGY OF
C     THE CENTER-OF-MASS TO DEFINE THE LAB ENERGY.
C
C     NOT ONLY THE ENERGY, BUT ALSO THE SPECTRA MUST BE TRANSFORMED.
C     STARTING FROM THE DOUBLE DIFFERENTIAL DATA IN THE LAB SYSTEM,
C     F(E,EP,COS(LAB)), WE CAN DEFINE THE LAB SCALAR SPECTRUM AS,
C
C     G0(E,EP) = INTEGRAL F(E,EP,COS(LAB))*D(COS(LAB))
C
C     THIS IS THE NORMAL CALCULATION DEFINED ABOVE AND USED FOR DATA
C     GIVEN IN THE LAB SYSTEM.
C
C     STARTING FROM DATA IN THE CENTER OF MASS SYSTEM F(E,EP,COS(CM)),
C     WE CAN USE THE RELATIONSHIP,
C
C     F(E,EP,COS(LAB))*D(COS(LAB)) = F(E,EP,COS(CM))*J*D(COS(LAB))
C
C     J         = SQRT(EP(LAB)/EP(CM)) - THE JACOBIAN
C
C               = E(MM)/EP(CM) + 1 + 2*COS(CM)*SQRT(E(MM)/EP(CM))
C
C     AS IN THE CASE OF THE ENERGY, IN THIS FORM WE CAN SEE THAT AS
C     LONG AS THE SECONDARY ENERGY IN THE CENTER-OF-MASS SYSTEM,
C     EP(CM), IS LARGE COMPARED TO THE CENTER-OF-MASS ENERGY, E(MM),
C     THE JACOBIAN IS ESSENTIALLY UNITY AND THE CENTER-OF-MASS AND LAB
C     SPECTRA WILL BE VERY SIMILAR - AGAIN, GENERALLY WE CANNOT
C     ASSUME THAT THIS IS TRUE FOR THE MF=6 SPECTRA.
C
C     THEREFORE WE CAN ALSO DEFINE THE LAB SCALAR SPECTRUM IN TERMS OF
C     THE CM SPECTRUM IN THE FORM,
C
C     G0(E,EP) = INTEGRAL F(E,EP,COS(CM))*J*D(COS(LAB))
C
C     CONSISTENT WITH THE ABOVE ASSUMPTION THAT THE ANGULAR DEPENDENCE
C     OF EP(LAB) CAN BE IGNORED THE JACOBIAN WILL NOT BE USED IN
C     PERFORMING THESE INTEGRALS - IN WHICH CASE THE INTEGRAL REDUCES
C     TO EXACTLY THE SAME FORM AS IF THE DATA WERE IN THE LAB SYSTEM.
C
C     IT SHOULD BE NOTED THAT SINCE IN THIS CASE THE MF=4 ANGULAR
C     DISTRIBUTIONS ARE GIVEN IN THE CM SYSTEM AND WHEN USED IN ANY
C     APPLICATION THEY WILL BE TRANSFORMED TO THE LAB SYSTEM - WHEN
C     THIS IS DONE THE JACOBIAN WILL BE APPLIED.
C
C     IN THIS CODE WHERE WE ARE MOSTLY CONCERNED WITH CONSERVING THE
C     NUMBER OF EMITTED PARTICLES AND AVERAGE ENERGIES THE NEUTRON
C     SPECTRA OUTPUT IN MF=5 WILL NOT BE COMPLETELY CONVERTED TO THE
C     LAB SYSTEM - ONLY FIRST ORDER CORRECTIONS WILL BE INCLUDED BY
C     INCREASING THE EMITTED PARTICLE ENERGY BY THE CENTER OF MASS
C     ENERGY, I.E., FOR A CENTER OF MASS SPECTRUM TABULATED AT CENTER
C     OF MASS ENERGIES EP(CM) THESE WILL ALL BE UNIFORMLY INCREASED
C     BY E(MM) TO ACCOUNT FOR THE CENTER OF MASS MOTION - THE SPECTRA
C     WILL NOT BE MODIFIED BY THE JACOBIAN FACTOR SQRT(EP(LAB)/EP(CM))
C     SINCE THIS WOULD REQUIRE A DETAILED TRANSFORMATION IN ENERGY AND
C     COS(THETA) SPACE - WHICH IS JUDGED NOT TO BE WORTH PERFORMING
C     WITHIN THE LIMITS OF WHERE THE OUTPUT FROM THIS CODE IS INTENDED
C     TO BE USED.
C
C     SINCE THE ANGULAR DISTRIBUTION IS ALWAYS OUTPUT IN THE SAME
C     SYSTEM AS WHICH IT IS GIVEN IN MF=6, NO TRANSFORMATION IS
C     REQUIRED FOR THE MF=4 OUTPUT.
C
C     WHEN USED IN LOW ENERGY APPLICATIONS (E.G., FISSION REACTORS) THE
C     HIGH ENERGY SPECTRA PRESENTED IN MF=6 WILL BE MOSTLY IMPORTANT
C     SIMPLY IN CONSERVING PARTICLES, (E.G., AS IN (N,2N)) AND ENERGY
C     AND THE DETAILS OF THE CORRELATION AND GROSS ENERGY SPECTRA WILL
C     NOTE PLAY THAT IMPORTANT A ROLE. IN THIS CASE THE SPECTRA OUTPUT
C     BY THIS PROGRAM IN MF=5 SHOULD BE ADEQUATE.
C
C     PLOTTAB FORMATTED OUTPUT
C     ==================================================================
C     THIS PROGRAM CONTAINS ROUTINES TO PRODUCE OUTPUT THAT CAN BE USED
C     AS INPUT TO THE PLOTTAB CODE TO OBTAIN GRAPHIC RESULTS.
C
C     THESE ROUTINES ARE DESIGNED ONLY FOR USE BY THE AUTHOR TO CHECK
C     THIS CODE. USERS ARE ASKED NOT TO ACTIVATE OR TRY TO USE THESE
C     ROUTINES. UNLESS YOU COMPLETELY UNDERSTAND THIS CODE THE RESULTS
C     CAN BE UNRELIABLE IF YOU ACTIVATE THESE ROUTINES.
C
C     INPUT FILES
C     ==================================================================
C     UNIT  DESCRIPTION
C     ----  -----------
C        2  INPUT LINES (BCD - 80 CHARACTERS/RECORD)
C       10  ORIGINAL ENDF/B DATA (BCD - 80 CHARACTERS/RECORD)
C
C     OUTPUT FILES
C     ==================================================================
C     UNIT  DESCRIPTION
C     ----  -----------
C        3  OUTPUT REPORT (BCD - 120 CHARACTERS/RECORD)
C       11  ENDF/B DATA MF=4 (BCD - 80 CHARACTERS/RECORD)
C       12  ENDF/B DATA MF=5 (BCD - 80 CHARACTERS/RECORD)
C       14  ENDF/B DATA MF=15 (BCD - 80 CHARACTERS/RECORD)
C       17  ENDF/B DATA MF=12 (BCD - 80 CHARACTERS/RECORD)
C       18  ENDF/B DATA MF=14 (BCD - 80 CHARACTERS/RECORD)
C       15  PLOTTAB INPUT PARAMETERS (BCD - 80 CHARACTERS/RECORD)
C       16  PLOTTAB FORMATTED OUTPUT (BCD - 80 CHARACTERS/RECORD)
C
C     SCRATCH FILES
C     ==================================================================
C     NONE
C
C     OPTIONAL STANDARD FILE NAMES (SEE SUBROUTINE FILIO1 AND FILIO2)
C     ==================================================================
C     UNIT  FILE NAME
C     ----  ----------
C       2   SIXPAK.INP
C       3   SIXPAK.LST
C      10   ENDFB.IN
C      11   ENDFB.MF4
C      12   ENDFB.MF5
C      14   ENDFB.M15
C      17   ENDFB.M12
C      18   ENDFB.M14
C      19   ENDFB.MT9
C      20   ENDFB.MT3
C      15   PLOTTAB.INP
C      16   PLOTTAB.CUR
C
C
C     INPUT PARAMETERS
C     ==================================================================
C     LINE  COLS.  DESCRIPTION
C     ----  -----  -----------
C        1   1-72  ENDF/B INPUT DATA FILENAME
C                  (STANDARD OPTION = ENDFB.IN)
C      2-N   1-6   MINIMUM MAT FOR REQUESTED RANGE
C            9-11  MINIMUM MT FOR REQUESTED RANGE
C           12-17  MAXIMUM MAT FOR REQUESTED RANGE
C           20-22  MAXIMUM MT FOR REQUESTED RANGE
C
C     LEAVE THE DEFINITION OF THE FILENAME BLANK - THE PROGRAM WILL
C     THEN USE THE STANDARD FILENAME (ENDFB.IN).
C
C     UP TO 100 MAT/MT RANGES MAY BE SPECIFIED. THE LIST OF RANGES IS
C     TERMINATED BY A BLANK LINE. IF THE FIRST INPUT LINE IS COMPLETELY
C     BLANK ALL DATA WILL BE PROCESSED.
C
C     EXAMPLE INPUT NO. 1
C     -------------------
C     PROCESS ALL MF=6 DATA ON AN ENDF/B TAPE. USE THE STANDARD INPUT
C     DATA FILENAME ENDFB.IN IN THIS CASE THE USER CAN EITHER EXPLICITLY
C     SPECIFY THE FILENAME AND MAT/MT RANGE BY THE FOLLOWING  2 INPUT
C     LINES,
C
C     ENDFB.IN
C          1    1  9999  999
C                            (BLANK LINE, TERMINATES REQUEST LIST)
C
C     OR BY INPUTTING 2 BLANK LINE = PROCESS EVERYTHING.
C
C     EXAMPLE INPUT NO. 2
C     -------------------
C     PROCESS BE-9, MAT=425, MT=16. READ THE DATA FROM ENDFB6\BE9.
C     IN THIS CASE THE FOLLOWING 3 INPUT LINES ARE REQUIRED,
C
C     ENDFBB6\BE9
C        425   16   425   16
C                            (BLANK LINE, TERMINATES REQUEST LIST)
C
C     EXAMPLE INPUT NO. 3
C     -------------------
C     PROCESS ALL MT=16 (N,2N) DATA. THIS CAN BE DONE BY SPECIFYING THE
C     MAXIMUM MAT RANGE = 1 TO 9999, AND MT=16 FOR THE MINIMUM AND
C     MAXIMUM MT RANGE. READ THE DATA FROM ENDFB6\K300. IN THIS CASE
C     CASE THE FOLLOWING 3 INPUT LINES ARE REQUIRED,
C
C     ENDFB6\K300
C          1   16  9999   16
C                            (BLANK LINE, TERMINATES REQUEST LIST)
C
C=======================================================================
      INCLUDE 'implicit.h'
C-----08/08/2012 DEFINE CODE NAME
      CHARACTER*8 CODENAME
      COMMON/NAMECODE/CODENAME
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      CHARACTER*4 LABEL
      CHARACTER*66 LABOUT
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/DUMHEAD/ZERO1,ZERO2,L10,L20,N10,N20
      COMMON/TYPLAW/LAWIN(8,13),LAWOUT(8,13),NOUT(4,13),NYIELD(8,2),
     1 MAXLEG(8),MAXMU(8),NANGLE(8,3),NDIST(8,3)
      COMMON/COPC/LABEL(17)
      COMMON/COPI/ILABEL(3)
      COMMON/PARTIO/AWRET,IVERSE,IZAI,IZAT,IZAP,NZAT
      COMMON/MFOUT/MF3,MF4,MF5,MF9,MF12,MF14,MF15,NOSQ3,NOSQ4,NOSQ5,
     1 NOSQ9,NOSQ12,NOSQ14,NOSQ15
      COMMON/HIGHE45/N2X4,N2X5,I2X4,I2X5
      COMMON/LEADMT5/C1MT5 ,C2MT5 ,L1MT5 ,L2MT5 ,N1MT5 ,N2MT5
      DATA LSTMAT/-9999/
      DATA LABOUT/' Program SIXPAK (2021-1) Output'/
C-----08/08/2012 DEFINE CODE NAME
      CODENAME = 'SIXPAK  '
C-----INITIALIZE TIMER
      CALL TIMER
c-----------------------------------------------------------------------
C
C     DEFINE ALL I/O UNITS AND OPTIONALLY DEFINE FILE NAMES.
C
c-----------------------------------------------------------------------
      CALL FILIO1
c-----------------------------------------------------------------------
C
C     IDENTIFY PROGRAM
C
c-----------------------------------------------------------------------
      WRITE(OUTP,180)
      WRITE(*   ,180)
c-----------------------------------------------------------------------
C
C     DEFINE DUMMY (= 0) PARAMETERS FOR OUTPUT
C
c-----------------------------------------------------------------------
      ZERO1=0.0D+00
      ZERO2=0.0D+00
      L10=0
      L20=0
c-----2019/6/30 - Added for max. energy test
      N2X4 = -9999
      N2X5 = -9999
      I2X4 = 0
      I2X5 = 0
c-----------------------------------------------------------------------
C
C     SET FOR MINIMUM OUTPUT = 1 INTERPOLATION RANGE, 2 POINTS
C
c-----------------------------------------------------------------------
      N10=1
      N20=2
c-----------------------------------------------------------------------
C
C     READ ALL INPUT PARAMETERS.
C
c-----------------------------------------------------------------------
      CALL READIN
c-----------------------------------------------------------------------
C
C     DEFINE OUTPUT FILE NUMBER AND WRITE TAPE LABELS FOR ENDF/B
C     OUTPUT FILES.
C
c-----------------------------------------------------------------------
      MF3 = 3
      MF4 = 4
      MF5 = 5
      MF9 = 9
      MF12=12
      MF14=14
      MF15=15
      CALL OUTLAB(OTAPE4,LABOUT,4000)
      CALL OUTLAB(OTAPE5,LABOUT,4000)
      CALL OUTLAB(OTAPE12,LABOUT,4000)
      CALL OUTLAB(OTAPE14,LABOUT,4000)
      CALL OUTLAB(OTAPE15,LABOUT,4000)
      CALL OUTLAB(OTAPE9 ,LABOUT,4000)
c-----2020/2/119 - Added MF=3
      CALL OUTLAB(OTAPE3 ,LABOUT,4000)
      NOSQ3 =1
      NOSQ4 =1
      NOSQ5 =1
      NOSQ9 =1
      NOSQ12=1
      NOSQ14=1
      NOSQ15=1
c-----------------------------------------------------------------------
C
C     INITIALIZE COUNTS.
C
c-----------------------------------------------------------------------
      DO 30 J=1,8
      MAXLEG(J)=0
      MAXMU(J)=0
      NYIELD(J,1)=0
      NYIELD(J,2)=0
      DO 10 I=1,3
      NANGLE(J,I)=0
      NDIST(J,I)=0
   10 CONTINUE
      DO 20 I=1,13
      LAWIN(J,I)=0
      LAWOUT(J,I)=0
   20 CONTINUE
   30 CONTINUE
      DO 50 J=1,4
      DO 40 I=1,13
      NOUT(J,I)=0
   40 CONTINUE
   50 CONTINUE
c-----------------------------------------------------------------------
C
C     START.
C
c-----------------------------------------------------------------------
C-----LIST TAPE LABEL
      OTAPE=0
      CALL COPYL
      WRITE(OUTP,190) LABEL,ILABEL(1)
      WRITE(*   ,190) LABEL,ILABEL(1)
C-----FIND SECTIONS OF MF=6
   60 CALL CONTI
C-----NEXT TAPE AT END OF DATA.
      IF(MTH.gt.0) go to 70
      IF(MATH.lt.0) then
c-----------------------------------------------------------------------
C
c     End of Run
c
c-----------------------------------------------------------------------
c-----Print MT summary if any preceeding MAT
      if(LSTMAT.gt.0) then
      CALL MAXIE3(1)
      endif
      go to 160
      endif
      go to 60
c-----------------------------------------------------------------------
C
c     Next MT
c
c-----------------------------------------------------------------------
C-----INITIALIZE ENDF/B FORMAT VERSION FOR EACH NEW MAT
   70 IF(MATH.EQ.LSTMAT) GO TO 80
c-----Print MT summary if any preceeding MAT
      if(LSTMAT.gt.0) then
      CALL MAXIE3(1)
      endif
      LSTMAT=MATH
      IVERSE=0
      N2MT5 = 0 ! 2020/1/20 - added MF/MT=3/5 energy count.
c-----Initialize MT list
      CALL MAXIE0
C-----HAS THIS MAT BEEN REQUESTED.
   80 MYWAY=IWANT(MATH,MTH)
      IF(MYWAY.lt.0) go to 160
      IF(MYWAY.eq.0) go to 150
C-----DEFINE ENDF/B FORMAT VERSION AND INCIDENT PARTICLE IF MF=1, MT=451
      IF(MFH.EQ.1.AND.MTH.EQ.451) GO TO 90
C-----2020/2/19 - SAVE MF/MT=5/3 For Charged Particle MF=3 Output.
      IF(MFH.EQ.3) then
      IF(MTH.EQ.5) then
      CALL FILE3  ! Save MF/MT=3/5 Cross Section
      ENDIF
      go to 130   ! Skip to end section
      ENDIF
C-----SKIP IF NOT MF=6
      IF(MFH.lt.6) go to 140
      IF(MFH.eq.6) go to 100
      go to 150
c-----------------------------------------------------------------------
C
C     PROCESS COMMENT SECTION (MF=1, MT=451)
C
c-----------------------------------------------------------------------
   90 CALL FILE1
C-----SKIP MATERIAL IF NOT ENDF/B-VI (NO MF=6 DATA).
      IF(IVERSE.ne.6) go to 150
      go to 140
c-----------------------------------------------------------------------
C
C     PROCESS ONE SECTION OF MF=6 DATA
C
c-----------------------------------------------------------------------
c-----2019/4/23 - MT=5 is not allowed in MF=4 or 5 = SKIP
c-----2019/6/30 - WARNING - but translate MT=5
  100 if(MTH.eq.5) then
      write(outp,110)
      write(*   ,110)
  110 FORMAT(1x,78('-')/
     1 ' WARNING: MT=5 is ALLOWED in MF=6, but NOT in MF=4 or 5'/
     2 '          (see ENDF-102). Strictly for diagnostic purposes'/
     3 '          this code will Translate MF=6 Data to MF=3, 4 and 5'/
     4 '          data - but be WARNED - the MF=3 or 4 or 5 results'/
     5 '          MUST NOT be used in any REAL APPLICATIONS.'
     6 /1x,78('-'))
c     go to 110
c-----2019/6/30 - WARNING - but translate MT=5
      endif
C-----HAS THIS MAT/MT BEEN REQUESTED.
      MYWAY=IWANT(MATH,MTH)
      IF(MYWAY.NE.2) GO TO 130
C-----IF ENDF/B FORMAT VERSION IS NOT DEFINED (NO MF/MT=1/451) ASSUME
C-----ENDF/B-VI WITH NEUTRONS INCIDENT.
      IF(IVERSE.GT.0) GO TO 120
      IVERSE=6
      IZAI=1
C-----PROCESS SECTION OF MF=6 DATA.
  120 CALL FILE6
      GO TO 60
c-----------------------------------------------------------------------
C
C     SKIP.
C
c-----------------------------------------------------------------------
C-----SKIP MT.
  130 CALL SKIPS
      GO TO 60
C-----SKIP MF.
  140 CALL SKIPF
      GO TO 60
C-----SKIP MAT.
  150 CALL SKIPM
      GO TO 60
c-----------------------------------------------------------------------
C
C     END OF RUN.
C
c-----------------------------------------------------------------------
C-----PRINT SUMMARY OF TABLE SIZES, LAW TYPES AND INTERPOLATION.
  160 WRITE(OUTP,200) LAWIN
      WRITE(OUTP,210) LAWOUT
      WRITE(OUTP,220) NYIELD
      WRITE(OUTP,230) NANGLE,MAXLEG,MAXMU
      WRITE(OUTP,240) NDIST
      WRITE(OUTP,250)
      WRITE(OUTP,260) NOUT
      WRITE(*   ,200) LAWIN
      WRITE(*   ,210) LAWOUT
      WRITE(*   ,220) NYIELD
      WRITE(*   ,230) NANGLE,MAXLEG,MAXMU
      WRITE(*   ,240) NDIST
      WRITE(*   ,250)
      WRITE(*   ,260) NOUT
C-----END OF ENDF/B OUTPUT.
      MATH=-1
      CALL CONT4(0)
      CALL CONT5(0)
      CALL CONT12(0)
      CALL CONT14(0)
      CALL CONT15(0)
      CALL CONT9 (0)
c-----2020/3/19 - Added MF=3
      CALL CONT3
c-----Print final WARNING if data not tabulated to same Maximum Energy
      CALL MAXIE4(1)
c-----End of run - Normal
  170 CALL ENDIT
      GO TO 170   ! cannot get to here
  180 FORMAT(' Process ENDF/B Double Differential Data - MF=6',
     1 ' (SIXPAK 2021-1)'/1X,78('='))
  190 FORMAT(1X,78('=')/' Terminology'/1X,78('-')/
     1 ' LCT  = Reference System (Lab or Center-of-Mass)'/
     2 ' LIP  = Product Modifier, e.g., for Isomeric States'/
     3 ' LAW  = Representation of Data - see, List at End of Output'/
     4 ' LANG = 1     = Legendre     (LAW 1)'/
     5 '      = 2     = Kalbach-Mann (LAW 1)'/
     6 '      = 11-15 = Tabulated    (LAW 1)'/
     7 '      = 0     = Legendre     (LAW 2)'/
     8 '      = 11-15 = Tabulated    (LAW 2)'/
     9 ' LTP  = 1-2   = Legendre     (LAW 5)'/
     A '      = 11-15 = Tabulated    (LAW 5)'/
     1 ' LEP  = Secondary Energy Interpolation Type(1 to 5)'/
     2 1X,78('=')/' Tape Label'/1X,78('-')/1X,16A4,A2,I4)
  200 FORMAT(1X,78('=')/' Laws by Incident Particle'/1X,78('-')/
     1 ' Law Number and Definition  ',
     2 ' Photon    n     p     d     t  He-3  He-4 Other'/1X,78('-')/
     3 ' (0) Unknown................',8I6/
     4 ' (1) Continuum Energy-Angle'/
     5 '      Legendre..............',8I6/
     6 '      Kalbach-Mann..........',8I6/
     7 '      Tabulated.............',8I6/
     8 ' (2) Discrete 2 Body'/
     9 '      Legendre..............',8I6/
     A '      Tabulated.............',8I6/
     1 ' (3) Isotropic Discrete.....',8I6/
     2 ' (4) Discrete 2 Body Recoil.',8I6/
     3 ' (5) Charged Particle Elastic'/
     4 '      Legendre..............',8I6/
     5 '      Tabulated.............',8I6/
     6 ' (6) n-Body Phase-Space.....',8I6/
     7 ' (7) Laboratory Angle-Energy',8I6/
     8 ' Not 0 to 7 (WARNING if Any)',8I6)
  210 FORMAT(1X,78('=')/' Laws by Emitted Particle'/1X,78('-')/
     1 ' Law Number and Definition  ',
     2 ' Photon    n     p     d     t  He-3  He-4 Other'/1X,78('-')/
     3 ' (0) Unknown................',8I6/
     4 ' (1) Continuum Energy-Angle'/
     5 '      Legendre..............',8I6/
     6 '      Kalbach-Mann..........',8I6/
     7 '      Tabulated.............',8I6/
     8 ' (2) Discrete 2 Body'/
     9 '      Legendre..............',8I6/
     A '      Tabulated.............',8I6/
     1 ' (3) Isotropic Discrete.....',8I6/
     2 ' (4) Discrete 2 Body Recoil.',8I6/
     3 ' (5) Charged Particle Elastic'/
     4 '      Legendre..............',8I6/
     5 '      Tabulated.............',8I6/
     6 ' (6) n-Body Phase-Space.....',8I6/
     7 ' (7) Laboratory Angle-Energy',8I6/
     8 ' Not 0 to 7 (WARNING if Any)',8I6)
  220 FORMAT(1X,78('-')/' Summary of Emitted Particle Yields'/
     1 1X,78('-')/
     1 ' Energy Independent.........',8I6/
     2 ' Energy Dependent...........',8I6)
  230 FORMAT(1X,78('-')/' Summary of Angular Distributions'/1X,78('-')/
     1 ' Isotropic..................',8I6/
     2 ' Nonisotropic...............',8I6/
     3 ' Mixed......................',8I6/1X,78('-')/
     4 ' Maximum Legendre Order.....',8I6/
     5 ' Maximum Number of Cosines..',8I6)
  240 FORMAT(1X,78('-')/' Summary of Energy Distributions'/1X,78('-')/
     7 ' Continuous.................',8I6/
     8 ' Discrete...................',8I6/
     9 ' Mixed......................',8I6/1X,78('-'))
  250 FORMAT(1X,78('=')/' Summary of Incident Neutron',
     1 ' with Photon or Neutron Emitted Data'/1X,78('-')/
     1 ' Law Number and Definition  ',
     2 ' Output        Not Output '/1X,78('-')/
     3 '                            ',
     4 ' Photon    n   Photon    n'/1X,78('-'))
  260 FORMAT(
     3 ' (0) Unknown................',2I6,2X,2I6/
     4 ' (1) Continuum Energy-Angle'/
     5 '      Legendre..............',2I6,2X,2I6/
     6 '      Kalbach-Mann..........',2I6,2X,2I6/
     7 '      Tabulated.............',2I6,2X,2I6/
     8 ' (2) Discrete 2 Body'/
     9 '      Legendre..............',2I6,2X,2I6/
     A '      Tabulated.............',2I6,2X,2I6/
     1 ' (3) Isotropic Discrete.....',2I6,2X,2I6/
     2 ' (4) Discrete 2 Body Recoil.',2I6,2X,2I6/
     3 ' (5) Charged Particle Elastic'/
     4 '      Legendre..............',2I6,2X,2I6/
     5 '      Tabulated.............',2I6,2X,2I6/
     6 ' (6) n-Body Phase-Space.....',2I6,2X,2I6/
     7 ' (7) Laboratory Angle-Energy',2I6,2X,2I6/
     8 ' Not 0 to 7 (WARNING if Any)',2I6,2X,2I6/
     9 1X,78('=')/' End of Run')
      END
      INTEGER*4 FUNCTION IWANT(MATX,MTX)
C=======================================================================
C
C     DEFINE WHETHER OR NOT MATX/MTX HAS BEEN REQUESTED.
C
C     IWANT = -1 = BEYOND ALL REQUESTED RANGES = END OF RUN
C           =  0 = MAT NOT REQUESTED
C           =  1 = MAT REQUESTED - MAT/MT NOT REQUESTED.
C           =  2 = MAT/MT REQUESTED
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/MATZA/MATMIN(101),MTMIN(101),MATMAX(101),MTMAX(101),NMAT
C-----INITIALIZE TO BEYOND ALL REQUESTS.
      IWAY=-1
      DO 10 I=1,NMAT
      IF(MATX.GT.MATMAX(I)) GO TO 10
C-----MAT NOT BEYOND ALL REQUESTS.
      IF(IWAY.LT.0) IWAY=0
      IF(MATX.LT.MATMIN(I)) GO TO 10
C-----MAT REQUESTED.
      IF(IWAY.LT.1) IWAY=1
      IF(MTX.GE.MTMIN(I).AND.MTX.LE.MTMAX(I)) GO TO 20
   10 CONTINUE
      IWANT=IWAY
      RETURN
C-----MAT/MT REQUESTED.
   20 IWANT=2
      RETURN
      END
      SUBROUTINE READIN
C=======================================================================
C
C     READ REQUESTED MAT/MT RANGES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*72 NAMEIN
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/IOSTATUS/ISTAT1,ISTAT2
      COMMON/MATZA/MATMIN(101),MTMIN(101),MATMAX(101),MTMAX(101),NMAT
      COMMON/NAMEX/NAMEIN
c-----------------------------------------------------------------------
C
C     READ INPUT DATA FILENAME - IF BLANK USE STANDARD FILENAME
C
c-----------------------------------------------------------------------
C-----INPUT DATA.
      IF(ISTAT1.EQ.1) GO TO 20
      READ(INP,10,END=20,ERR=20) NAMEIN
   10 FORMAT(A72)
      IF(NAMEIN.EQ.' ') NAMEIN = 'ENDFB.IN'
      GO TO 30
C-----USE DEFAULT FILENAME
   20 NAMEIN = 'ENDFB.IN'
      ISTAT1 = 1
C-----PRINT FINAL FILENAME
   30 WRITE(OUTP,40) NAMEIN
      WRITE(*   ,40) NAMEIN
   40 FORMAT(
     1 ' ENDF/B Input Data Filename'/1X,A72/1X,78('-'))
c-----------------------------------------------------------------------
C
C     OPEN ENDF/B INPUT DATA FILE
C
c-----------------------------------------------------------------------
      CALL FILIO2
c-----------------------------------------------------------------------
C
C     TERMINATE IF ERROR OPENING ENDF/B DATA FILE
C
c-----------------------------------------------------------------------
      IF(ISTAT2.EQ.1) THEN
      WRITE(OUTP,50) NAMEIN
      WRITE(   *,50) NAMEIN
   50 FORMAT(//' ERROR - Opening ENDF/B data file'/1X,A72//)
      CALL ENDERROR
      ENDIF
c-----------------------------------------------------------------------
C
C     READ ALL DATA RANGES.
C
c-----------------------------------------------------------------------
      WRITE(OUTP,130)
      IF(ISTAT1.EQ.1) GO TO 70
      READ(INP,60,END=70,ERR=70) MATMIN(1),MTMIN(1),MATMAX(1),MTMAX(1)
   60 FORMAT(I6,2X,I3,I6,2X,I3)
      GO TO 80
C-----DEFINE DEFAULT VALUES
   70 ISTAT1    = 1
      MATMIN(1) = 0
      MTMIN(1)  = 0
      MATMAX(1) = 0
      MTMAX(1)  = 0
c-----Check input and define defaults
   80 IF(MATMIN(1).LE.0) MATMIN(1)=0
      IF(MTMIN (1).LE.0) MTMIN (1)=0
      IF(MATMIN(1).GT.0.OR.MTMIN(1).GT.0.OR.
     1   MATMAX(1).GT.0.OR.MTMAX(1).GT.0) GO TO 90
      MATMAX(1)=9999
      MTMAX(1)=999
      WRITE(OUTP,150) MATMIN(1),MTMIN(1),MATMAX(1),MTMAX(1)
      NMAT=2
      GO TO 110
c-----Check input and define defaults
   90 IF(MATMAX(1).LT.MATMIN(1)) MATMAX(1)=MATMIN(1)
      IF(MATMAX(1).LE.0) MATMAX(1)=9999
      IF(MTMAX (1).LE.0) MTMAX (1)=999
      WRITE(OUTP,140) MATMIN(1),MTMIN(1),MATMAX(1),MTMAX(1)
      DO 100 NMAT=2,101
      IF(ISTAT1.EQ.1) GO TO 110
      READ(INP,60,END=110,ERR=110) MATMIN(NMAT),MTMIN(NMAT),
     1 MATMAX(NMAT),MTMAX(NMAT)
      IF(MATMIN(NMAT).LE.0.AND.
c-----Check input and define defaults
     1 MTMIN(NMAT).LE.0.AND.MATMAX(NMAT).LE.0.AND.
     2 MTMAX(NMAT).LE.0) GO TO 110
      IF(MATMIN(NMAT).LE.0) MATMIN(NMAT)=0
      IF(MTMIN (NMAT).LE.0) MTMIN (NMAT)=0
      IF(MATMAX(NMAT).LT.MATMIN(NMAT)) MATMAX(NMAT)=MATMIN(NMAT)
      IF(MATMAX(NMAT).LE.0) MATMAX(NMAT)=9999
      IF(MTMAX (NMAT).LE.0) MTMAX (NMAT)=999
      WRITE(OUTP,140) MATMIN(NMAT),MTMIN(NMAT),
     1                MATMAX(NMAT),MTMAX(NMAT)
  100 CONTINUE
      GO TO 120
  110 NMAT=NMAT-1
      RETURN
c-----------------------------------------------------------------------
C
C     ERROR MESSAGE SECTION. PRINT ERROR IN INPUT MESSAGE AND TERMINATE.
C
c-----------------------------------------------------------------------
C-----OVER 100 MAT OR ZA RANGES.
  120 WRITE(OUTP,160)
c-----2018/1/22 - Aded on-line
      WRITE(*   ,160)
      CALL ENDERROR
  130 FORMAT(' Requested Ranges'/1X,78('-')/
     1 '    Minimum    Maximum   '/
     2 '    MAT  MT    MAT  MT'/1X,78('-'))
  140 FORMAT(I7,I4,I7,I4)
  150 FORMAT(I7,I4,I7,I4,' (Default Option)')
  160 FORMAT('  Over 100 Ranges----Execution Terminated')
      END
      SUBROUTINE OUTER
C=======================================================================
C
C     SET OUTPUT FLAG IF NEUTRON INCIDENT AND EITHER PHOTON OR
C     NEUTRON OUT.
C
C     IMOUT = 0 - NO OUTPUT
C           = 1 - PHOTON SPECTRA OUTPUT
C           = 2 - NEUTRON ANGULAR DISTRIBUTIONS
C           = 3 - NEUTRON ANGULAR DISTRIBUTIONS AND SPECTRA
C           = 4 - MF/MT=3/5 PARTIAL CROSS SECTIONS
C                 (Only n', p, d, t, he3, a = All Continuum)
C
C     2003/01/30 - ADDED CHARGED PARTICLE ANGULAR DISTRIBUTION OUTPUT
C     2020/02/20 - ADDED MF/MT=3/5 Partial Cross Sections
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/PARTIO/AWRET,IVERSE,IZAI,IZAT,IZAP,NZAT
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
      COMMON/OUTME/IMOUT
C-----OUTPUT ONLY FOR NEUTRON INCIDENT.
      IMOUT=0
      IF(IZAI.NE.1) GO TO 30
C-----FOR LAW=2 OR 3 - NEUTRON ANGULAR OUTOUT IS POSSIBLE.
      IF(LAW.EQ.2.OR.LAW.EQ.3) GO TO 10
C-----FOR LAW=1 OR 7 - NEUTRON ANGULAR/SPECTRUM OR PHOTON SPECTRUM
C-----OUTPUT POSSIBLE
      IF(LAW.EQ.1.OR.LAW.EQ.7) GO TO 20
C-----NO OTHER OUTPUT POSSIBLE.
      GO TO 30
C-----LAW=2 OR 3 - ONLY NEUTRON ANGULAR OUTPUT POSSIBLE.
   10 IF(IZAP.EQ.1) IMOUT=2
C-----CHARGED PARTICLES LEVELS ONLY
      IF(MTH.LT.600.OR.MTH.GT.849) GO TO 30
      IF(IZAP.EQ.1001.OR.          ! PROTON
     1   IZAP.EQ.1002.OR.          ! DEUTERON
     2   IZAP.EQ.1003.OR.          ! TRITON
     3   IZAP.EQ.2003.OR.          ! HE3
     4   IZAP.EQ.2004) IMOUT = 2   ! ALPHA
      GO TO 30
C-----LAW=1 OR 7 - BOTH ANGULAR AND SPECTRUM OUTPUT POSSIBLE.
   20 IF(IZAP.EQ.0) IMOUT=1
      IF(IZAP.EQ.1) IMOUT=3
C-----CHARGED PARTICLES LEVELS ONLY
      IF(MTH.LT.600.OR.MTH.GT.849) GO TO 30
      IF(IZAP.EQ.1001.OR.          ! PROTON
     1   IZAP.EQ.1002.OR.          ! DEUTERON
     2   IZAP.EQ.1003.OR.          ! TRITON
     3   IZAP.EQ.2003.OR.          ! HE3
     4   IZAP.EQ.2004) IMOUT = 2   ! ALPHA
   30 RETURN
      END
      SUBROUTINE NEXT1
C=======================================================================
C
C     IDENTIFY SECTION.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 ZAHOLI,ZAHOLT,ZAHOLP
      CHARACTER*4 SYS,NOYES
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/PARTIO/AWRET,IVERSE,IZAI,IZAT,IZAP,NZAT
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
      COMMON/OUTME/IMOUT
      COMMON/LISCOM/LISO
      COMMON/HOLLY1/ZAHOLI(10),ZAHOLT(12),ZAHOLP(10)
      DIMENSION SYS(4),NOYES(4)
      DATA SYS/'Lab ','cm  ','cm  ','ERR '/
      DATA LSTZAI/-9999/
      DATA LSTZAT/-9999/
      DATA NOYES/'    ','Yes ','Yes ','Yes '/
c-----------------------------------------------------------------------
C
C     IDENTIFY SECTION OF DATA.
C
c-----------------------------------------------------------------------
C-----TITLE FOR EACH NEW PROJECTILE/TARGET
      IF(LSTZAI.EQ.IZAI.AND.LSTZAT.EQ.IZAT) GO TO 10
      WRITE(OUTP,100)
      WRITE(*   ,100)
      LSTZAI=IZAI
      LSTZAT=IZAT
C-----DEFINE PROJECTILE, TARGET AND EMITTED.
   10 CALL ZAHOL(IZAI,ZAHOLI)
      CALL ZAHOL(IZAP,ZAHOLP)
c-----2020/3/21 - Added Target Isomer
      CALL ZAHOLM(IZAT,LISO,ZAHOLT)
C-----DEFINE SYSTEM.
      ILCT=LCTIN
      IF(LCT.LT.1.OR.LCT.GT.3) ILCT=4
c-----------------------------------------------------------------------
C
C     LAW DEPENDENT OUTPUT.
C
c-----------------------------------------------------------------------
      IF(LAW.NE.1) GO TO 20
      WRITE(OUTP,70) ZAHOLI,ZAHOLT,ZAHOLP,MATH,MTH,
     1 SYS(ILCT),LIP,LAW,LANG,LEP,NOYES(IMOUT+1)
      WRITE(*   ,70) ZAHOLI,ZAHOLT,ZAHOLP,MATH,MTH,
     1 SYS(ILCT),LIP,LAW,LANG,LEP,NOYES(IMOUT+1)
      GO TO 50
   20 IF(LAW.NE.2) GO TO 30
      WRITE(OUTP,80) ZAHOLI,ZAHOLT,ZAHOLP,MATH,MTH,
     1 SYS(ILCT),LIP,LAW,LANG,NOYES(IMOUT+1)
      WRITE(*   ,80) ZAHOLI,ZAHOLT,ZAHOLP,MATH,MTH,
     1 SYS(ILCT),LIP,LAW,LANG,NOYES(IMOUT+1)
      GO TO 50
   30 IF(LAW.NE.5) GO TO 40
      WRITE(OUTP,80) ZAHOLI,ZAHOLT,ZAHOLP,MATH,MTH,
     1 SYS(ILCT),LIP,LAW,LTP,NOYES(IMOUT+1)
      WRITE(*   ,80) ZAHOLI,ZAHOLT,ZAHOLP,MATH,MTH,
     1 SYS(ILCT),LIP,LAW,LTP,NOYES(IMOUT+1)
      GO TO 50
   40 WRITE(OUTP,60) ZAHOLI,ZAHOLT,ZAHOLP,MATH,MTH,
     1 SYS(ILCT),LIP,LAW,NOYES(IMOUT+1)
      WRITE(*   ,60) ZAHOLI,ZAHOLT,ZAHOLP,MATH,MTH,
     1 SYS(ILCT),LIP,LAW,NOYES(IMOUT+1)
C-----PRINT ERROR IF SYSTEM IF NOT DEFINED.
   50 IF(ILCT.EQ.4) WRITE(OUTP,90) LCTIN
      IF(ILCT.EQ.4) WRITE(*   ,90) LCTIN
      RETURN
   60 FORMAT(1X,10A1,1X,12A1,1X,10A1,I5,I4,1X,A3,I4,I4,12X,A4)
   70 FORMAT(1X,10A1,1X,12A1,1X,10A1,I5,I4,1X,A3,I4,I4,2I5,2X,A4)
   80 FORMAT(1X,10A1,1X,12A1,1X,10A1,I5,I4,1X,A3,I4,I4,I5,7X,A4)
   90 FORMAT(1X,78('-')/
     1 ' ERROR: LCT=',I6,' (MUST be 1=Lab or 2 or 3=cm)'/
     1 1X,78('-'))
  100 FORMAT(1X,78('=')/' Projectile   Target      Emitted    MAT  MT',
     1 ' LCT LIP LAW LANG  LEP  ENDF/B'/58X,'LTP       Output'/
     2 1X,78('='))
      END
      INTEGER*4 FUNCTION MYPART(IZAX)
C=======================================================================
C
C     DEFINE TYPE OF PROJECTILE OR EMITTED PARTICLE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      DIMENSION IZATAB(7)
C-----GAMMA, N, D, T, HE-3, HE-4.
      DATA IZATAB/
     1   0,   1, 1001, 1002, 1003, 2003, 2004/
      DO 10 IX=1,7
      IF(IZAX.EQ.IZATAB(IX)) GO TO 20
   10 CONTINUE
C-----ALL OTHERS.
      IX=8
   20 MYPART=IX
      RETURN
      END
      INTEGER*4 FUNCTION MYTERP(IPT,NBT,INT,IR)
C=======================================================================
C
C     DEFINE INTERPOLATION LAW FOR POINT IPT
C
C     INSURE IT IS IN THE RANGE 1 - 5
C
C=======================================================================
      INCLUDE 'implicit.h'
      DIMENSION NBT(IR),INT(IR)
      DO 10 I=1,IR
      IF(IPT.LE.NBT(I)) GO TO 20
   10 CONTINUE
      I=IR
   20 INTX=INT(I)
      IF(INTX.GT.10) INTX=INTX-10*(INTX/10)
      IF(INTX.LT.1.OR.INTX.GT.5) INTX=2
      MYTERP=INTX
      RETURN
      END
      SUBROUTINE STATS
C=======================================================================
C
C     DEFINE INDEX TO STATISTICS TABLES AND INCREMENT
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/TYPLAW/LAWIN(8,13),LAWOUT(8,13),NOUT(4,13),NYIELD(8,2),
     1 MAXLEG(8),MAXMU(8),NANGLE(8,3),NDIST(8,3)
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
      COMMON/PARTIO/AWRET,IVERSE,IZAI,IZAT,IZAP,NZAT
      COMMON/OUTME/IMOUT
c-----------------------------------------------------------------------
C
C     Check Law
C
c-----------------------------------------------------------------------
C-----CHECK FOR ILLEGAL LAW.
      IF(LAW.LT.0.OR.LAW.GT.7) GO TO 90
      LAWP1=LAW+1
      GO TO (10,20,30,40,50,60,70,80),LAWP1
C-----LAW=0 = 1
   10 MYTYPE=1
      GO TO 100
C-----LAW=1 = 2 - LANG = 1  (LEGENDRE)
C-----      = 3 -      = 2  (KALBACH-MANN)
C-----      = 4 - OTHERWISE (TABULATED)
   20 MYTYPE=4
      IF(LANG.EQ.1) MYTYPE=2
      IF(LANG.EQ.2) MYTYPE=3
      GO TO 100
C-----LAW=2 = 5 - LANG = 0  (LEGENDRE)
C-----      = 6 - OTHERWISE (TABULATED)
   30 MYTYPE=6
      IF(LANG.EQ.0) MYTYPE=5
      GO TO 100
C-----LAW=3 = 7
   40 MYTYPE=7
      GO TO 100
C-----LAW=4 = 8
   50 MYTYPE=8
      GO TO 100
C-----LAW=5 = 9 - LTP = UP TO 2 (LEGENDRE)
C-----      =10 - OTHERWISE     (TABULATED)
   60 IL=10
      IF(LTP.LE.2) IL=9
      MYTYPE=IL
      GO TO 100
C-----LAW=6 =11
   70 MYTYPE=11
      GO TO 100
C-----LAW=7 =12
   80 MYTYPE=12
      GO TO 100
C-----ERROR.
   90 MYTYPE=13
C-----TALLY BY INCIDENT AND EMITTED PARTICLE.
  100 LAWIN(IPI,MYTYPE)=LAWIN(IPI,MYTYPE)+1
      LAWOUT(IPO,MYTYPE)=LAWOUT(IPO,MYTYPE)+1
c-----------------------------------------------------------------------
C
C     TALLY ENDF/B OUTPUT AND NO OUTPUT.
C
c-----------------------------------------------------------------------
C-----ONLY TALLY FOR INCIDENT NEUTRN DATA.
      IF(IZAI.NE.1) RETURN
C-----NEUTRON IN - PHOTON OUT.
      IF(IZAP.EQ.0) GO TO 110
C-----NEUTRON IN - NEUTRON OUT - OTHERWISE NO TALLY.
      IF(IZAP.NE.1) GO TO 120
C-----NEUTRON IN AND OUT.
      IF(IMOUT.GE.2) NOUT(2,MYTYPE)=NOUT(2,MYTYPE)+1
      IF(IMOUT.LT.2) NOUT(4,MYTYPE)=NOUT(4,MYTYPE)+1
      GO TO 120
C-----NEUTRON IN AND PHOTON OUT.
  110 IF(IMOUT.EQ.1) NOUT(1,MYTYPE)=NOUT(1,MYTYPE)+1
      IF(IMOUT.NE.1) NOUT(3,MYTYPE)=NOUT(3,MYTYPE)+1
  120 RETURN
      END
      SUBROUTINE FILE1
C=======================================================================
C
C     READ MF=1, MT-451 TO DEFINE ENDF/B FORMAT VERSION AND INCIDENT
C     PARTICLE.
C
C     First Record has already been read.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      COMMON/PARTIO/AWRET,IVERSE,IZAI,IZAT,IZAP,NZAT
      COMMON/LISCOM/LISO
C-----INITIALIZE INCIDENT PARTICLE TO NEUTRON.
      IZAI=1
      LISO = 0
c
c     Read Second Line
c
C-----HEAD LINE OF SECTION HAS BEEN READ. READ NEXT LINE AND DETERMINE
C-----IF THIS IS THE ENDF/B-IV, V OR VI FORMAT.
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      IVERSE=4
      LISOX= L2            ! Save potential target isomer number
C-----CHECK FOR ENDF/B-IV.
C     IV N1 > 0, N2 = 0
      IF(N1.GT.0.AND.N2.EQ.0) GO TO 10
C-----NOT ENDF/B-IV. READ THIRD LINE.
      N2X=N2
c
c     Read Third Line
c
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      N1X=N1
      IVERSE=5
C-----CHECK FOR ENDF/B-V FORMAT.
      IF(N2X.LE.0) GO TO 10
C-----ENDF/B-VI FORMAT. READ FOURTH LINE.
c
c     Read Third Line
c
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      IVERSE=6
      LISO   = LISOX
C-----DEFINE INCIDENT PARTICLE.
      IZAI=N1X/10
   10 RETURN
      END
      SUBROUTINE FILE3
C=======================================================================
C
C     Save & Output MF/MT=3/5 Cross Section.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INCLUDE 'sixpak.h'
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
c-----Note: HEADER & LEADER records saved here
      COMMON/HEADMT5/C1HMT5,C2HMT5,L1HMT5,L2HMT5,N1HMT5,N2HMT5
      COMMON/LEADMT5/C1MT5 ,C2MT5 ,L1MT5 ,L2MT5 ,N1MT5 ,N2MT5
      COMMON/MFOUT/MF3,MF4,MF5,MF9,MF12,MF14,MF15,NOSQ3,NOSQ4,NOSQ5,
     1 NOSQ9,NOSQ12,NOSQ14,NOSQ15
c-----MF=6 Yield Data
      DIMENSION XY(*),YY(*),NBTX(1),INTX(1)
      DATA INTX  /2/
      DATA N1OUT /1/
C-----HEAD LINE OF SECTION HAS BEEN READ - READ NEXT LINE.
      C1HMT5 = C1H
      C2HMT5 = C2H
      L1HMT5 = L1H
      L2HMT5 = L2H
      N1HMT5 = N1H
      N2HMT5 = N2H
      CALL CARDI(C1MT5,C2MT5,L1MT5,L2MT5,N1MT5,N2MT5)
C-----Interpolation Law
      CALL TERPI(NBTMT5(1),INTMT5(1),N1MT5)
c-----Only allow lin-lin data
      if(N1MT5.ne.1.or.NBTMT5(1).eq.2) then
      write(3,10)
   10 format(8('WARNING..')/
     1 ' MF/MT=3/5 Cross Sections MUST be LINEARIZED to'/
     2 ' Allow MF=6 Decomposition into MT=3 Cross Sections.'/
     3 ' suggest you first run LINEAR and then re-run SIXPAK.'/
     4 ' =========== MF=6 Decomposition SKIPPED =============')
      N2MT5 = 0
      return
      endif
c-----MT=5 data, if it fits in Memory
      if(N2MT5.gt.MAXMT5) THEN
      write(3,20) MAXMT5
   20 format(8('WARNING..')/
     1 ' MF/MT=3/5 Cross Sections exceeds',I6,' Energies.'/
     2 ' =========== MF=6 Decomposition SKIPPED =============')
      N2MT5 = 0
      return
      endif
c-----------------------------------------------------------------------
c
c     Read & Output MF/MT=3/5
c
c-----------------------------------------------------------------------
      CALL POINTI(EMT5(1),CSMT5(1),N2MT5)
      OTAPE = OTAPE3
      NOSEQ = NOSQ3
      CALL CONT3   ! Note - added for special output
      CALL CARDO(C1MT5,C2MT5,L1MT5,L2MT5,N1MT5,N2MT5)
      CALL TERPO(NBTMT5(1),INTMT5(1),N1MT5)
      CALL POINTO(EMT5(1),CSMT5(1),N2MT5)
      RETURN
      ENTRY OUTMT5(XY,YY,NY,MTMT5)
c-----------------------------------------------------------------------
c
c     Output MF/MT=3/5 decomposed to MF=3
c
c-----------------------------------------------------------------------
c-----Only if MF/MT=3/5 cross section is defined
      if(N2MT5.le.0) return
c-----skip to start of YIELD
      do NOUT1=1,N2MT5
      if(EMT5(NOUT1).ge.XY(1)) go to 30
      enddo
      return
c-----Define product = cross section X yield
   30 ii = 1
      xylast = XY(ii)
      yylast = YY(ii)
      do NOUT2=NOUT1,N2MT5
   40 if(EMT5(NOUT2).gt.XY(ii)) then
c-----greater = move up to next yield interval
      if(ii.ge.NY) go to 50
      ii = ii + 1
      go to 40
      ELSE
      if(EMT5(NOUT2).eq.XY(ii)) then
c-----equal = tabulated values
      PARTMT5(NOUT2) = CSMT5(NOUT2)*YY(ii)
      ELSE
c-----less than = between LAST and II
c                     X           X1     X2     Y1     Y3     Interp
      YYTERP = TERPIT(EMT5(NOUT2),xylast,XY(ii),yylast,YY(ii),2)
      PARTMT5(NOUT2) = CSMT5(NOUT2)*YYTERP
      ENDIF
      ENDIF
      ENDDO
      NOUT2 = N2MT5      ! Output to end of YIELD
      go to 60
   50 NOUT2 = NOUT2 - 1  ! Yield ends before cross section
c
c     Output NOUT1 to NOUT2
c
   60 OTAPE = OTAPE3
      NOSEQ = NOSQ3
      MFH   = 3
      MTH   = MTMT5
      N2OUT = (NOUT2 - NOUT1) + 1
      NBTX(1) = N2OUT
      CALL CONT3
      CALL CARDO(C1MT5 ,C2MT5 ,L1MT5 ,L2MT5 ,N1OUT ,N2OUT )
      CALL TERPO(NBTX(1),INTX(1),N1OUT)
      CALL POINTO(EMT5(NOUT1),PARTMT5(NOUT1),N2OUT)
      MFH   = 6
      MTH   = 5
      END
      SUBROUTINE FILE6
C=======================================================================
C
C     PROCESS A SECTION OF MF=6 DATA
C
C=======================================================================
      INCLUDE 'implicit.h'
      INCLUDE 'sixpak.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      COMMON/YIELD/NBT1(100),INT1(100),NP1,NR1
      COMMON/INNER/NBT3(100),INT3(100),NP3,NR3
      COMMON/FILE4/NPT4
      COMMON/FILE5/NPT5
      COMMON/LISTER/NW
      COMMON/TAB2ER/NBT2(100),INT2(100),NR2
      COMMON/TAB4ER/NBT4(100),INT4(100),NR4
      COMMON/PARTIO/AWRET,IVERSE,IZAI,IZAT,IZAP,NZAT
      COMMON/SPAC3D/EI,EP,XMU
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
C-----DEFINE 20 MEV FOR MAXIMUM INCIDENT ENERGY TEST (ACTUALLY 19.99
C-----TO ALLOW FOR SMALL DIFFERENCES).
      DATA E20MEV/1.999D+07/
c-----------------------------------------------------------------------
C
C     INTERPRETATION OF FIRST LINE.
C
c-----------------------------------------------------------------------
      IZAT=C1H
      AWRET=C2H
C-----4/12/04 - AVOID PROBLEMS WITH KALBACH-MANN FOR ELEMENTS: A = 0
      IF(MOD(IZAT,1000).NE.0) THEN
      NZAT = IZAT
      ELSE
      IATDUM = AWRET + 0.5d0  ! Use atomic weight to define ~ A
      NZAT   = IZAT + IATDUM
      ENDIF
      LCTIN=L2H
      NK=N1H
C-----WILL ONLY OUTPUT LIGHT PARTICLES - SO LCT=3, IS SAME AS LCT=2
      LCT = LCTIN
      IF(LCTIN.EQ.3) LCT = 2
c-----------------------------------------------------------------------
C
C     LOOP OVER SECTIONS.
C
c-----------------------------------------------------------------------
C-----11/05 - CONTROL RECORD FOR MF=9 ONLY FOR MT=5
      IF(MTH.EQ.5) CALL CONT9(NK)
      DO 160 NI=1,NK
C-----INITIALIZE OUTPUT POINT COUNTS.
      NPT4=0
      NPT5=0
c-----------------------------------------------------------------------
C
C     READ ENERGY DEPENDENT YIELD = MULTIPLICITY (SAME FOR ALL LAWS).
C
c-----------------------------------------------------------------------
C-----TAB1 RECORD.
      CALL TAB1I(ZAP,AWP,LIP,LAW,NR1,NP1,X1,Y1,NBT1,INT1)
C-----DEFINE OUTGOING PARTICLE ZA.
      IZAP=ZAP
C-----DEFINE INDICES TO STATISTIC TABLES FOR INCIDENT AND OUTGOING
C-----PARTICLE.
      IPI=MYPART(IZAI)
      IPO=MYPART(IZAP)
C-----DECIDE WHETHER OR NOT TO PRODUCE ENDF/B OUTPUT.
      CALL OUTER
c-----------------------------------------------------------------------
C
C     LAW DEPENDENT DATA.
C
c-----------------------------------------------------------------------
      IF(LAW.LT.0.OR.LAW.GT.7) GO TO 150
      LAWP1=LAW+1
      GO TO (10,20,40,70,80,90,120,130),LAWP1
C***********************************************************************
C
C     LAW=0 - UNKNOWN.
C
C***********************************************************************
C-----IDENTIFY SECTION.
   10 CALL NEXT1
C-----TEST YIELD DATA.
      CALL TESTY
C-----NO LAW DEPENDENT STRUCTURE
      CALL STATS
C-----TEST DATA.
      CALL TEST0
      GO TO 160
C***********************************************************************
C
C     LAW=1 - CONTINUUM ENERGY-ANGLE DISTRIBUTION.
C
C***********************************************************************
C-----TAB2 RECORD - INCIDENT ENERGY INTERPOLATION.
   20 CALL TAB2I(C1,C2,LANG,LEP,NR2,NE,NBT2,INT2)
C-----IDENTIFY SECTION.
      CALL NEXT1
C-----TEST YIELD DATA.
      CALL TESTY
C-----TEST INCIDENT ENERGY INTERPOLATION LAW.
      CALL TESTE
C-----STATISTICS.
      CALL STATS
C-----LOOP OVER ENERGIES.
      DO 30 IE=1,NE
C-----LIST RECORD.
      CALL LISTIN(C1,EI,ND,NA,NW,NEP,XLIST)
C-----TEST DATA.
      CALL TEST1
   30 CONTINUE
C-----TEST MAXIMUM INCIDENT ENERGY.
      IF(EI.LT.E20MEV) WRITE(OUTP,190) EI
      GO TO 160
C***********************************************************************
C
C     LAW=2 - DISCRETE TWO BODY.
C
C***********************************************************************
C-----TAB2 RECORD - INCIDENT ENERGY INTERPOLATION.
   40 CALL TAB2I(C1,C2,L1,L2,NR2,NE,NBT2,INT2)
C-----LOOP OVER ENERGIES.
      DO 60 IE=1,NE
C-----LIST RECORD.
      CALL LISTIN(C1,EI,LANG,L2,NW,NL,XLIST)
c-----------------------------------------------------------------------
C
C     COMPLICATED BECAUSE LTP IS NEEDED BEFORE SECTION ID.
C
c-----------------------------------------------------------------------
      IF(IE.NE.1) GO TO 50
C-----IDENTIFY SECTION.
      CALL NEXT1
C-----TEST YIELD DATA.
      CALL TESTY
C-----TEST INCIDENT ENERGY INTERPOLATION LAW.
      CALL TESTE
C-----STATISTICS.
      CALL STATS
C-----TEST DATA.
   50 CALL TEST2
   60 CONTINUE
C-----TEST MAXIMUM INCIDENT ENERGY.
      IF(EI.LT.E20MEV) WRITE(OUTP,190) EI
      GO TO 160
C***********************************************************************
C
C     LAW=3 - ISOTROPIC DISCRETE EMISSION.
C
C***********************************************************************
C-----IDENTIFY SECTION.
   70 CALL NEXT1
C-----TEST YIELD DATA.
      CALL TESTY
C-----NO LAW DEPENDENT STRUCTURE
      CALL STATS
      CALL TEST3
      GO TO 160
C***********************************************************************
C
C     LAW= 4 - DISCRETE TWO-BODY RECOIL.
C
C***********************************************************************
C-----IDENTIFY SECTION.
   80 CALL NEXT1
C-----TEST YIELD DATA.
      CALL TESTY
C-----NO LAW DEPENDENT STRUCTURE
      CALL STATS
      CALL TEST4
      GO TO 160
C***********************************************************************
C
C     LAW=5 - CHARGED PARTICLE ELASTIC SCATTERING.
C
C***********************************************************************
C-----TAB2 RECORD - INCIDENT ENERGY INTERPOLATION.
   90 CALL TAB2I(SPI,C2,LIDP,L2,NR2,NE,NBT2,INT2)
C-----LOOP OVER ENERGIES.
      DO 110 IE=1,NE
      CALL LISTIN(C1,EI,LTP,L2,NW,NL,XLIST)
c-----------------------------------------------------------------------
C
C     COMPLICATED BECAUSE LTP IS NEEDED BEFORE SECTION ID.
C
c-----------------------------------------------------------------------
      IF(IE.NE.1) GO TO 100
C-----IDENTIFY SECTION.
      CALL NEXT1
C-----TEST YIELD DATA.
      CALL TESTY
C-----TEST INCIDENT ENERGY INTERPOLATION LAW.
      CALL TESTE
C-----STATISTICS.
      CALL STATS
C-----TEST DATA.
  100 CALL TEST5
  110 CONTINUE
C-----TEST MAXIMUM INCIDENT ENERGY.
      IF(EI.LT.E20MEV) WRITE(OUTP,190) EI
      GO TO 160
C***********************************************************************
C
C     LAW=6 - N-BODY PHASE-SPACE DISTRIBUTION.
C
C***********************************************************************
C-----CONT RECORD.
  120 CALL CARDI(APSX,C2,L1,L2,N1,NPSX)
C-----IDENTIFY SECTION.
      CALL NEXT1
C-----TEST YIELD DATA.
      CALL TESTY
C-----STATISTICS.
      CALL STATS
C-----TEST DATA.
      CALL TEST6
      GO TO 160
C***********************************************************************
C
C     LAW=7 - LABORATORY ANGLE-ENERGY LAW.
C
C***********************************************************************
C-----TAB2 RECORD - INCIDENT ENERGY INTERPOLATION.
  130 CALL TAB2I(C1,C2,L1,L2,NR2,NE,NBT2,INT2)
C-----IDENTIFY SECTION.
      CALL NEXT1
C-----TEST YIELD DATA.
      CALL TESTY
C-----TEST INCIDENT ENERGY INTERPOLATION LAW.
      CALL TESTE
C-----STATISTICS.
      CALL STATS
C-----LOOP OVER ENERGIES.
      DO 140 IE=1,NE
C-----TAB2 RECORD - COSINE INTERPOLATION.
      CALL TAB2I(C1,EI,L1,L2,NR4,NMU,NBT4,INT4)
C-----LOOP OVER COSINES.
      DO IMU=1,NMU
C-----TAB1 RECORD.
      CALL TAB1I(C1,XMU,L1,L2,NR3,NP3,X3,Y3,NBT3,INT3)
C-----TEST DATA.
      CALL TEST7
      ENDDO
  140 CONTINUE
C-----TEST MAXIMUM INCIDENT ENERGY.
      IF(EI.LT.E20MEV) WRITE(OUTP,190) EI
      GO TO 160
C***********************************************************************
C
C     LAW NOT 1 TO 7 = ERROR. SKIP TO END OF MT.
C
C***********************************************************************
C-----IDENTIFY SECTION.
  150 CALL NEXT1
      WRITE(OUTP,180) LAW
C-----STATISTICS.
      CALL STATS
      GO TO 170
c-----------------------------------------------------------------------
C
C     END OF SECTION.
C
c-----------------------------------------------------------------------
  160 CONTINUE
      RETURN
c-----------------------------------------------------------------------
C
C     ERROR CONDITION - SKIP REMAINDER OF SECTION.
C
c-----------------------------------------------------------------------
  170 CALL SKIPS
      RETURN
  180 FORMAT(1X,78('-')/' WARNING:',
     1 ' Law=',I5,' Assume Nu-Bar Data - Section Skipped'/1X,78('-'))
  190 FORMAT(1X,78('-')/
     1 ' WARNING - Maximum Incident Energy=',1PE12.4,' eV',
     2 ' (Expect at Least 20 MeV)'/1X,78('-'))
      END
      SUBROUTINE TAB1I(C1,C2,L1,L2,N1,N2,X,Y,NBT,INT)
C=======================================================================
C
C     READ TAB1 RECORD.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INCLUDE 'sixpak.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/LASTE/ELAST
      DIMENSION X(*),Y(*),NBT(*),INT(*)
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      IF(N2.GT.MAXPOINT) GO TO 10
      ELAST=-1.0d0
      CALL TERPI(NBT,INT,N1)
c-----2019/3/1 - Additional Interpolation Law Tests
      CALL TERPTEST(NBT,INT,N1,N2,0)
      CALL POINTI(X,Y,N2)
      GO TO 20
c-----------------------------------------------------------------------
C
C     CORE WILL BE EXCEEDED IF DATA IS READ.
C
c-----------------------------------------------------------------------
   10 WRITE(OUTP,30) N1,N2,MAXPOINT
c-----2018/1/22 - Added on-line
      WRITE(*   ,30) N1,N2,MAXPOINT
      CALL ENDERROR
   20 RETURN
   30 FORMAT(' TAB1I Memory Exceeded...N2=',I8,' (MAX ',I8,')')
      END
      SUBROUTINE TAB2I(C1,C2,L1,L2,N1,N2,NBT,INT)
C=======================================================================
C
C     READ TAB2 RECORD.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      DIMENSION NBT(*),INT(*)
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      CALL TERPI(NBT,INT,N1)
c-----2019/3/1 - Additional Interpolation Law Tests
      CALL TERPTEST(NBT,INT,N1,N2,0)
      GO TO 10
   10 RETURN
      END
      SUBROUTINE LISTIN(C1,C2,L1,L2,N1,N2,X)
C=======================================================================
C
C     READ LIST RECORD.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
C-----08/08/2012 - ADDED MAXPOINT
c-----2019/1/4 - Updated to 600,000 from 500,000
      DATA MAXPOINT/600000/
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      DIMENSION X(*)
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      IF(N1.GT.MAXPOINT) GO TO 10
      CALL LISTI(X,N1)
      GO TO 20
c-----------------------------------------------------------------------
C
C     CORE WILL BE EXCEEDED IF DATA IS READ.
C
c-----------------------------------------------------------------------
   10 WRITE(OUTP,30) N1
c-----2018/1/22 - Added on-line
      WRITE(*   ,30) N1
      CALL ENDERROR
   20 RETURN
   30 FORMAT(' LISTI Memory Exceeded...',I6,' (MAX ',I6,')')
      END
      SUBROUTINE OUTLAB(OTAPEX,LABEL,MAT)
C=======================================================================
C
C     WRITE TAPE LABEL.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE,OTAPEX
      CHARACTER*66 LABEL
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      OTAPE=OTAPEX
      MATH=MAT
      MFH=0
      MTH=0
      NOSEQ=0
      CALL HOLLYO(LABEL)
      RETURN
      END
      SUBROUTINE CONT4(LTT)
C=======================================================================
C
C     WRITE CONT RECORD.
C
C     LTT = 1 - LEGENDRE COEFFICIENTS
C         = 2 - TABULATED
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/MFOUT/MF3,MF4,MF5,MF9,MF12,MF14,MF15,NOSQ3,NOSQ4,NOSQ5,
     1 NOSQ9,NOSQ12,NOSQ14,NOSQ15
C-----TRANSFORMATION MATRIX IS NEVER PRESENT.
      DATA LVT/0/
      DATA IZER/0/
      DATA LSTMAT/-9999/
C-----SAVE AND DEFINE PARAMETERS.
      OTAPE=OTAPE4
      MFH=MF4
      NOSEQ=NOSQ4
C-----OUTPUT FEND AND MEND RECORDS BEFORE START OF NEW MAT.
      IF(LSTMAT.LE.0) GO TO 10
C-----AFTER FIRST SECTION ALWAYS OUTPUT SEND.
      CALL OUTS(LSTMAT,MF4)
      IF(MATH.EQ.LSTMAT) GO TO 20
C-----FEND AND MEND.
      CALL OUTF(LSTMAT)
      CALL OUTM
   10 LSTMAT=MATH
      NOSQ4=1
C-----TAPE END RECORD.
   20 IF(MATH.GT.0) GO TO 30
      CALL OUTT
      GO TO 40
C-----OUTPUT DATA.
   30 CALL CARDO(C1H,C2H,LVT,LTT,IZER,IZER)
C-----RESTORE PARAMETERS.
   40 NOSQ4=NOSEQ
      RETURN
      END
      SUBROUTINE CONT5(NK)
C=======================================================================
C
C     WRITE CONT RECORD TO MF=5 DATA FILE.
C
C     NK = NUMBER OF PARTIAL DISTRIBUTIONS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/MFOUT/MF3,MF4,MF5,MF9,MF12,MF14,MF15,NOSQ3,NOSQ4,NOSQ5,
     1 NOSQ9,NOSQ12,NOSQ14,NOSQ15
      DATA IZER/0/
      DATA LSTMAT/-9999/
C-----SAVE AND DEFINE PARAMETERS.
      OTAPE=OTAPE5
      MFH=MF5
      NOSEQ=NOSQ5
C-----OUTPUT FEND AND MEND RECORDS BEFORE START OF NEW MAT.
      IF(LSTMAT.LE.0) GO TO 10
C-----AFTER FIRST SECTION ALWAYS OUTPUT SEND.
      CALL OUTS(LSTMAT,MF5)
      IF(MATH.EQ.LSTMAT) GO TO 20
C-----FEND AND MEND.
      CALL OUTF(LSTMAT)
      CALL OUTM
   10 LSTMAT=MATH
      NOSQ5=1
C-----TAPE END RECORD.
   20 IF(MATH.GT.0) GO TO 30
      CALL OUTT
      GO TO 40
C-----OUTPUT DATA.
   30 CALL CARDO(C1H,C2H,IZER,IZER,NK,IZER)
C-----RESTORE PARAMETERS.
   40 NOSQ5=NOSEQ
      RETURN
      END
      SUBROUTINE CONT12(NC)
C=======================================================================
C
C     WRITE CONT RECORD TO MF=12 DATA FILE.
C
C     NC = NUMBER OF PARTIAL DISTRIBUTIONS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/MFOUT/MF3,MF4,MF5,MF9,MF12,MF14,MF15,NOSQ3,NOSQ4,NOSQ5,
     1 NOSQ9,NOSQ12,NOSQ14,NOSQ15
      DATA IZER/0/
      DATA LSTMAT/-9999/
C-----FLAG FOR MULTIPLICITIES.
      DATA LO/1/
C-----SAVE AND DEFINE PARAMETERS.
      OTAPE=OTAPE12
      MFH=MF12
      NOSEQ=NOSQ12
C-----OUTPUT FEND AND MEND RECORDS BEFORE START OF NEW MAT.
      IF(LSTMAT.LE.0) GO TO 10
C-----AFTER FIRST SECTION ALWAYS OUTPUT SEND.
      CALL OUTS(LSTMAT,MF12)
      IF(MATH.EQ.LSTMAT) GO TO 20
C-----FEND AND MEND.
      CALL OUTF(LSTMAT)
      CALL OUTM
   10 LSTMAT=MATH
      NOSQ12=1
C-----TAPE END RECORD.
   20 IF(MATH.GT.0) GO TO 30
      CALL OUTT
      GO TO 40
C-----OUTPUT DATA.
   30 CALL CARDO(C1H,C2H,LO,IZER,NC,IZER)
C-----RESTORE PARAMETERS.
   40 NOSQ12=NOSEQ
      RETURN
      END
      SUBROUTINE CONT14(NC)
C=======================================================================
C
C     WRITE CONT RECORD TO MF=14 ISOTROPIC DATA.
C
C     NC = NUMBER OF PARTIAL DISTRIBUTIONS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/MFOUT/MF3,MF4,MF5,MF9,MF12,MF14,MF15,NOSQ3,NOSQ4,NOSQ5,
     1 NOSQ9,NOSQ12,NOSQ14,NOSQ15
      DATA IZER/0/
      DATA LSTMAT/-9999/
C-----FLAG FOR ISOTROPIC DATA.
      DATA LI/1/
C-----SAVE AND DEFINE PARAMETERS.
      OTAPE=OTAPE14
      MFH=MF14
      NOSEQ=NOSQ14
C-----OUTPUT FEND AND MEND RECORDS BEFORE START OF NEW MAT.
      IF(LSTMAT.LE.0) GO TO 10
C-----AFTER FIRST SECTION ALWAYS OUTPUT SEND.
      CALL OUTS(LSTMAT,MF14)
      IF(MATH.EQ.LSTMAT) GO TO 20
C-----FEND AND MEND.
      CALL OUTF(LSTMAT)
      CALL OUTM
   10 LSTMAT=MATH
      NOSQ14=1
C-----TAPE END RECORD.
   20 IF(MATH.GT.0) GO TO 30
      CALL OUTT
      GO TO 40
C-----OUTPUT DATA.
   30 CALL CARDO(C1H,C2H,LI,IZER,NC,IZER)
C-----RESTORE PARAMETERS.
   40 NOSQ14=NOSEQ
      RETURN
      END
      SUBROUTINE CONT15(NC)
C=======================================================================
C
C     WRITE CONT RECORD TO MF=15 DATA FILE.
C
C     NC = NUMBER OF PARTIAL DISTRIBUTIONS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/MFOUT/MF3,MF4,MF5,MF9,MF12,MF14,MF15,NOSQ3,NOSQ4,NOSQ5,
     1 NOSQ9,NOSQ12,NOSQ14,NOSQ15
      DATA IZER/0/
      DATA LSTMAT/-9999/
C-----SAVE AND DEFINE PARAMETERS.
      OTAPE=OTAPE15
      MFH=MF15
      NOSEQ=NOSQ15
C-----OUTPUT FEND AND MEND RECORDS BEFORE START OF NEW MAT.
      IF(LSTMAT.LE.0) GO TO 10
C-----AFTER FIRST SECTION ALWAYS OUTPUT SEND.
      CALL OUTS(LSTMAT,MF15)
      IF(MATH.EQ.LSTMAT) GO TO 20
C-----FEND AND MEND.
      CALL OUTF(LSTMAT)
      CALL OUTM
   10 LSTMAT=MATH
      NOSQ15=1
C-----TAPE END RECORD.
   20 IF(MATH.GT.0) GO TO 30
      CALL OUTT
      GO TO 40
C-----OUTPUT DATA.
   30 CALL CARDO(C1H,C2H,IZER,IZER,NC,IZER)
C-----RESTORE PARAMETERS.
   40 NOSQ15=NOSEQ
      RETURN
      END
      SUBROUTINE CONT9(NC)
C---- 11/05 - Added MF=9 output
C=======================================================================
C
C     WRITE CONT RECORD TO MF=9 DATA FILE.
C
C     NC = NUMBER OF PARTIAL DISTRIBUTIONS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/MFOUT/MF3,MF4,MF5,MF9,MF12,MF14,MF15,NOSQ3,NOSQ4,NOSQ5,
     1 NOSQ9,NOSQ12,NOSQ14,NOSQ15
      DATA IZER/0/
      DATA LSTMAT/-9999/
C-----SAVE AND DEFINE PARAMETERS.
      OTAPE=OTAPE9
      MFH=MF9
      NOSEQ=NOSQ9
C-----OUTPUT FEND AND MEND RECORDS BEFORE START OF NEW MAT.
      IF(LSTMAT.LE.0) GO TO 10
C-----AFTER FIRST SECTION ALWAYS OUTPUT SEND.
      CALL OUTS(LSTMAT,MF9)
      IF(MATH.EQ.LSTMAT) GO TO 20
C-----FEND AND MEND.
      CALL OUTF(LSTMAT)
      CALL OUTM
   10 LSTMAT=MATH
      NOSQ9=1
C-----TAPE END RECORD.
   20 IF(MATH.GT.0) GO TO 30
      CALL OUTT
      GO TO 40
C-----OUTPUT DATA.
   30 CALL CARDO(C1H,C2H,IZER,IZER,NC,IZER)
C-----RESTORE PARAMETERS.
   40 NOSQ9=NOSEQ
      RETURN
      END
      SUBROUTINE CONT3
C---- 2020/2/19 - Added MF=3 output
C=======================================================================
C
C     WRITE CONT RECORD TO MF=3 DATA FILE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/MFOUT/MF3,MF4,MF5,MF9,MF12,MF14,MF15,NOSQ3,NOSQ4,NOSQ5,
     1 NOSQ9,NOSQ12,NOSQ14,NOSQ15
c-----Note: HEADER & LEADER records saved here
      COMMON/HEADMT5/C1HMT5,C2HMT5,L1HMT5,L2HMT5,N1HMT5,N2HMT5
      COMMON/LEADMT5/C1MT5 ,C2MT5 ,L1MT5 ,L2MT5 ,N1MT5 ,N2MT5
      DATA LSTMAT/-9999/
C-----SAVE AND DEFINE PARAMETERS.
      OTAPE=OTAPE3
      MFH  =MF3
      NOSEQ=NOSQ3
C-----OUTPUT FEND AND MEND RECORDS BEFORE START OF NEW MAT.
      IF(LSTMAT.LE.0) GO TO 10
C-----AFTER FIRST SECTION ALWAYS OUTPUT SEND.
      CALL OUTS(LSTMAT,MF3)
      IF(MATH.EQ.LSTMAT) GO TO 20
C-----FEND AND MEND.
      CALL OUTF(LSTMAT)
      CALL OUTM
   10 LSTMAT=MATH
      NOSQ3=1
C-----TAPE END RECORD.
   20 IF(MATH.GT.0) GO TO 30
      CALL OUTT
      GO TO 40
C-----OUTPUT DATA.
   30 CALL CARDO(C1HMT5,C2HMT5,L1HMT5,L2HMT5,N1HMT5,N2HMT5)
C-----RESTORE PARAMETERS.
   40 NOSQ3=NOSEQ
      RETURN
      END
      SUBROUTINE OUT1
C=======================================================================
C
C     OUTPUT START OF SECTION.
C
C     IMOUT = 1 - PHOTON  - MF=12, 14 AND 15 DATA
C           = 2 - NEUTRON - MF=4 DATA
C           = 3 - NEUTRON - MF=4 AND 5 DATA
C
C=======================================================================
      INCLUDE 'implicit.h'
      INCLUDE 'sixpak.h'
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/DUMHEAD/ZERO1,ZERO2,L10,L20,N10,N20
      COMMON/MFOUT/MF3,MF4,MF5,MF9,MF12,MF14,MF15,NOSQ3,NOSQ4,NOSQ5,
     1 NOSQ9,NOSQ12,NOSQ14,NOSQ15
      COMMON/YIELD/NBT1(100),INT1(100),NP1,NR1
      COMMON/TAB2ER/NBT2(100),INT2(100),NR2
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
      COMMON/OUTME/IMOUT
      DIMENSION XY(2),YY(2),NBTY(1),INTY(1)
      DATA LF/1/
      DATA INTY/2/
      DATA YY/1.0d0,1.0d0/
      DATA IZER/0/
      IF(IMOUT.LE.0) RETURN
c-----------------------------------------------------------------------
C
C     IF ANY MF=5 OR 15 OUTPUT CHECK FOR ENERGY DEPENDENT NEUTRON YIELD.
C
c-----------------------------------------------------------------------
      IF(IMOUT.EQ.2) GO TO 30
C-----PRINT WARNING ONLY FOR EMITTED NEUTRONS.
      IF(IPO.NE.2) GO TO 30
      YMIN=Y1(1)
      YMAX=Y1(1)
      DO 10 I=2,NP1
      IF(Y1(I).LT.YMIN) YMIN=Y1(I)
      IF(Y1(I).GT.YMAX) YMAX=Y1(I)
   10 CONTINUE
C-----PRINT WARNING IF NEUTRON YIELD IS NOT CONSTANT.
      IF(DABS(YMAX-YMIN).LE.0.001d0*YMAX) GO TO 20
      WRITE(OUTP,60) YMIN,YMAX
      GO TO 30
C-----PRINT WARNING IF NEUTRON YIELD IS NOT AN INTEGER.
   20 IYMIN=YMIN
      YMAX=IYMIN
      IF(DABS(YMAX-YMIN).GT.0.001d0*YMAX) WRITE(OUTP,70) YMIN
c-----------------------------------------------------------------------
C
C     SELECT NEUTRON OR PHOTON OUTPUT.
C
c-----------------------------------------------------------------------
   30 IF(IMOUT.GE.2) GO TO 40
c-----------------------------------------------------------------------
C
C     PHOTON SPECTRA.
C
c-----------------------------------------------------------------------
C-----MF=6 YIELD (MULTIPLICITY) AS READ TO MF=12.
      CALL CONT12(1)
      CALL TAB1O(OTAPE12,ZERO1,ZERO1,L10,LF,NR1,NP1,X1,Y1,NBT1,INTY,
     1 MF12,NOSQ12)
C-----ISOTROPIC ANGULAR DISTRIBUTIONS TO MF=14.
      CALL CONT14(1)
C-----MF=6 SPECTRUM TO MF=15.
      CALL CONT15(1)
C-----DEFINE DUMMY YIELD = 1.0 OVER ENTIRE ENERGY RANGE.
      XY(1)=X1(1)
      XY(2)=X1(NP1)
      NBTY(1)=NP1
C-----DUMMY YIELD.
      CALL TAB1O(OTAPE15,ZERO1,ZERO2,L10,LF,N10,N20,XY,YY,NBTY,INTY,
     1 MF15,NOSQ15)
C-----ENERGY DEPENDENT INTERPOLATION LAW.
      CALL TAB2O(OTAPE15,ZERO1,ZERO2,L10,L20,NR2,NBT2(NR2),NBT2,INT2,
     1 MF15,NOSQ15)
      RETURN
C-----NEUTRON OUTPUT - SET FLAG FOR LEGENDRE COEFFICIENTS OR TABLES.
   40 LTT=2
      IF(LAW.EQ.1.AND.LANG.EQ.1) LTT=1
      IF(LAW.EQ.3) LTT=0
      IF(LAW.EQ.2.AND.LANG.EQ.0) LTT=1
      IF(LAW.EQ.5.AND.LTP.LE.2) LTT=1
C-----DEFINE ISOTROPIC DISTRIBUTION FLAG.
      LI=0
      IF(LTT.EQ.0) LI=1
c-----------------------------------------------------------------------
C
C     NEUTRON ANGULAR DATA.
C
c-----------------------------------------------------------------------
      CALL CONT4(LTT)
C-----CONT RECORD.
C-----[01/20/02 - CHANGED N10,N20 TO IZER,IZER TO CORRECT OUTPUT]
      CALL CARDOUT(OTAPE4,ZERO1,C2H,LI,LCT,IZER,IZER,MF4,NOSQ4)
C-----END OF SECTION FOR ISOTROPIC DATA.
      IF(LTT.EQ.0) GO TO 50
C-----ENERGY DEPENDENT INTERPOLATION LAW.
      CALL TAB2O(OTAPE4,ZERO1,ZERO2,L10,L20,NR2,NBT2(NR2),
     1 NBT2,INT2,MF4,NOSQ4)
c-----------------------------------------------------------------------
C
C     NEUTRON SPECTRA.
C
c-----------------------------------------------------------------------
   50 IF(IMOUT.LT.3) RETURN
      CALL CONT5(1)
C-----DEFINE DUMMY YIELD = 1.0 OVER ENTIRE ENERGY RANGE.
      XY(1)=X1(1)
      XY(2)=X1(NP1)
      NBTY(1)=NP1
C-----DUMMY YIELD.
      CALL TAB1O(OTAPE5,ZERO1,ZERO2,L10,LF,N10,N20,XY,YY,
     1 NBTY,INTY,MF5,NOSQ5)
C-----ENERGY DEPENDENT INTERPOLATION LAW.
      CALL TAB2O(OTAPE5,ZERO1,ZERO2,L10,L20,NR2,NBT2(NR2),
     1 NBT2,INT2,MF5,NOSQ5)
      RETURN
   60 FORMAT(1X,78('-')/
     1 ' WARNING - Energy Dependent Yield=',1PE11.4,' to ',1PE11.4/
     2 '           Expect Constant'/
     3 1X,78('-'))
   70 FORMAT(1X,78('-')/
     1 ' WARNING - Yield=',1PE11.4,' (Expect Integer Yield)'/
     2 1X,78('-'))
      END
      SUBROUTINE CARDOUT(OTAPEX,C1X,C2X,L1X,L2X,N1X,N2X,MFX,NOSQX)
C=======================================================================
C
C     OUTPUT ONE RECORD.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OTAPEX,OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
C-----SAVE AND DEFINE PARAMETERS.
      OTAPE=OTAPEX
      MFH=MFX
      NOSEQ=NOSQX
C-----OUTPUT DATA.
      CALL CARDO(C1X,C2X,L1X,L2X,N1X,N2X)
C-----RESTORE PARAMETERS.
      NOSQX=NOSEQ
      RETURN
      END
      SUBROUTINE TAB1O(OTAPEX,C1X,C2X,L1X,L2X,N1X,N2X,X,Y,NBT,INT,
     1 MFX,NOSQX)
C=======================================================================
C
C     OUTPUT TAB1 RECORD.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OTAPEX,OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/HIGHE45/N2X4,N2X5,I2X4,I2X5
      DIMENSION X(N2X),Y(N2X),NBT(N1X),INT(N1X),NBTOUT(100),INTOUT(100)
c-----------------------------------------------------------------------
C
C     CHECK PARAMETERS
C
c-----------------------------------------------------------------------
      IF(N1X.LE.0.OR.N2X.LE.0) THEN
      WRITE(OUTP,10) N1X,N2X
      WRITE(   *,10) N1X,N2X
   10 FORMAT(' N1/N2=',2I8,' Program ERROR in TAB1O')
      CALL ENDERROR
      ENDIF
C-----COPY INTERPOLATION LAW FOR OUTPUT
      DO I=1,N1X
      NBTOUT(I) = NBT(I)
      INTOUT(I) = INT(I)
      ENDDO
C-----INSURE INTERPOLATION LAW IS CONSISTENT WITH POINT COUNT
      IF(NBTOUT(N1X).NE.N2X) THEN
      NBTOUT(N1X) = N2X
      ENDIF
C-----INSURE INTERPOLATION LAWS ARE IN THE RANGE 1 - 5.
      CALL FIXINT(INTOUT(1),N1X)
C-----SAVE AND DEFINE PARAMETERS.
      OTAPE=OTAPEX
      MFH=MFX
      NOSEQ=NOSQX
c-----------------------------------------------------------------------
C
C     CHECK X ORDER = MUST BE ASCENDING
C
c-----------------------------------------------------------------------
      MYORDER = 0
      DO I=2,N2X
      IF(X(I).LT.X(I-1)) THEN
      IF(MYORDER.EQ.0) THEN      ! Line before first output error
      WRITE(   *,20)
      WRITE(OUTP,20)
   20 FORMAT(1X,78('-'))
      ENDIF
      WRITE(   *,30) I-1,X(I-1),X(I),MFH,MTH
      WRITE(OUTP,30) I-1,X(I-1),X(I),MFH,MTH
   30 FORMAT('    ERROR - Energy Order', I8,1p2d12.5,
     1 ' MF=',I2,' MT=',I3)
      MYORDER = MYORDER + 1
      ENDIF
      ENDDO
C-----STOP ON ENERGY ORDER ERROR = STOP IS CURRENTLY TURNED OFF.
C     IF(MYORDER.NE.0) CALL ENDERROR
c-----------------------------------------------------------------------
C
C     OUTPUT DATA.
C
c-----------------------------------------------------------------------
      CALL CARDO(C1X,C2X,L1X,L2X,N1X,N2X)
      CALL TERPO(NBTOUT(1),INTOUT(1),N1X)
      CALL POINTO(X,Y,N2X)
c-----------------------------------------------------------------------
c
c     2019/6/29 - Check max. energy
c
c-----------------------------------------------------------------------
c
c     MF = 4 and 14 are multiple angular distributions
c     MF = 5 and 15 are multiple energy  distributions
c     MF = 9 and 12 are single   energy  distributions
c
c-----------------------------------------------------------------------
c
c     MFH = 4 or 14 = Angular distributions (check energy of only last)
c
c-----------------------------------------------------------------------
c-----count angular distributions and save only the max. energy
      if(MFH.eq.4.or.MFH.eq.14) then
      if(C2X.gt.0.0d0) then           ! Ignore lead vs. E
      I2X4 = I2X4 + 1
      if(I2X4.eq.N2X4) then
      CALL MAXIE1(MATH,MFH,MTH)
      CALL MAXIE2(C2X,1.0d0)
      endif
      endif
      endif
c-----------------------------------------------------------------------
c
c     MFH = 5, 9, 12, 15 = Energy distributions (check energy of each)
c
c     2019/6/20 - Only   Neutrons (MFH =  5,  9)
c                 Ignore Photons  (MFH = 12, 15)
c
c-----------------------------------------------------------------------
c     if(MFH.eq.5.or.MFH.eq.9.or.MFH.eq.12.or.MFH.eq.15) then
      if(MFH.eq.5.or.MFH.eq.9) then
c-----Save MAT/MF/MT
      CALL MAXIE1(MATH,MFH,MTH)
c-----Save Maximum energy and value
      CALL MAXIE2(X(N2X),Y(N2X))
      endif
c-----------------------------------------------------------------------
c
c     MFH = 5, 15 = Energy distributions (check energy only of max.)
c
c-----------------------------------------------------------------------
      if(MFH.eq.5.or.MFH.eq.15) then
      if(C2X.gt.0.0d0) then           ! Ignore lead vs. E
      I2X5 = I2X5 + 1
      if(I2X5.eq.N2X5) then
      CALL MAXIE1(MATH,MFH,MTH)
      CALL MAXIE2(C2X,1.0d0)
      endif
      endif
      endif
C-----RESTORE PARAMETERS.
      NOSQX=NOSEQ
      RETURN
      END
      SUBROUTINE TAB2O(OTAPEX,C1X,C2X,L1X,L2X,N1X,N2X,NBT,INT,
     1 MFX,NOSQX)
C=======================================================================
C
C     OUTPUT TAB2 RECORD.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE,OTAPEX
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/HIGHE45/N2X4,N2X5,I2X4,I2X5
      DIMENSION NBT(N1X),INT(N1X),NBTOUT(100),INTOUT(100)
C-----2019/6/30 - Keep track of MF=4 and 14 MAT/MF/MT
      DATA LASTMAT4/-9999/
      DATA LASTMF4 /-9999/
      DATA LASTMT4 /-9999/
C-----2019/6/30 - Keep track of MF=5 and 15 MAT/MF/MT
      DATA LASTMAT5/-9999/
      DATA LASTMF5 /-9999/
      DATA LASTMT5 /-9999/
C-----CHECK PARAMETERS
      IF(N1X.LE.0.OR.N2X.LE.0) THEN
      WRITE(OUTP,10) N1X,N2X
      WRITE(   *,10) N1X,N2X
   10 FORMAT(' N1/N2=',2I8,' Program ERROR in TAB2O')
      CALL ENDERROR
      ENDIF
C-----COPY INTERPOLATION LAW FOR OUTPUT
      DO I=1,N1X
      NBTOUT(I) = NBT(I)
      INTOUT(I) = INT(I)
      ENDDO
C-----INSURE INTERPOLATION LAW IS CONSISTENT WITH POINT COUNT
      IF(NBTOUT(N1X).NE.N2X) THEN
      NBTOUT(N1X) = N2X
      ENDIF
C-----INSURE INTERPOLATION LAWS ARE IN THE RANGE 1 -5.
      CALL FIXINT(INTOUT(1),N1X)
C-----SAVE AND DEFINE PARAMETERS.
      OTAPE=OTAPEX
      MFH=MFX
      NOSEQ=NOSQX
C-----OUTPUT DATA.
      CALL CARDO(C1X,C2X,L1X,L2X,N1X,N2X)
      CALL TERPO(NBTOUT(1),INTOUT(1),N1X)
c-----------------------------------------------------------------------
c
c     MF = 4 and 14 are multiple angular distributions
c     MF = 5 and 15 are multiple energy  distributions
c     MF = 9 and 12 are single   energy  distributions
c
c-----------------------------------------------------------------------
      if(MFH.eq.9.or.MFH.eq.12) N2X5 = -9999 ! no multiple MF=9 or 12
c-----Save # of Angular Distributions for new MAT/MF/MT
      if(MFH.eq.4.or.MFH.eq.14) then
      if(LASTMAT4.ne.MATH.or.LASTMF4.ne.MFH.or.LASTMT4.ne.MTH) then
      LASTMAT4 = MATH
      LASTMF4  = MFH
      LASTMT4  = MTH
      N2X4     = N2x
      I2X4     = 0
      endif
      endif
c-----Save # of Energyr Distributions for new MAT/MF/MT
      if(MFH.eq.5.or.MFH.eq.15) then
      if(LASTMAT5.ne.MATH.or.LASTMF5.ne.MFH.or.LASTMT5.ne.MTH) then
      LASTMAT5 = MATH
      LASTMF5  = MFH
      LASTMT5  = MTH
      N2X5     = N2x
      I2X5     = 0
      endif
      endif
C-----RESTORE PARAMETERS.
      NOSQX=NOSEQ
      RETURN
      END
      SUBROUTINE LISTOUT(OTAPEX,C1X,C2X,L1X,L2X,N1X,N2X,XLIST,MFX,
     1 NOSQX)
C=======================================================================
C
C     OUTPUT LIST RECORD.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OTAPEX,OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/HIGHE45/N2X4,N2X5,I2X4,I2X5
      DIMENSION XLIST(N1X)
C-----CHECK PARAMETERS
      IF(N1X.LE.0) THEN
      WRITE(OUTP,10) N1X
      WRITE(   *,10) N1X
   10 FORMAT(' N1=',I8,' Program ERROR in LISTOUT')
      CALL ENDERROR
      ENDIF
C-----SAVE AND DEFINE PARAMETERS.
      OTAPE=OTAPEX
      MFH=MFX
      NOSEQ=NOSQX
C-----OUTPUT DATA.
      CALL CARDO(C1X,C2X,L1X,L2X,N1X,N2X)
      CALL LISTO(XLIST,N1X)
c-----------------------------------------------------------------------
c
c     MFH = 4 or 14 = Angular distributions (check energy of only last)
c
c-----------------------------------------------------------------------
c-----count angular distributions and save only the max. energy
      if(MFH.eq.4.or.MFH.eq.14) then
      if(C2X.gt.0.0d0) then           ! Ignore lead vs. E
      I2X4 = I2X4 + 1
      if(I2X4.eq.N2X4) then
      CALL MAXIE1(MATH,MFH,MTH)
      CALL MAXIE2(C2X,1.0d0)
      endif
      endif
      endif
C-----RESTORE PARAMETERS.
      NOSQX=NOSEQ
      RETURN
      END
      SUBROUTINE LSTTAB(I1,I2,INTX)
C=======================================================================
C
C     COPY PART OF A LIST RECORD TO THE TAB1 FORMAT FOR
C     INTEGRATION AND TESTING.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INCLUDE 'sixpak.h'
      COMMON/INNER/NBT3(100),INT3(100),NP3,NR3
      NP3=0
      DO 10 K=I1,I2,2
      NP3=NP3+1
      X3(NP3)=XLIST(K)
      Y3(NP3)=XLIST(K+1)
   10 CONTINUE
      NBT3(1)=NP3
      INT3(1)=INTX
      IF(INT3(1).GT.10) INT3(1)=INT3(1)-10*(INT3(1)/10)
      NR3=1
      RETURN
      END
      SUBROUTINE CM2LAB(X5OUT,Y5OUT,NP5OUT,NBT5O,INT5O,NR5O)
C=======================================================================
C
C     DEFINE FIRST ORDER TRANSFORMATION OF SPECTRA FOR MF=5 OUTPUT BY
C     ADDING CENTER OF MASS ENERGY TO EMITTED PARTICLE ENERGIES - SINCE
C     THIS IS DONE UNIFORMLY FOR ALL ENERGIES IT WILL NOT EFFECT THE
C     INTEGRAL OF THE SPECTRA.
C
C     THIS TRANSFORMATION IS ONLY PERFORMED FOR DATA THAT WILL BE
C     OUTPUT IN MF=5 = NEUTRON INCIDENT AND EMITTED.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
      COMMON/PARTIO/AWRET,IVERSE,IZAI,IZAT,IZAP,NZAT
      COMMON/SPAC3D/EI,EP,XMU
      DIMENSION X5OUT(NP5OUT),Y5OUT(NP5OUT),NBT5O(NR5O),INT5O(NR5O)
      CHARACTER*1 FIELD33(33)
c-----------------------------------------------------------------------
C
C     ONLY PERFORM TRANSFORMATION FOR CENTER OF MASS DATA.
C
c-----------------------------------------------------------------------
      IF(LCT.NE.2) RETURN
C-----CONVERSION FACTOR FOR LAB TO CM ENERGY ASSUMING NEUTRON INCIDENT.
      RATCM=1.0d0/(AWRET+1.0d0)
      RATCM=RATCM*RATCM
C-----DEFINE CENTER OF MASS ENERGY.
      ECM=EI*RATCM
C-----UNIFORMLY ADD CENTER OF MASS ENERGY TO EMITTED PARTICLE ENERGY.
      DO 10 I=1,NP5OUT
      X5OUT(I)=X5OUT(I)+ECM
   10 CONTINUE
C-----INTEGRATE SPECTRUM.
      XINTEP=XINT2(X5OUT,Y5OUT,NBT5O,INT5O,NR5O)
C-----RENORMALIZE TO EXACTLY UNITY.
      CALL RENORM(Y5OUT,NP5OUT,XINTEP)
C-----CHECK FOR HIGHEST EMISSION ENERGY EXCEEDING INCIDENT ENERGY.
      IF(X5OUT(NP5OUT).GT.EI) then
      call OUT9(X5OUT(NP5OUT),FIELD33( 1))
      call OUT9(EI           ,FIELD33(12))
      call OUT9(ECM          ,FIELD33(23))
      WRITE(OUTP,20) FIELD33
      endif
      RETURN
   20 FORMAT(1X,78('-')/' WARNING: Highest Emission Energy=',11A1,' eV'/
     1                  '          Exceeds Incident Energy=',11A1,' eV'/
     2                  '          Center-of-Mass Energy  =',11A1,' eV'/
     2 1X,78('-'))
      END
      SUBROUTINE OHMANN
C=======================================================================
C
C     CALCULATION OF KALBACH-MANN ANGULAR DISTRIBUTIONS.
C
C     WARNING...BE SURE ENERGIES - E AND EP - ARE IN EV.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/PARTIO/AWRET,IVERSE,IZAI,IZAT,IZAP,NZAT
      COMMON/SPAC3D/EI,EP,XMU
      COMMON/KMPARM/F0,RKM,FKM
      DIMENSION IZATAB(6),AWRTAB(6),BRATAB(6),AMTAB(6),BMTAB(6)
C-----OPTION TO DEFINE RESIDUAL NUCLEUS, USE,
C----- = 1     - FOR "PSEUDO" RESIDUAL
C----- = NOT 1 - FOR REAL RESIDUAL
      DATA MICKEY/1/
C-----ZA OF ALLOWED INCIDENT AND EMITTED PARTICLES.
      DATA IZATAB/
     1     1, 1001, 1002, 1003, 2003, 2004/
C-----BREAK UP ENERGY.
      DATA BRATAB/
     1   0.0D+00,  0.0D+00, 2.22D+00, 8.48D+00, 7.72D+00, 28.3D+00/
C-----MASS PARAMETERS.
      DATA AMTAB/
     1   1.0D+00,  1.0D+00,  1.0D+00,  1.0D+00,  1.0D+00,  0.0D+00/
      DATA BMTAB/
     1   0.5D+00,  1.0D+00,  1.0D+00,  1.0D+00,  1.0D+00,  2.0D+00/
      DATA EV2MEV/1.0D-06/
C-----MASSES OF PROJECTILES.
      DATA AWRTAB/
     1 1.008665D+00,
     2 1.007825D+00,
     3 2.014102D+00,
     4 3.016050D+00,
     5 3.016030D+00,
     6 4.002603D+00/
      DATA HALF/5.0D-01/
      DATA ONE /1.0D+00/
      DATA CKM1/4.0D-02/
      DATA CKM2/1.8D-06/
      DATA CKM3/6.7D-07/
      DATA AATINY/1.0D-02/
      DATA CX1/7.2D+01/
      DATA CX2/4.2D+01/
      DATA CX3/2.0D+01/
      DATA CX4/3.0D+00/
      DATA CX5/2.0D+00/
c-----------------------------------------------------------------------
C
C     TERMS WITH NO ENERGY DEPENDENCE - CALL ONCE PER
C     PROJECTILE, TARGET, EMITTED PARTICLE COMBINATION.
C
c-----------------------------------------------------------------------
C
C     DEFINE LAB TO CM ENERGY CONVERSION FACTOR, PROJECTILE AND EMITTED
C     PARTICLE BREAK UP ENERGY AND MASS TERM.
C
c-----------------------------------------------------------------------
C-----DEFINE INDICES TO TABLES.
      IP1=0
      IP2=0
      DO 10 I=1,6
      IF(IZAI.EQ.IZATAB(I)) IP1=I
      IF(IZAP.EQ.IZATAB(I)) IP2=I
   10 CONTINUE
C-----PRINT WARNING AND USE NEUTRON PARAMETERS FOR MISSING DATA.
      IF(IP1.GT.0.AND.IP2.GT.0) GO TO 20
      WRITE(OUTP,50) IZAI,IZAP
      IF(IP1.LE.0) IP1=1
      IF(IP2.LE.0) IP1=2
C-----CONVERSION FACTOR FOR LAB TO CM ENERGY.
   20 RATCM=AWRET/(AWRET+AWRTAB(IP1)/AWRTAB(1))
      RATCM=RATCM*RATCM
C-----BREAK UP ENERGIES.
      BREAKA=BRATAB(IP1)
      BREAKB=BRATAB(IP2)
C-----MASS PARAMETERS.
      AMBM=AMTAB(IP1)*BMTAB(IP2)
c-----------------------------------------------------------------------
C
C     DEFINE A, Z**2 AND (N-Z)**2/A
C     FOR TARGET, COMPOUND AND RESIDUAL NUCLEI
C
C     BASED ON THE REACTION
C
C     a + A = C = B + b + d +.....
C
C     a   = PROJECTILE         = IZAI
C     A   = TARGET NUCLEUS     = IZAT
C     C   = COMPOUND NUCLEUS   = IZAC  = IZAT + IZAI
C     B   = RESIDUAL NUCLEUS   = IZAB  = SEE ALTERNATIVE DEFINITIONS
C     b   = EMITTED PARTICLE   = IZAP  = EMITTED PARTICLE FOR WHICH
C                                        THE DISTRIBUTION WILL BE
C                                        CALCULATED.
C     c   = EMITTED PARTICLE
C             .
C             .
C             .
C
C     IN PRINCIPLE ANY NUMBER OF SIMILAR PARTICLES (N,2N) OR DISSIMILAR
C     PARTICLES (N,N ALPHA) CAN BE EMITTED, EITHER SINGULARLY (N,P)
C     OR WITH A MULTIPLICITY (N,2P) - THE DISTRIBUTIONS CAN BE GIVEN
C     EITHER ALL TOGETHER (N,2N) BOTH NEUTRONS CONSIDERED AS HAVING
C     THE SAME DISTRIBUTION OR SEPARATED (N,N ALPHA) WITH SEPARATE
C     DISTRIBUTIONS FOR NEUTRONS AND ALPHAS.
C
C     DEFINING THE RESIDUAL NUCLEUS
C     ==================================================================
C     THIS PROGRAM INCLUDES CODING TO DEFINE THE RESIDUAL NUCLEUS TO BE
C     EITHER THE REAL RESIDUAL NUCLEUS = THE REMAINDER AFTER ALL
C     PARTICLES HAVE BEEN EMITTED, OR A "PSEUDO" RESIDUAL ASSUMING
C     EACH PARTICLE IS EMITTED INDEPENDENTLY FROM THE COMPOUND NUCLEUS.
C     WHICH OF THESE MODELS IS USED IS CONTROLLED BY VARIABLE MICKEY
C     (SHORT FOR MICKEY MOUSE) WHICH IS DEFINED IN A DATA STATEMENT AT
C     THE BEGINNING OF THIS ROUTINE.
C
C     USING THE "PSEUDO" RESIDUAL
C     ==================================================================
C     FOR EACH EMITTED PARTICLE (b) THIS IS DEFINED TO BE,
C
C     ZA(B) = ZA(C) - ZA(b)
C
C     FOR EXAMPLE FOR B-11 (N,N ALPHA) TWO DIFFERENT "PSEUDO" RESIDUALS
C     ARE USED - ONE TO DESCRIBE THE EMISSION OF NEUTRONS,
C
C      5011 =  5012 - 1
C
C     AND ONE TO DESCRIBE THE EMISSION OF ALPHAS,
C
C      3008 =  5012 - 2004
C
C     HOPEFULLY THE USER WILL START TO UNDERSTAND WHY THE VARIABLE THAT
C     CONTROLS THIS OPTION IS SHORT FOR "MICKEY MOUSE".
C
C     USING THE ACTUAL RESIDUAL
C     ==================================================================
C     TO COVER ALL OF THESE CASES THE RESIDUAL NUCLEUS CAN ONLY BE
C     DEFINED BASED ON THE MT NUMBER, WHICH DEFINES THE TOTAL NUMBER
C     AND CHARGE OF ALL EMITTED PARTICLES - IT CANNOT BE DEFINED BASED
C     SIMPLY ON THE PROJECTILE, TARGET AND EMITTED PARTICLE IN ONE
C     SECTION OF MF =6 DATA, E.G., IN THE CASE OF B-11 (N, N ALPHA) THE
C     RESIDUAL NUCLEUS IS LI-7 WHEN CONSIDERING EITHER THE NEUTRON OR
C     ALPHA CALCULATIONS WITH THE KALBACH-MANN FORMALISM - THE RESIDUAL
C     NUCLEUS IS NOT SIMPLY DEFINED BY THE ZA OF THE TARGET + THE ZA
C     OF THE PROJECTILE - THE ZA OF EITHER THE EMITTED NEUTRON OR
C     ALPHA.
C
C     NOTE - HERE USE NZAT, RATHER THAN IZAT, TO HANDLE ELEMENTS.
C
c-----------------------------------------------------------------------
C-----TARGET NUCLEUS.
      IZA=NZAT/1000          ! Z
      IAA=NZAT-1000*IZA      ! A
      INA=IAA-IZA            ! A-Z
      AA=IAA                 ! A
      ZA2=IZA*IZA            ! ZA*ZA
      CNMZA=(INA-IZA)**2     ! |(A-Z)-ZA|^2
      CNMZA=CNMZA/AA         ! ............/A
C-----COMPOUND NUCLEUS - TARGET + PROJECTILE.
      IZAC=NZAT+IZAI         ! ZA
      IZC=IZAC/1000          ! Z
      IAC=IZAC-1000*IZC      ! A
      INC=IAC-IZC            ! A-Z
      AC=IAC                 ! A
      ZC2=IZC*IZC            ! ZA*ZA
      CNMZC=(INC-IZC)**2     ! |(A-Z)-ZA|^2
      CNMZC=CNMZC/AC         ! ............/A
C-----RESIDUAL NUCLEUS - USE EITHER "PSEUDO" OR REAL RESIDUAL.
      IZAB=IZAC-IZAP         ! ZA
      IF(MICKEY.NE.1) CALL ZALEFT(IZAC,IZAB,MTH)
      IZB=IZAB/1000          ! Z
      IAB=IZAB-1000*IZB      ! A
      INB=IAB-IZB            ! A-Z
      AB=IAB                 ! A
      ZB2=IZB*IZB            ! ZA*ZA
      CNMZB=(INB-IZB)**2     ! |(A-Z)-ZA|^2
      CNMZB=CNMZB/AB         ! ............/A
c-----------------------------------------------------------------------
C
C     THE EXPRESSIONS IN THE ENDF/B MANUAL CAN BE SIMPLIFIED BY
C     REMOVING A FACTOR OF A**(1/3) - ALL OF THE TERMS CAN THEN
C     BE DEFINED IN TERMS OF A AND A**(1/3).
C
c-----------------------------------------------------------------------
      CON1=1.0d0/3.0d0
      AA13=AA**CON1
      AB13=AB**CON1
      AC13=AC**CON1
      SA=15.68d0*(AC-AA)
     1  -28.07d0*(CNMZC-CNMZA)
     2  -18.56d0*(AC/AC13-AA/AA13)
     3  +33.22d0*(CNMZC/AC13-CNMZA/AA13)
     4  -0.717d0*(ZC2/AC13-ZA2/AA13)
     5  +1.211d0*(ZC2/AC-ZA2/AA)
     6  -BREAKA
      SB=15.68d0*(AC-AB)
     1  -28.07d0*(CNMZC-CNMZB)
     2  -18.56d0*(AC/AC13-AB/AB13)
     3  +33.22d0*(CNMZC/AC13-CNMZB/AB13)
     4  -0.717d0*(ZC2/AC13-ZB2/AB13)
     5  +1.211d0*(ZC2/AC-ZB2/AB)
     6  -BREAKB
      RETURN
      ENTRY HEMANN
C=======================================================================
C
C     TERMS WITH ENERGY DEPENDENCE - CALL ONCE PER (E,EP).
C
C=======================================================================
C-----CONVERT TO CM MEV (EI IS IN LAB, EP IS IN CM, BOTH ARE IN EV).
      EIMEV=EV2MEV*RATCM*EI
      EPMEV=EV2MEV*EP
C-----DEFINE A(E,EP) AND NORMALIZATION FACTOR A/(2.0*SINH(A)).
      EA=EIMEV+SA
      EB=EPMEV+SB
C-----NOTE, NO DEPENDENCE ON INCIDENT ENERGY UNTIL HIGH ENERGY - AT
C-----HIGHER INCIDENT ENERGIES (EA) WILL DECREASE THE ANISOTROPY.
      XKM1=EB
      XKM3=EB
      IF(EA.LE.41.0d0) GO TO 30
      XKM3=41.0d0*EB/EA
      IF(EA.GT.130.0d0) XKM1=130.0d0*EB/EA
   30 A=XKM1*(CKM1+CKM2*XKM1*XKM1)+CKM3*AMBM*(XKM3**4)
      AA=A*A
      IF(AA.LT.AATINY) GO TO 40
C-----OMIT FACTOR OF 1/2 THROUGHOUT IN DEFINITION OF SINH AND COSH
C-----(THEY ONLY APPEAR AS RATIOS AND FACTOR CANCELS OUT).
      AKMEXP=DEXP(A)
      FNORM=HALF*A/(AKMEXP-ONE/AKMEXP)
      FNORM1=FNORM*(ONE+RKM)
      FNORM2=FNORM*(ONE-RKM)
      RETURN
C-----SMALL A EXPANSION OF A/(2.0*SINH(A)) (OMIT FACTOR OF 1/2 IN SINH).
   40 FNORM=HALF/(((((AA/CX1+AA)/CX2+AA)/CX3)+AA)/CX4+CX5)
      FNORM1=FNORM*(ONE+RKM)
      FNORM2=FNORM*(ONE-RKM)
      RETURN
      ENTRY GOMANN
C=======================================================================
C
C     ANGULAR DISTRIBUTION FOR FIXED (E,EP) - CALL ONCE PER (E,EP,COS).
C
C=======================================================================
C
C     F(MU,E,EP) = FNORM*[COSH(A*MU) + R(E,EP)*SINH(A*MU)]
C     FNORM      = 0.5*A/SINH(A).
C
C     COMPARED TO THE EQUATION ON PAGE 6.6 OF ENDF-102 (OCT. 1991)
C     THIS EXPRESSION INCLUDES A FACTOR OF 1/2 IN ORDER TO OBTAIN
C     PROPERLY NORMALIZED DISTRIBUTIONS.
C
C     THIS EXPRESSION IS RE-WRITTEN TO IMPROVE NUMERICAL STABILITY
C
C     COSH(AMU)+R*SINH(AMU) = (1/2)*[(1+R)*EXP(AMU)+(1-R)*EXP(-AMU)]
C                           = (1/2)*[(1+R)*EXP(AMU)+(1-R)/EXP(AMU)]
C
C     THE FACTOR 1/2 APPEARS IN THE NUMERATOR AND DENOMINATOR IN
C     SINH AND COSH AND WILL CANCEL OUT WHEN THE RATIO OF NUMERATOR TO
C     DENOMINATOR IS TAKEN TO DEFINE THE ANSWER. THEREFORE THE FACTOR
C     OF 1/2 WILL BE OMITTED THROUGH OUT THE CALCULATION.
C
C     FNORM1 = (1+R)*FNORM
C     FNORM2 = (1-R)*FNORM
C
C     F(MU,E,EP) = FNORM1*EXP(AMU) + FNORM2/EXP(AMU)
C
C     IN THIS FORM FOR R IN THE EXPECTED RANGE, 0 TO 1, THE ANSWER IS
C     THE SUM OF 2 POSITIVE TERMS - THIS AVOIDS ANY DIFFERENCE PROBLEMS
C     THAT CAN OCCUR WHEN CALCULATING COSH + R*SINH FOR NEGATIVE
C     ARGUMENTS AND R CLOSE TO 1.
C
C     THIS EXPRESSION DOES NOT INCLUDE MULTIPLICATION BY F0(E,EP) -
C     THIS NORMALIZATION CAN BE APPLIED TO THE ENTIRE ANGULAR
C     DISTRIBUTION AT THE END.
C
C=======================================================================
      ARG=A*XMU
      BKMEXP=DEXP(ARG)
      FKM=FNORM1*BKMEXP+FNORM2/BKMEXP
      RETURN
   50 FORMAT(1X,78('-')/
     1 ' Projectile=',I7,' Emitted=',I7,' Cannot Define Kalbach-Mann'/
     2 ' Parameters for this Combination - Will use Neutron Parameters'/
     3 1X,78('-'))
      END
      SUBROUTINE TESTY
C=======================================================================
C
C     TEST DATA
C
C     TESTY   = TEST YIELD VS. E
C     TESTI   = I = 1 TO 7 = TEST LAW = 1 TO 7
C     TESTE   = TEST INCIDENT ENERGY INTERPOLATION LAW
C
C=======================================================================
      INCLUDE 'implicit.h'
      INCLUDE 'sixpak.h'
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/TYPLAW/LAWIN(8,13),LAWOUT(8,13),NOUT(4,13),NYIELD(8,2),
     1 MAXLEG(8),MAXMU(8),NANGLE(8,3),NDIST(8,3)
      COMMON/DUMHEAD/ZERO1,ZERO2,L10,L20,N10,N20
      COMMON/YIELD/NBT1(100),INT1(100),NP1,NR1
      COMMON/INNER/NBT3(100),INT3(100),NP3,NR3
      COMMON/FILE4/NPT4
      COMMON/FILE5/NPT5
      COMMON/LISTER/NW
      COMMON/TAB2ER/NBT2(100),INT2(100),NR2
      COMMON/TAB4ER/NBT4(100),INT4(100),NR4
      COMMON/PARTIO/AWRET,IVERSE,IZAI,IZAT,IZAP,NZAT
      COMMON/SPAC3D/EI,EP,XMU
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
      COMMON/MFOUT/MF3,MF4,MF5,MF9,MF12,MF14,MF15,NOSQ3,NOSQ4,NOSQ5,
     1 NOSQ9,NOSQ12,NOSQ14,NOSQ15
      COMMON/OUTME/IMOUT
      COMMON/KMPARM/F0,RKM,FKM
      DATA F0UNIT/1.0d0/
      DATA EPLST /0.0d0/
      DATA XMULST/0.0d0/
c-----04/09/25 - increased from 1.0d-3 (0.1%) to 1.0d-2 (1%)
      DATA ERROK/1.0d-2/
c-----------------------------------------------------------------------
C
C     TEST YIELD VS. ENERGY.
C
c-----------------------------------------------------------------------
      IZERO=0
C-----CHECK TAB1 RECORD.
      CALL CHECK1(X1(1),Y1(1),NBT1,INT1,NR1,NP1,1)
C-----CHECK FOR ENERGY DEPENDENT FIELD.
      YMIN=Y1(1)
      YMAX=Y1(1)
      DO 10 K=1,NP1
      IF(Y1(K).LT.YMIN) YMIN=Y1(K)
      IF(Y1(K).GT.YMAX) YMAX=Y1(K)
   10 CONTINUE
      IF(DABS(YMAX-YMIN).LE.0.001d0*YMAX) NYIELD(IPO,1)=NYIELD(IPO,1)+1
      IF(DABS(YMAX-YMIN).GT.0.001d0*YMAX) NYIELD(IPO,2)=NYIELD(IPO,2)+1
c
c     11/05 - OUTPUT YIELDS FOR MF=9, ONLY FOR MT=5
c
      IF(MTH.EQ.5) THEN
      QM9  = 0.0d0
      QMI  = 0.0d0
c-----USE LIP from MF/MT=6/5 to define LFS MF/MT=9/5.
      LFS9 = LIP
      CALL TAB1O(OTAPE9 ,QM9,QMI,IZAP,LFS9,NR1,NP1,X1,Y1,NBT1,INT1,
     1 MF9,NOSQ9)
c
c     Output decomposed charged particle to MF=3
c
      MTMT5 = 0
      if(IZAP.eq.   1) MTMT5 =  4 ! n' Continuum
      if(IZAP.eq.   2) MTMT5 = 16 ! n' Continuum
      if(IZAP.eq.1001) MTMT5 =103 ! p' Continuum
      if(IZAP.eq.1002) MTMT5 =104 ! d' Continuum
      if(IZAP.eq.1003) MTMT5 =105 ! t' Continuum
      if(IZAP.eq.2003) MTMT5 =106 ! he3' Continuum
      if(IZAP.eq.2004) MTMT5 =107 ! a' Continuum
      if(IZAP.eq.   0) MTMT5 =102 ! n,g
      if(MTMT5.gt.0) CALL OUTMT5(X1(1),Y1(1),NP1,MTMT5)
      ENDIF
      RETURN
C=======================================================================
C
C     LAW=0 CHECKS
C
C=======================================================================
      ENTRY TEST0
C-----PRINT WARNING IF NEUTRON IN AND NEUTRON OR PHOTON OUT.
      IF(IZAI.NE.1) RETURN
      IF(IZAP.EQ.0.OR.IZAP.EQ.1) WRITE(OUTP,720) LAW
      RETURN
C=======================================================================
C
C     LAW=1 CHECKS
C
C=======================================================================
      ENTRY TEST1
C-----CHECK INCIDENT ENERGY.
      CALL CHECKE
      IF(IE.GT.1) GO TO 30
C-----CHECK FOR MORE THAN 1 DISCRETE EMITTED PARTICLE.
C-----O.K FOR PHOTONS
      IF(IPO.NE.1.AND.ND.GT.1) WRITE(OUTP,680) EI,ND
C-----CHECK FOR MIXED DISCRETE AND CONTINUOUS.
      IF(ND.GT.0.AND.NEP.NE.ND) WRITE(OUTP,690) EI,ND,NEP
C-----CHECK FOR CONTINUOUS ENERGY WITH NO SECONDARY ENERGY RANGE.
      IF(ND.EQ.0.AND.NEP.LT.2) WRITE(OUTP,700) EI,NEP
C-----INITIALIZE ISOTROPIC AND ENERGY DISTRIBUTION FLAGS.
      NALL=0
      IF(NA.NE.0) NALL=1
      NDALL=0
      IF(ND.GT.0.AND.ND.EQ.NEP) NDALL=1
      IF(ND.GT.0.AND.ND.NE.NEP) NDALL=2
C-----IF OUTPUT FLAG SET - OUTPUT START OF SECTION.
      IF(IMOUT.NE.0) CALL OUT1
C-----FOR LANG=2 (KALBACH-MANN) NEED NA=1.
      IF(LANG.NE.2) GO TO 20
      IF(NA.NE.1) WRITE(OUTP,530) EI,LANG,NA
C-----EXPECT KALBACH-MANN ONLY FOR ISOTOPES - NO ELEMENTAL MIXTURES.
      IF(MOD(IZAT,1000).EQ.0) WRITE(OUTP,540) IZAT,NZAT
C-----EXPECT KALBACH-MANN ONLY IN C.M. SYSTEM.
      IF(LCT.NE.2) WRITE(OUTP,550)
C-----INITIALIZE KALBACH-MANN PARAMETERS.
      CALL OHMANN
C-----ERROR IF LANG NOT 1, 2, 11-15.
   20 LANGX=LANG
      IF(LANG.EQ.1.OR.LANG.EQ.2) GO TO 30
C-----FOR TABULATED DATA DEFINE INTERPOLATION LAW IN RANGE = 1 TO 5.
      IF(LANG.GE.11.AND.LANG.LE.15) GO TO 30
      IF(LANGX.GE.11) LANGX=LANGX-10*(LANGX/10)
      IF(LANGX.LT.1.OR.LANGX.GT.5) LANGX=2
      WRITE(OUTP,490) LANG,LANGX
C-----ERROR IF LEP NOT 1-5
   30 LEPX=LEP
      IF(LEP.GE.1.AND.LEP.LE.5) GO TO 40
      IF(LEPX.GE.11) LEPX=LEPX-10*(LEPX/10)
      IF(LEPX.LT.1.OR.LEPX.GT.5) LEPX=2
      WRITE(OUTP,510) LEP,LEPX
C-----CHECK FOR NW=NEP*(NA+2).
   40 NAP2=NA+2
      NWX=NEP*NAP2
      IF(NW.NE.NWX) WRITE(OUTP,460) EI,NW,NEP,NA
C-----CHECK FOR NEP AT LEAST AS LARGE AS ND
      IF(NEP.LT.ND) WRITE(OUTP,470) EI,NEP,ND
C-----CHECK ISOTROPIC VS. ANISTROPIC.
      NALLX=0
      IF(NA.NE.0) NALLX=1
      IF(NALLX.NE.NALL) NALL=2
      IF(IE.EQ.NE) NANGLE(IPO,NALL+1)=NANGLE(IPO,NALL+1)+1
C-----ENERGY DISTRIBUTION - CONTINUOUS/DISCRETE/MIXED
      NDALLX=0
      IF(ND.GT.0.AND.ND.EQ.NEP) NDALLX=1
      IF(ND.GT.0.AND.ND.NE.NEP) NDALLX=2
      IF(NDALLX.NE.NDALL) NDALL=2
      IF(IE.EQ.NE) NDIST(IPO,NDALL+1)=NDIST(IPO,NDALL+1)+1
C-----SKIP TESTS IF NW ,NEP AND NA ARE NOT CONSISTENT =
C-----CANNOT DETERMINE STRUCTURE OF TABLE.
      IF(NW.NE.NWX) RETURN
C-----INITIALIZE OUTPUT POINT COUNTS.
      NPT4=0
      NPT5=0
C-----SET UP SECONDARY ENERGY INTERPOLATION LAW.
      NR4=1
      NBT4(1)=NEP
      INT4(1)=LEPX
C-----FOR LANG=2 (KALBACH-MANN) SET UP FIXED COSINE GRID.
      IF(LANG.NE.2) GO TO 60
      NR3=1
      NP3=41
      NBT3(1)=NP3
      INT3(1)=4
      II=-NP3/2
      DMU=-II
      DO 50 I=1,NP3
      X3(I)=II
      X3(I)=X3(I)/DMU
      II=II+1
   50 CONTINUE
      X3(NP3)=1.0d0
C-----CHECK DATA.
   60 DO 210 I=1,NW,NAP2
c-----------------------------------------------------------------------
C
C     GENERAL CHECKS - SAME FOR ALL REPRESENTATIONS.
C
c-----------------------------------------------------------------------
      NPT4=NPT4+1
      EP=XLIST(I)
      F0=XLIST(I+1)
c-----------------------------------------------------------------------
C
C     CHECK F0 = SPECTRUM.
C
c-----------------------------------------------------------------------
C-----CHECK F0 - NORMALIZATION POSITIVE.
      IF(F0.eq.0.0D+0) go to 90
      IF(F0.gt.0.0D+0) go to 70
C-----NEGATIVE NORMALIZATION IS AN ERROR - SET = 0.
      WRITE(OUTP,610) EI,EP,F0
      F0=0.0d0
      GO TO 90
C-----EXPECT F0=0 AT END OF HISTOGRAM.
   70 IF(NEP.LE.1.OR.NPT4.LT.NEP.OR.LEPX.NE.1) GO TO 80
      GO TO 90
C-----F0 SHOULD BE 1.0 FOR DISCRETE PHOTONS.
   80 IF(NPT4.GT.ND) GO TO 90
c-----------------------------------------------------------------------
C
C     SAVE SPECTRUM.
C
c-----------------------------------------------------------------------
   90 X4(NPT4)=DABS(EP)
      Y4(NPT4)=F0
C-----EP CANNOT BE NEGATIVE - if it is set = 0
      IF(EP.LT.0.0d0) WRITE(OUTP,600) EI,EP
      EP=EPLST
C-----CHECK FOR ISOTROPIC DATA.
      IF(NA.GT.0) GO TO 110
c-----------------------------------------------------------------------
C
C     DATA IS ISOTROPIC - SET UP EITHER ISOTROPIC TABULATED OR
C     1 LEGENDRE COEFFICIENT = 0.0.
C
c-----------------------------------------------------------------------
      IF(LANG.EQ.1) GO TO 100
C-----TABULATED.
      NP3=2
      X3(1)=-1.0d0
      Y3(1)= 0.5d0
      X3(2)= 1.0d0
      Y3(2)= 0.5d0
      NBT3(1)=2
      INT3(1)=LANGX
      NR3=1
      GO TO 170
C-----LEGENDRE.
  100 NP3=1
      X3(1)=1.0d0
      Y3(1)=0.0d0
      NBT3(1)=1
      INT3(1)=2
      NR3=1
C-----NO HIGHER ORDER LEGENDRE COEFFICIENTS TO CHECK.
      GO TO 140
C-----DEFINE INDICES TO REMAINING PARAMETERS.
  110 I2=I+2
      I3=I+1+NA
c-----------------------------------------------------------------------
C
C     FOR ALL TYPES OF DATA SET UP TO LOOK EITHER LIKE A TABULATED
C     ANGULAR DISTRIBUTION OR A SET OF LEGENDRE COEFFICIENTS AND
C     THEN INTEGRATE OVER EP.
C
c-----------------------------------------------------------------------
C-----SELECT TYPE OF DATA.
      IF(LANG.LT.11) GO TO 120
c-----------------------------------------------------------------------
C
C     TABULATED ANGULAR DISTRIBUTION.
C
c-----------------------------------------------------------------------
C-----KEEP TRACK OF MAXIMUM NUMBER OF TABULATED COSINES
      NA2=NA/2
      IF(NA2.GT.MAXMU(IPO)) MAXMU(IPO)=NA2
C-----COPY TABLE AND TREAT AS TAB1 RECORD FOR TESTS AND INTEGRATION.
      CALL LSTTAB(I2,I3,LANGX)
C-----DATA IS NOW SET UP TO START INTEGRATION OVER SECONDARY ENERGY.
      GO TO 170
  120 IF(LANG.NE.1) GO TO 150
c-----------------------------------------------------------------------
C
C     LEGENDRE COEFFICIENTS.
C
c-----------------------------------------------------------------------
C-----COPY COEFFICIENTS TO TAB1 FOR INTEGRATION OVER SECONDARY
C-----ENERGY.
      NP3=0
      DO 130 K=I2,I3
      NP3=NP3+1
      X3(NP3)=NP3
      Y3(NP3)=XLIST(K)
  130 CONTINUE
      NBT3(1)=NP3
      INT3(1)=2
      NR3=1
C-----CHECK LEGENDRE HIGHER ORDER COEFFICIENTS.
      CALL CHECKL(F0,Y3,1,NP3,1)
C-----CHECK TAB1 SET UP.
  140 CALL CHECK1(X3,Y3,NBT3,INT3,NR3,NP3,5)
C-----LEGENDRE COEFFICIENTS AT FIRST AND LAST SECONDARY ENERGIES.
      CALL PLOT1A
C-----DATA IS NOW SET UP TO START INTEGRATION OVER SECONDARY ENERGY.
      GO TO 190
  150 IF(LANG.NE.2) GO TO 210
c-----------------------------------------------------------------------
C
C     KALBACH-MANN.
C
c-----------------------------------------------------------------------
C-----CHECK FOR PRE-COMPUND FRACTION 0 TO 1
      RKM=XLIST(I2)
      IF(RKM.LT.0.0d0.OR.RKM.GT.1.0d0)
     1 WRITE(OUTP,520) EI,EP,RKM
C-----INITIALIZE PARAMETERS.
      CALL HEMANN
C-----CALCULATE ANGULAR DISTRIBUTION.
      DO 160 K=1,NP3
      XMU=X3(K)
      CALL GOMANN
      Y3(K)=FKM
  160 CONTINUE
c-----------------------------------------------------------------------
C
C     CHECK INTEGRAL OF ANGULAR DISTRIBUTION.
C
c-----------------------------------------------------------------------
C-----CHECK TAB1 SET UP.
  170 CALL CHECK1(X3,Y3,NBT3,INT3,NR3,NP3,4)
C-----ANGULAR DISTRIBUTIONS AT FIRST AND LAST SECONDARY ENERGIES.
      CALL PLOT1A
C-----INTEGRATE ANGULAR DISTRIBUTION AND CHECK.
      XINTMU=XINT2(X3,Y3,NBT3,INT3,NR3)
      IF(DABS(XINTMU-1.0d+0).GT.ERROK) WRITE(OUTP,640) EI,EP,XINTMU
C-----NORMALIZE TO F0.
      DO 180 K=1,NP3
      Y3(K)=F0*Y3(K)
  180 CONTINUE
C-----SAVE COS = -1 AND +1 FOR PLOTTAB OUTPUT.
      CALL PLOT2A
c-----------------------------------------------------------------------
C
C     INTEGRATION OVER SECONDARY ENERGIES - ALL TYPES OF DATA.
C
c-----------------------------------------------------------------------
C-----INITIALIZE ON FIRST SECONDARY ENERGY AND INTEGRATE ON ALL OTHERS.
C-----CHECK.
  190 IF(NPT4.GT.1) GO TO 200
      CALL MERGE1
      GO TO 210
  200 CALL MERGE2
C-----END OF SECONDARY ENERGY LOOP.
  210 CONTINUE
c-----------------------------------------------------------------------
C
C     IF ONLY 1 SECONDARY ENERGY USE THE ANGULAR DISTRIBUTION
C     AND CREATE A SPIKE SPECTRUM NEAR THE 1 ENERGY.
C
c-----------------------------------------------------------------------
      IF(NPT4.GT.1) GO TO 240
      DO 220 I=1,NP3
      X5(I)=X3(I)
      Y5(I)=Y3(I)
  220 CONTINUE
C-----SPIKE CENTERED AT EP AND 0.1 PER-CENT OF EP WIDE.
      NPT4=3
      NR4=1
      INT4(1)=2
      NBT4(1)=NPT4
      EP=DABS(EP)
C-----PRINT WARNING IF DISCRETE ENERGY IS NOT POSITIVE.
      IF(EP.GT.0.0d0) GO TO 230
      WRITE(OUTP,670) EI,EP
      EP   =1.0d0
  230 DEP  =0.001d0*EP
      X4(1)=EP-DEP
      X4(2)=EP
      X4(3)=EP+DEP
      Y4(1)=0.0d0
      Y4(2)=F0/DEP       ! area = (1/2)*base*height = F0
      Y4(3)=0.0d0
c-----------------------------------------------------------------------
C
C     INTEGRATE SPECTRUM AND SECONDARY ENERGY AVERAGED ANGULAR
C     DISTRIBUTION OR LEGENDRE COEFFICIENTS.
C
C     SPECTRUM.
C
c-----------------------------------------------------------------------
C-----10/15/2012 - FOR PHOTONS SORT INTO ASCENDING ENERGY.
  240 IF(IMOUT.EQ.1) CALL SORTD(X4,Y4,NPT4)
C-----CHECK SPECTRUM.
      CALL SHOLE(X4,Y4,NBT4,INT4,NR4)
C-----INTEGRATE SPECTRUM.
      XINTEP=XINT2(X4,Y4,NBT4,INT4,NR4)
C-----DO NOT NORMALIZE PHOTON DATA
      IF(IPO.NE.1) THEN
      IF(DABS(XINTEP-1.0d0).GT.ERROK) WRITE(OUTP,660) EI,XINTEP
C-----RENORMALIZE TO EXACTLY UNITY.
      CALL RENORM(Y4,NPT4,XINTEP)
      ENDIF
      IF(LANG.NE.1) GO TO 250
c-----------------------------------------------------------------------
C
C     AVERAGED LEGENDRE COEFFICIENTS.
C
c-----------------------------------------------------------------------
      CALL PLOT1B
C-----NORMALIZE TO F0.
      CALL RENORM(Y5,NP3,XINTEP)
C-----CHECK LEGENDRE COEFFICIENTS.
      CALL CHECKL(F0UNIT,Y5,1,NP3,5)
      GO TO 260
c-----------------------------------------------------------------------
C
C     AVERAGED ANGULAR DISTRIBUTION.
C
c-----------------------------------------------------------------------
C-----CHECK ANGULAR DISTRIBUTION.
  250 CALL AHOLE(X5,Y5,NBT3,INT3,NR3)
C-----INTEGRATE ANGULAR DISTRIBUTION.
      XINTMU=XINT2(X5,Y5,NBT3,INT3,NR3)
      IF(DABS(XINTMU-1.0d0).GT.ERROK) WRITE(OUTP,650) EI,XINTMU
C-----RENORMALIZE TO EXACTLY UNITY.
      CALL RENORM(Y5,NP3,XINTMU)
C-----AVERAGED ANGULAR DISTRIBUTION.
      CALL PLOT1B
C-----SPECTRA AT COS = -1, +1 AND AVERAGE.
  260 CALL PLOT2B
c-----------------------------------------------------------------------
C
C     IF ANY ENDF/B OUTPUT DO IT NOW.
C
c-----------------------------------------------------------------------
      IF(IMOUT.lt.1) go to 280
      IF(IMOUT.gt.1) go to 270
c-----------------------------------------------------------------------
C
C     PHOTONS
C
c-----------------------------------------------------------------------
      CALL TAB1O(OTAPE15,ZERO1,EI,L10,L20,NR4,NPT4,X4,Y4,
     1 NBT4,INT4,MF15,NOSQ15)
      RETURN
c-----------------------------------------------------------------------
C
C     NEUTRON - ANGULAR DISTRIBUTIONS.
C
c-----------------------------------------------------------------------
  270 IF(LANG.NE.1)
     1 CALL TAB1O(OTAPE4,ZERO1,EI,L10,L20,NR3,NP3,X5,Y5,
     2 NBT3,INT3,MF4,NOSQ4)
      IF(LANG.EQ.1)
     1 CALL LISTOUT(OTAPE4,ZERO1,EI,L10,L20,NP3,IZERO,Y5,MF4,NOSQ4)
c-----------------------------------------------------------------------
C
C     NEUTRON - SPECTRUM.
C
c-----------------------------------------------------------------------
      IF(IMOUT.NE.3) GO TO 280
c-----------------------------------------------------------------------
c
c     2019/6/30 - Insure Histogram ends with Y = 0
c
c-----------------------------------------------------------------------
      CALL HIGHEND(X4(1),Y4(1),NBT4(1),INT4(1),NR4,NPT4)
C-----IF DATA IS IN CENTER OF MASS SYSTEM PERFORM FIRST ORDER CONVERSION
C-----TO LAB SYSTEM.
      CALL CM2LAB(X4,Y4,NPT4,NBT4,INT4,NR4)
      CALL TAB1O(OTAPE5,ZERO1,EI,L10,L20,NR4,NPT4,X4,Y4,NBT4,INT4,
     1 MF5,NOSQ5)
  280 RETURN
C=======================================================================
C
C     LAW=2 CHECKS
C
C=======================================================================
      ENTRY TEST2
      NPT4=NPT4+1
      X4(NPT4)=EI
C-----IF OUTPUT FLAG SET - OUTPUT START OF SECTION.
      IF(IE.EQ.1.AND.IMOUT.NE.0) CALL OUT1
C-----CHECK FOR NW=NL (LANG=0) OR NW=2*NL (LANG NOT = 0).
      NWX=NL
      IF(LANG.GT.0) NWX=NL+NL
C-----SKIP TESTS IF NW ,NL AND LANG ARE NOT CONSISTENT =
C-----CANNOT DETERMINE STRUCTURE OF TABLE.
      IF(NW.EQ.NWX) GO TO 290
      WRITE(OUTP,560) EI,NW,NL,LANG,NWX
      RETURN
C-----EXPECT LANG = 0 TO 5.
  290 LANGX=LANG
      IF(LANG.GE.0.AND.LANG.LE.5) GO TO 300
      IF(LANGX.GE.11) LANGX=LANGX-10*(LANGX/10)
      IF(LANGX.LT.1.OR.LANGX.GT.5) LANGX=2
C-----SAVE FIRST LANG AND COMPARE TO OTHERS - ONLY IF NEUTRON
C-----ANGULAR DISTRIBUTIONS WILL BE OUTPUT.
  300 IF(IMOUT.LT.2) GO TO 310
      IF(IE.EQ.1) LANG1=LANG
C-----ONLY PRINT MESSAGE ONCE.
      IF(LANG1.LE.0) GO TO 310
      IF(LANG.EQ.LANG1) GO TO 310
      LANG1=0
      WRITE(OUTP,730)
c-----------------------------------------------------------------------
C
C     SELECT TYPE OF DATA.
C
c-----------------------------------------------------------------------
  310 IF(LANG.NE.0) GO TO 320
c-----------------------------------------------------------------------
C
C     LEGENDRE COEFFICIENTS.
C
c-----------------------------------------------------------------------
C-----CHECK LEGENDRE COEFFICIENTS.
      CALL CHECKL(F0UNIT,XLIST,1,NW,2)
C-----OUTPUT COEFFICIENTS.
      IF(IMOUT.GE.2)
     1 CALL LISTOUT(OTAPE4,ZERO1,EI,IZERO,IZERO,NW,IZERO,
     2 XLIST,MF4,NOSQ4)
      RETURN
c-----------------------------------------------------------------------
C
C     TABULATED DATA.
C
c-----------------------------------------------------------------------
C-----COPY TABLE AND TREAT AS TAB1 RECORD FOR TESTS AND INTEGRATION.
  320 CALL LSTTAB(1,NW,LANGX)
C-----CHECK.
      CALL CHECK1(X3,Y3,NBT3,INT3,NR3,NP3,4)
C-----INTEGRATE SPECTRUM.
      XINTMU=XINT2(X3,Y3,NBT3,INT3,NR3)
C-----DO NOT NORMALIZE PHOTON DATA
      IF(IPO.NE.1) THEN
      IF(DABS(XINTMU-1.0d0).GT.ERROK) WRITE(OUTP,630) EI,XINTMU
C-----RENORMALIZE TO EXACTLY UNITY.
      CALL RENORM(Y3,NP3,XINTMU)
      ENDIF
C-----KEEP TRACK OF MAXIMUM NUMBER OF COSINES
      IF(NL.GT.MAXMU(IPO)) MAXMU(IPO)=NL
C-----OUTPUT TABLE.
      IF(IMOUT.GE.2)
     1 CALL TAB1O(OTAPE4,ZERO1,EI,L10,L20,NR3,NP3,X3,Y3,NBT3,INT3,
     1 MF4,NOSQ4)
      RETURN
C=======================================================================
C
C     LAW=3 CHECKS
C
C=======================================================================
      ENTRY TEST3
C-----IF ANY ENDF/B OUTPUT DO IT NOW = ISOTROPIC MF=4 DATA.
      IF(IMOUT.EQ.2) CALL OUT1
      RETURN
C=======================================================================
C
C     LAW=4 CHECKS
C
C=======================================================================
      ENTRY TEST4
C-----PRINT WARNING IF NEUTRON IN AND NEUTRON OR PHOTON OUT.
      IF(IZAI.NE.1) RETURN
      IF(IZAP.EQ.0.OR.IZAP.EQ.1) WRITE(OUTP,720) LAW
      RETURN
C=======================================================================
C
C     LAW=5 CHECKS
C
C=======================================================================
      ENTRY TEST5
      NPT4=NPT4+1
      X4(NPT4)=EI
C-----PRINT WARNING IF NEUTRON IN AND NEUTRON OR PHOTON OUT.
      IF(IZAI.NE.1) GO TO 330
      IF(IZAP.EQ.0.OR.IZAP.EQ.1) WRITE(OUTP,720) LAW
C-----CHECK INCIDENT ENERGY.
  330 CALL CHECKE
C-----EXPECT LTP = 1, 2 OR 11-15
      LTPX=LTP
      IF(LTP.EQ.1.OR.LTP.EQ.2) GO TO 340
      IF(LTP.GE.11.AND.LTP.LE.15) GO TO 340
      IF(LTPX.GE.11) LTPX=LTPX-10*(LTPX/10)
      IF(LTPX.LT.1.OR.LTPX.GT.5) LTPX=2
      WRITE(OUTP,500) LTP,LTPX
C-----CHECK LIDP = 0, UNLESS PROJECTILE AND TARGET ARE IDENTICAL.
  340 IF(IZAI.EQ.IZAT.AND.LIDP.NE.1) WRITE(OUTP,580) LIDP
      IF(IZAI.NE.IZAT.AND.LIDP.NE.0) WRITE(OUTP,590) LIDP
C-----CHECK FOR NW=4*NL+3 (LTP=1, LIDP=0)
C-----            =3*NL+3 (LTP=1, LIDP=1)
C-----            =NL+1   (LTP=2)
C-----            =2*NL   (LTP GREATER THAN 2)
      IF(LTP.EQ.1.AND.LIDP.EQ.0) NWX=4*NL+3
      IF(LTP.EQ.1.AND.LIDP.EQ.1) NWX=3*NL+3
      IF(LTP.EQ.2) NWX=NL+1
      IF(LTP.GT.2) NWX=2*NL
C-----SKIP TESTS IF NW ,NL AND LANG ARE NOT CONSISTENT =
C-----CANNOT DETERMINE STRUCTURE OF TABLE.
      IF(NW.EQ.NWX) GO TO 350
      WRITE(OUTP,570) EI,NW,NL,LTP,LIDP,NWX
      RETURN
C-----TEST COEFFICIENTS.
  350 IF(LTP.eq.2) go to 360
      IF(LTP.gt.2) go to 370
c-----------------------------------------------------------------------
C
C     LEGENDRE COEFFICIENTS FOR BN AND AN
C
c-----------------------------------------------------------------------
C-----EITHER NL+1 OR 2*NL+1 COEFFICIENTS.
      NLP1=NL+1
      IF(LIDP.EQ.0) NLP1=NL+NL+1
C-----TEST BL COEFFICIENTS.
      B0=XLIST(1)
      CALL CHECKL(B0,XLIST,2,NLP1,3)
C-----TEST RA AND IA
      II=NLP1+1
      CALL CHECKL(B0,XLIST,II,NW,6)
      RETURN
c-----------------------------------------------------------------------
C
C     LEGENDRE COEFFICIENTS FOR CN
C
c-----------------------------------------------------------------------
C-----TEST CN COEFFICIENTS.
  360 C0=XLIST(1)
      CALL CHECKL(C0,XLIST,2,NW,4)
      RETURN
c-----------------------------------------------------------------------
C
C     TABULATED DATA.
C
c-----------------------------------------------------------------------
C-----FOR SIMILAR PARTICLES EXPECT COS = 0 TO +1, OTHERWISE -1 TO +1
  370 IF(LIDP.EQ.0) GO TO 380
      IF(XLIST(1).NE.0.0d0.OR.XLIST(NW-1).NE.1.0d0)
     1 WRITE(OUTP,440) EI,XLIST(1),XLIST(NW-1)
      GO TO 390
  380 IF(XLIST(1).NE.-1.0d0.OR.XLIST(NW-1).NE.1.0d0)
     1 WRITE(OUTP,450) EI,XLIST(1),XLIST(NW-1)
C-----COPY TABLE AND TREAT AS TAB1 RECORD FOR TESTS AND INTEGRATION.
  390 CALL LSTTAB(1,NW,LTPX)
C-----CHECK.
      CALL CHECK1(X3,Y3,NBT3,INT3,NR3,NP3,4)
C-----INTEGRATE SPECTRUM.
      XINTMU=XINT2(X3,Y3,NBT3,INT3,NR3)
C-----DO NOT NORMALIZE PHOTON DATA
      IF(IPO.NE.1) THEN
      IF(DABS(XINTMU-1.0d0).GT.ERROK) WRITE(OUTP,630) EI,XINTMU
      ENDIF
C-----KEEP TRACK OF MAXIMUM NUMBER OF COSINES
      IF(NL.GT.MAXMU(IPO)) MAXMU(IPO)=NL
      RETURN
C=======================================================================
C
C     LAW=6 CHECKS
C
C=======================================================================
      ENTRY TEST6
C-----THIS DATA IS NOT TRANSLATED. PRINT WARNING IF NEUTRON INCIDENT
C-----AND PHOTON OR NEUTRON EMITTED.
      IF(IZAI.NE.1) RETURN
      IF(IZAP.EQ.0.OR.IZAP.EQ.1) WRITE(OUTP,710)
      RETURN
C=======================================================================
C
C     LAW=7 CHECKS
C
C=======================================================================
      ENTRY TEST7
c-----------------------------------------------------------------------
C
C     INITIALIZE ON FIRST COSINE.
C
c-----------------------------------------------------------------------
      IF(IMU.NE.1) GO TO 400
C-----CHECK INCIDENT ENERGY.
      CALL CHECKE
C-----IF OUTPUT FLAG SET - OUTPUT START OF SECTION.
      IF(IE.EQ.1.AND.IMOUT.NE.0) CALL OUT1
C-----INITIALIZE OUTPUT POINT COUNTS.
      NPT4=0
      NPT5=0
C-----KEEP TRACK OF MAXIMUM NUMBER OF COSINES
      IF(NMU.GT.MAXMU(IPO)) MAXMU(IPO)=NMU
C-----CHECK FOR COSINE INTERPOLATION LAW ERRORS.
      CALL CHECK2(NBT4,INT4,NR4,NMU,4)
C-----DEFINE SECONDARY ENERGY GRID BASED ON ENERGIES WITH FIRST COSINE.
      CALL MERGE1
c-----------------------------------------------------------------------
C
C     CONTINUE FOR ALL COSINES.
C
c-----------------------------------------------------------------------
C-----CHECK FOR COSINE -1 TO +1
  400 IF(DABS(XMU).GT.1.0d0) WRITE(OUTP,620) EI,XMU
C-----CHECK FOR INCREASING ORDER.
      IF(IMU.GT.1.AND.XMU.LE.XMULST)
     1 WRITE(OUTP,480) EI,XMU,XMULST
      XMULST=XMU
C-----CHECK TAB1 RECORD.
      CALL CHECK1(X3,Y3,NBT3,INT3,NR3,NP3,2)
C-----INTEGRAL OVER EP.
      XINTEP=XINT2(X3,Y3,NBT3,INT3,NR3)
C-----SAVE INTEGRAL OVER EP - TO DEFINE AVERAGE ANGULAR DISTRIBUTION.
      NPT4=IMU
      X4(NPT4)=XMU
      Y4(NPT4)=XINTEP
C-----OUTPUT SPECTRA AT FIXED COSINES.
      CALL PLOT3A
c-----------------------------------------------------------------------
C
C     AFTER FIRST COSINE DEFINE INTEGRALS OVER COSINE.
C
c-----------------------------------------------------------------------
      IF(IMU.EQ.1) GO TO 410
C-----DEFINE MERGED ENERGY GRID AND INTEGRATE.
      CALL MERGE2
c-----------------------------------------------------------------------
C
C     NOTHING ELSE TO DO UNLESS ALL COSINES HAVE BEEN PROCESSED.
C
c-----------------------------------------------------------------------
  410 IF(IMU.NE.NMU) RETURN
c-----------------------------------------------------------------------
C
C     CHECK INTEGRAL OF ANGULAR DISTRIBUTION AND SPECTRUM.
C
c-----------------------------------------------------------------------
C-----CHECK ANGULAR DISTRIBUTION.
      CALL AHOLE(X4,Y4,NBT4,INT4,NR4)
C-----NORMALIZE ANGULAR DISTRIBUTION.
      SUM4=XINT2(X4,Y4,NBT4,INT4,NR4)
      IF(DABS(SUM4-1.0d0).GT.ERROK) WRITE(OUTP,650) EI,SUM4
      CALL RENORM(Y4,NPT4,SUM4)
C-----CHECK SPECTRUM.
      CALL SHOLE(X5,Y5,NBT3,INT3,NR3)
C-----NORMALIZE SPECTRUM.
      SUM5=XINT2(X5,Y5,NBT3,INT3,NR3)
C-----DO NOT NORMALIZE PHOTON DATA
      IF(IPO.NE.1) THEN
      IF(DABS(SUM5-1.0d0).GT.ERROK) WRITE(OUTP,660) EI,SUM5
      CALL RENORM(Y5,NPT5,SUM4)
      ENDIF
C-----OUTPUT SPECTRA AVERAGED OVER COSINE.
      CALL PLOT3B
c-----------------------------------------------------------------------
C
C     IF ANY ENDF/B OUTPUT DO IT NOW.
C
c-----------------------------------------------------------------------
      IF(IMOUT.lt.1) go to 430
      IF(IMOUT.gt.1) go to 420
C-----PHOTONS
      CALL TAB1O(OTAPE15,ZERO1,EI,L10,L20,NR3,NPT5,X5,Y5,NBT3,INT3,
     1 MF15,NOSQ15)
      RETURN
C-----NEUTRON - ANGULAR DISTRIBUTIONS.
  420 CALL TAB1O(OTAPE4,ZERO1,EI,L10,L20,NR4,NPT4,X4,Y4,NBT4,INT4,
     1 MF4,NOSQ4)
C-----NEUTRON - SPECTRUM.
      IF(IMOUT.NE.3) GO TO 430
c-----------------------------------------------------------------------
c
c     2019/6/30 - Insure Histogram ends with Y = 0
c
c-----------------------------------------------------------------------
      CALL HIGHEND(X5(1),Y5(1),NBT3(1),INT3(1),NR3,NPT5)
C-----IF DATA IS IN CENTER OF MASS SYSTEM PERFORM FIRST ORDER CONVERSION
C-----TO LAB SYSTEM.
      CALL CM2LAB(X5,Y5,NPT5,NBT3,INT3,NR3)
      CALL TAB1O(OTAPE5,ZERO1,EI,L10,L20,NR3,NPT5,X5,Y5,NBT3,INT3,
     1 MF5,NOSQ5)
  430 RETURN
C=======================================================================
C
C     CHECK INCIDENT ENERGY INTERPOLATION LAW.
C
C=======================================================================
      ENTRY TESTE
C-----CHECK FOR INCIDENT ENERGY INTERPOLATION LAW ERRORS.
      CALL CHECK2(NBT2,INT2,NR2,NE,2)
      RETURN
  440 FORMAT(1X,78('-')/' E=',1PE11.4,' Cos=',1PE11.4,' to ',1PE11.4,
     1 ' (Expect 0 TO +1)')
  450 FORMAT(1X,78('-')/' E=',1PE11.4,' Cos=',1PE11.4,' to ',1PE11.4,
     1 ' (Expect -1 TO +1)')
  460 FORMAT(1X,78('-')/' E=',1PE11.4,' NW/NEP/NA=',3I5,
     1 ' (Expect NW = NEP*(NA+2))'/1X,78('-'))
  470 FORMAT(1X,78('-')/' E=',1PE11.4,' NEP/ND=',2I5,
     1 ' (expect NEP.ge.ND)'/1X,78('-'))
  480 FORMAT(1X,78('-')/' Cosines NOT in Ascending Order'/
     1 ' E=',1PE11.4,' Cos=',1PE11.4,1PE11.4/1X,78('-'))
  490 FORMAT(1X,78('-')/' LANG=',I6,' (Expect 1, 2 or 11 to 15.',
     1 ' Will Use',I6,')'/1X,78('-'))
  500 FORMAT(1X,78('-')/' LTP=',I6,' (Expect 1, 2 or 11 to 15.',
     1 ' WILL USE',I6,')'/1X,78('-'))
  510 FORMAT(1X,78('-')/' LEP=',I6,' (Expect 1 to 5. WILL USE',I6,')'/
     1 1X,78('-'))
  520 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,' R=',1PE11.4,' (Expect 0 TO 1)'/
     1 1X,78('-'))
  530 FORMAT(1X,78('-')/' E=',1PE11.4,' LANG/NA=',2I5,
     1 ' (Expect NA=1)'/1X,78('-'))
  540 FORMAT(1X,78('-')/' Expect Kalbach-Mann ONLY for Isotopes'/
     1' For Actual ZA=',I6,' Will Use Dummy ZA=',I6,' to define',
     2 ' Parameters'/
     3 1X,78('-'))
  550 FORMAT(1X,78('-')/' Expect Kalbach-Mann ONLY in c.m. System'/
     1 1X,78('-'))
  560 FORMAT(1X,78('-')/' E=',1PE11.4,' NW/NL/LANG=',3I5/
     1 ' (Expect NW =',I6,')'/1X,78('-'))
  570 FORMAT(1X,78('-')/' E=',1PE11.4,' NW/NL/LTP/LIDP=',4I5/
     1 ' (Expect NW =',I6,')'/1X,78('-'))
  580 FORMAT(1X,78('-')/' LIDP=',I5,' (Expect 1 when ZAP = ZA)')
  590 FORMAT(1X,78('-')/' LIDP=',I5,' (Expect 0 when ZAP NOT = ZA)')
  600 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,' (Negative EP)'/1X,78('-'))
  610 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,' F0=',1PE11.4,' (F0 Negative',
     2 ' Set=0)'/1X,78('-'))
  620 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' Cos=',1PE11.4,' (Cos NOT -1 to +1)'/1X,78('-'))
  630 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' Integral=',1PE11.4,' (Expect Integral=1)'/
     2 1X,78('-'))
  640 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,' Integral=',1PE11.4,
     2 ' (Expect Integral=1)'/1X,78('-'))
  650 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' Angular Integral=',1PE11.4,
     2 ' (Expect Integral=1)'/1X,78('-'))
  660 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' Spectrum Integral=',1PE11.4,
     2 ' (Expect Integral=1)'/1X,78('-'))
  670 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,' (Discrete Energy NOT Positive)'/
     2 1X,78('-'))
  680 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' ND=',I5,' (More than 1 Discrete Energy)'/
     2 1X,78('-'))
  690 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' ND=',I5,' NEP=',I5,' (Discrete and Continuous',
     2 ' Distributions Mixed)'/1X,78('-'))
  700 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' NEP=',I5,' (No Secondary Energy Range)'/
     2 1X,78('-'))
  710 FORMAT(1X,78('-')/
     1 ' WARNING - Law= 6 Data is NOT Output by this Code'/1X,78('-'))
  720 FORMAT(1X,78('-')/' WARNING:',
     1 ' Law=',I5,' Assume Nu-Bar Data - Section Skipped'/
     2 1X,78('-'))
  730 FORMAT(1X,78('-')/
     1 ' Both Tabulated and Legendre Data - ENDF/B Output Incorrect'/
     2 1X,78('-'))
      END
      SUBROUTINE SHOLE(ES,SP,NBTS,INTS,NRS)
C=======================================================================
C
C     CHECK AVERAGED SPECTRUM
C
C     1) NEGATIVE SPECTRUM IS ALWAYS AN ERROR.
C     2) ENERGIES MUST BE IN NON-DESCENDING ORDER - EQUALITY O.K.
C     3) SPECTRUM = 0 WITH LOG INTERPOLATION IS AN ERROR.
C     4) FOR NEUTRON IN - NEUTRON OUT REACTIONS - ERROR IF SPECTRUM
C        GOES FROM + TO 0 BACK TO +. RANGES OF 0 ARE ALLOWED AT THE
C        BEGINNING OR END OF THE TABLE.
C
C     WARNING - IS1 to IS2 is energy range where spectrum = 0.
C               Currently not used, but left in place for possible
C               future use.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/SPAC3D/EI,EP,XMU
      COMMON/PARTIO/AWRET,IVERSE,IZAI,IZAT,IZAP,NZAT
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
c-----2019/6/27 - Currently unused IS1 and IS2 energy range indices
      COMMON/COMIS12/IS1,IS2
      DIMENSION ES(*),SP(*),NBTS(100),INTS(100)
C-----INITIALIZE POSITIVE SPECTRUM FOUND FLAG.
      KMPLUS=0
C-----LOOP OVER INTERPOLATION REGIONS.
      EMESS = 0.0d0
      IPT1=1
      DO 60 IR=1,NRS
      IPT2=NBTS(IR)
      INTX=INTS(IR)
      IF(INTX.GT.10) INTX=INTX-10*(INTX/10)
C-----INSURE VALUE FOR LAST ENERGY OF HISTOGRAM IS ZERO.
      IF(IR.NE.NRS.OR.INTX.NE.1) GO TO 10
C-----LOOP OVER POINTS.
   10 DO 50 IS=IPT1,IPT2
C-----CHECK FOR NEGATIVE OR ZERO SPECTRUM.
      IF(SP(IS).eq.0.0d0) go to 20
      IF(SP(IS).gt.0.0d0) go to 30
C-----NEGATIVE SPECTRUM IS ALWAYS AN ERROR.
      IF(EMESS.NE.EI) WRITE(OUTP,90)
      EMESS = EI
      WRITE(OUTP,70) EI,ES(IS),SP(IS)
      SP(IS)=0.0d0
C-----ERROR IF LOG Y INTERPOLATION.
   20 IF(INTX.EQ.4.OR.INTX.EQ.5) THEN
      IF(EMESS.NE.EI) WRITE(OUTP,90)
      EMESS = EI
      WRITE(OUTP,80) EI,ES(IS)
      ENDIF
C-----ONLY CHECK FOR ZERO FOR NEUTRON IN - NEUTRON OUT SPECTRA.
      IF(IZAI.NE.1.OR.IZAP.NE.1) GO TO 50
C-----SAVE WHERE SPECTRUM GOES TO ZERO, IF WITHIN TABLE AFTER IT
C-----WAS ALREADY +
      IF(KMPLUS.le.0) go to 50
      IS1=IS
      KMPLUS=-1
      GO TO 50
C-----ONLY CHECK FOR ZERO FOR NEUTRON IN - NEUTRON OUT SPECTRA.
   30 IF(IZAI.NE.1.OR.IZAP.NE.1) GO TO 50
C-----SPECTRUM IS POSITIVE - ERROR ONLY IF SPECTRUM WAS + THEN 0
C-----EARLIER.
      IF(KMPLUS.eq.0) go to 40
      IF(KMPLUS.gt.0) go to 50
C-----SPECTRUM GOES FROM + TO 0 AT IS1 AND BACK TO + AT ES(IS).
      IS2=IS-1
      IF(INTX.EQ.1) IS2=IS
C-----POSITIVE SPECTRUM FOUND - DO NOT EXPECT ANYMORE ZEROES.
   40 KMPLUS=1
   50 CONTINUE
C-----DEFINE LOWER POINT INDEX FOR NEXT INTERPOLATION REGION.
      IPT1=IPT2
   60 CONTINUE
      IF(EMESS.NE.0.0d0) WRITE(OUTP,90)
      RETURN
   70 FORMAT(
     1 ' E=',1PE11.4,' ES=',1PE12.4,' Spectrum =',1PE12.4,' (Set=0)')
   80 FORMAT(
     1 ' E=',1PE11.4,' ES=',1PE12.4, ' Spectrum = 0',
     2 ' Illegal Log Interpolation')
   90 FORMAT(1X,78('-'))
      END
      SUBROUTINE AHOLE(ES,SP,NBTS,INTS,NRS)
C=======================================================================
C
C     CHECK AVERAGED ANGULAR DISTRIBUTION
C
C     1) NEGATIVE ANGULAR DISTRIBUTION IS ALWAYS AN ERROR.
C     2) COSINES MUST BE IN NON-DESCENDING ORDER - EQUALITY O.K.
C     3) DISTRIBUTION = 0 WITH LOG INTERPOLATION IS AN ERROR.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/SPAC3D/EI,EP,XMU
      DIMENSION ES(*),SP(*),NBTS(100),INTS(100)
C-----LOOP OVER INTERPOLATION REGIONS.
      IPT1=1
      ESLAST=ES(1)
      DO 30 IR=1,NRS
      IPT2=NBTS(IR)
      INTX=INTS(IR)
      IF(INTX.GT.10) INTX=INTX-10*(INTX/10)
c-----------------------------------------------------------------------
c-----2019/6/30 - Allowed non -zero at end of HISTOGRAM
C-----INSURE VALUE FOR LAST COSINE OF HISTOGRAM IS ZERO.
c     IF(IR.EQ.NRS.AND.INTX.EQ.1) SP(IPT2)=0.0d0
c-----------------------------------------------------------------------
C-----LOOP OVER POINTS.
      DO 20 IS=IPT1,IPT2
C-----CHECK COSINE ORDER.
      IF(ES(IS).LT.ESLAST) WRITE(OUTP,50) EI,ESLAST,ES(IS)
      ESLAST=ES(IS)
C-----CHECK FOR ZERO OR NEGATIVE DISTRIBUTION.
      IF(SP(IS).eq.0.0d0) go to 10
      IF(SP(IS).gt.0.0d0) go to 20
C-----NEGATIVE IS ALWAYS AN ERROR.
      WRITE(OUTP,40) EI,ES(IS),SP(IS)
      SP(IS)=0.0d0
      GO TO 20
C-----ERROR IF LOG Y INTERPOLATION.
   10 IF(INTX.EQ.4.OR.INTX.EQ.5)
     1 WRITE(OUTP,60) EI,ES(IS)
      GO TO 20
   20 CONTINUE
C-----DEFINE LOWER POINT INDEX FOR NEXT INTERPOLATION REGION.
      IPT1=IPT2
   30 CONTINUE
      RETURN
   40 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' Cos=',1PE12.4,' Distribution =',1PE12.4,
     2 ' (Set=0)'/1X,78('-'))
   50 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' Cos=',1PE12.4,' to ',1PE12.4,' Cos Order ERROR'/
     2 1X,78('-'))
   60 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' Cos=',1PE12.4, ' Distribution = 0',
     2 ' Illegal Log Interpolation'/1X,78('-'))
      END
      SUBROUTINE RENORM(Y,NXY,YINT)
C=======================================================================
C
C     RENORMALIZE DISTRIBUTION TO UNITY.
C
C=======================================================================
      INCLUDE 'implicit.h'
      DIMENSION Y(NXY)
      IF(YINT.LE.0.0d0) RETURN
      DO 10 I=1,NXY
      Y(I)=Y(I)/YINT
   10 CONTINUE
      RETURN
      END
      SUBROUTINE FIXINT(INT,NI)
C=======================================================================
C
C     INSURE INTERPOLATION LAWS ARE IN THE RANGE 1 - 5
C     Corrects for INT = 6            = Charged Particles
C                      = 11-15, 21-25 = Corresponding Point
C
C=======================================================================
      INCLUDE 'implicit.h'
      DIMENSION INT(NI)
      DO 10 I=1,NI
      II=INT(I)
      IF(II.GT.10) II=II-10*(II/10)
      IF(II.LT.1.OR.II.GT.5) II=2
      INT(I)=II
   10 CONTINUE
      RETURN
      END
      SUBROUTINE CHECK1(X,Y,NBT,INT,NR,NP,ITYPE)
C=======================================================================
C
C     CHECK TAB1 INTERPOLATION LAW
C
C     ITYPE = 1 = YIELD
C           = 2 = INCIDENT ENERGY
C           = 3 = SECONDARY ENERGY
C           = 4 = COSINE
C           = 5 = LEGENDRE COEFFICIENTS VS. LEGENDRE ORDER.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/SPAC3D/EI,EP,XMU
      DIMENSION NBT(NR),INT(NR),X(NP),Y(NP),INTBAD(100)
C-----ALLOWABLE INTERPOLATION LAWS FOR EACH TYPE.
      IGOOF3=0
      IPT1=1
      DO 110 I=1,NR
      IPT2=NBT(I)
      INTX=INT(I)
      INTBAD(I)=INTX
      IF(INTX.GE.1.AND.INTX.LE.5) GO TO 10
      IGOOF3=1
      IF(INTX.GT.10) INTX=INTX-10*(INTX/10)
      IF(INTX.LT.1.OR.INTX.GT.5) INTX=2
      INT(I)=INTX
   10 IF(I.EQ.1) GO TO 20
      IF(NBT(I).LE.NBT(I-1)) IGOOF3=1
C-----CHECK FOR ILLEGAL LOG INTERPOLATION.
   20 IGOOF1=0
      IGOOF2=0
      XA=0.0d0
      XB=0.0d0
      YA=0.0d0
      YB=0.0d0
      DO 80 K=IPT1,IPT2
C-----SKIP LEGENDRE COEFFICIENT CHECKS - ALREADY DONE BY CHECKL.
      IF(ITYPE.eq.4) go to 30
      IF(ITYPE.gt.4) go to 80
C-----ENERGIES NON-NEGATIVE.
      IF(X(K).GE.0.0d0) GO TO 40
      IF(ITYPE.EQ.1) WRITE(OUTP,280) X(K)
      IF(ITYPE.EQ.2) WRITE(OUTP,290) X(K)
      IF(ITYPE.EQ.3) WRITE(OUTP,300) EI,X(K)
      GO TO 40
C-----COSINE IN THE RANGE -1 TO +1
   30 IF(DABS(X(K)).GT.1.0d0) WRITE(OUTP,310) EI,EP,X(K)
      GO TO 40
C-----DISTRIBUTION NON-NEGATIVE.
   40 IF(Y(K).GE.0.0d0) GO TO 50
      IF(ITYPE.EQ.1) WRITE(OUTP,320) X(K),Y(K)
      IF(ITYPE.EQ.2) WRITE(OUTP,330) X(K),Y(K)
      IF(ITYPE.EQ.3) WRITE(OUTP,340) EI,X(K),Y(K)
      IF(ITYPE.EQ.4) WRITE(OUTP,350) EI,EP,X(K),Y(K)
C-----X ALWAYS IN ASCENDING ORDER - EQUALITY O.K.
   50 IF(K.EQ.1) GO TO 60
      IF(X(K).GE.X(K-1)) GO TO 60
      IF(ITYPE.EQ.1) WRITE(OUTP,360) X(K-1),X(K)
      IF(ITYPE.EQ.2) WRITE(OUTP,370) X(K-1),X(K)
      IF(ITYPE.EQ.3) WRITE(OUTP,380) EI,X(K-1),X(K)
      IF(ITYPE.EQ.4) WRITE(OUTP,390) EI,EP,X(K-1),X(K)
C-----CHECK FOR ILLEGAL LOG X
   60 IF(INTX.NE.3.AND.INTX.NE.5) GO TO 70
      IF(X(K).GT.0.0d0) GO TO 70
      IF(XA.LE.0.0d0) XA=X(K)
      XB=X(K)
      IGOOF1=1
C-----CHECK FOR ILLEGAL LOG Y
   70 IF(INTX.NE.4.AND.INTX.NE.5) GO TO 80
      IF(Y(K).GT.0.0d0) GO TO 80
      IF(YA.LE.0.0d0) YA=X(K)
      YB=X(K)
      IGOOF2=1
   80 CONTINUE
      IF(IGOOF1.EQ.0) GO TO 90
      IF(ITYPE.EQ.1) WRITE(OUTP,180) XA,XB
      IF(ITYPE.EQ.2) WRITE(OUTP,190) XA,XB
      IF(ITYPE.EQ.3) WRITE(OUTP,200) XA,XB
      IF(ITYPE.EQ.4) WRITE(OUTP,210) XA,XB
   90 IF(IGOOF2.EQ.0) GO TO 100
      IF(ITYPE.EQ.1) WRITE(OUTP,220) YA,YB
      IF(ITYPE.EQ.2) WRITE(OUTP,230) YA,YB
      IF(ITYPE.EQ.3) WRITE(OUTP,240) YA,YB
      IF(ITYPE.EQ.4) WRITE(OUTP,250) YA,YB
C-----END OF INTERPOLATION RANGE LOOP.
  100 IPT1=IPT2
  110 CONTINUE
C-----LAST INTERPOLATION BOUNDARY MUST EQUAL THE NUMBER OF POINTS.
      IF(NBT(NR).NE.NP) IGOOF3=1
      IF(IGOOF3.EQ.0) GO TO 120
C-----ERROR.
      IF(ITYPE.EQ.1) WRITE(OUTP,130) NR,NP
      IF(ITYPE.EQ.2) WRITE(OUTP,140) NR,NP
      IF(ITYPE.EQ.3) WRITE(OUTP,150) NR,NP
      IF(ITYPE.EQ.4) WRITE(OUTP,160) NR,NP
      IF(ITYPE.EQ.5) WRITE(OUTP,170) NR,NP
      WRITE(OUTP,260) (NBT(I),INTBAD(I),INT(I),I=1,NR)
      WRITE(OUTP,270)
C-----INSURE LAST INTERPOLATION BOUNDARY IS EQUAL TO NUMBER OF POINTS.
      NBT(NR)=NP
  120 RETURN
  130 FORMAT(1X,78('-')/' Yield Interpolation Law'/
     1 1X,78('-')/' NR/NP=',2I6/'   NBT   INT   INT'/
     2 '        Read   Use')
  140 FORMAT(1X,78('-')/' Incident Energy Interpolation Law'/
     1 1X,78('-')/' NR/NP=',2I6/'   NBT   INT   INT'/
     2 '        Read   Use')
  150 FORMAT(1X,78('-')/' Secondary Energy Interpolation Law'/
     1 1X,78('-')/' NR/NP=',2I6/'   NBT   INT   INT'/
     2 '        Read   Use')
  160 FORMAT(1X,78('-')/' Cosine Interpolation Law'/
     1 1X,78('-')/' NR/NP=',2I6/'   NBT   INT   INT'/
     2 '        Read   Use')
  170 FORMAT(1X,78('-')/' Legendre Interpolation Law'/
     1 1X,78('-')/' NR/NP=',2I6/'   NBT   INT   INT'/
     2 '        Read   Use')
  180 FORMAT(1X,78('-')/' Yield E=',1PE11.4,' to ',1PE11.4,
     1 '(Illegal Log E Interpolation)')
  190 FORMAT(1X,78('-')/' E=',1PE11.4,' to ',1PE11.4,
     1 '(Illegal Log E Interpolation)')
  200 FORMAT(1X,78('-')/' EP=',1PE11.4,' to ',1PE11.4,
     1 '(Illegal Log EP Interpolation)')
  210 FORMAT(1X,78('-')/' Cos=',1PE11.4,' to ',1PE11.4,
     1 '(Illegal Log COS Interpolation)')
  220 FORMAT(1X,78('-')/' Yield E=',1PE11.4,' to ',1PE11.4,
     1 ' (Illegal Log F Interpolation)')
  230 FORMAT(1X,78('-')/' E=',1PE11.4,' to ',1PE11.4,
     1 ' (Illegal Log F Interpolation)')
  240 FORMAT(1X,78('-')/' EP=',1PE11.4,' to ',1PE11.4,
     1 ' (Illegal Log F Interpolation)')
  250 FORMAT(1X,78('-')/' Cos=',1PE11.4,' to ',1PE11.4,
     1 ' (Illegal Log F Interpolation)')
  260 FORMAT(3I6)
  270 FORMAT(1X,78('-'))
  280 FORMAT(1X,78('-')/
     1 ' Yield E=',1PE11.4,' (Negative E)'/1X,78('-'))
  290 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' (Negative E)'/1X,78('-'))
  300 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,' (Negative EP)'/1X,78('-'))
  310 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,' Cos=',1PE11.4,
     2 ' (Cos NOT -1 to +1)'/1X,78('-'))
  320 FORMAT(1X,78('-')/
     1 ' Yield E=',1PE11.4,' F=',1PE11.4,' (Negative F)'/
     2 1X,78('-'))
  330 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' F=',1PE11.4,' (Negative F)'/
     2 1X,78('-'))
  340 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,' F=',1PE11.4,' (Negative F)'/
     2 1X,78('-'))
  350 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,' Cos=',1PE11.4,' F=',1PE11.4,
     2 ' (Negative F)'/1X,78('-'))
  360 FORMAT(1X,78('-')/
     1 ' YIELD E=',1PE11.4,1PE11.4,
     2 ' (NOT Ascending)'/1X,78('-'))
  370 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,1PE11.4,
     2 ' (NOT Ascending)'/1X,78('-'))
  380 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,1PE11.4,
     2 ' (NOT Ascending)'/1X,78('-'))
  390 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,' Cos=',1PE11.4,1PE11.4,
     2 ' (NOT Ascending)'/1X,78('-'))
      END
      SUBROUTINE CHECK2(NBT,INT,NR,NP,ITYPE)
C=======================================================================
C
C     CHECK TAB2 INTERPOLATION LAW
C
C     ITYPE = 1 = YIELD
C           = 2 = INCIDENT ENERGY
C           = 3 = SECONDARY ENERGY
C           = 4 = COSINE
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      DIMENSION NBT(NR),INT(NR),INTOK(2,4)
C-----ALLOWABLE INTERPOLATION LAWS FOR EACH TYPE.
      DATA INTOK/  1, 25,   1, 25,   1, 25,   1, 25/
      IGOOF=0
      DO 10 I=1,NR
      IF(INT(I).LT.INTOK(1,ITYPE).OR.INT(I).GT.INTOK(2,ITYPE))
     1 IGOOF=1
      IF(I.EQ.1) GO TO 10
      IF(NBT(I).LE.NBT(I-1)) IGOOF=1
   10 CONTINUE
      IF(NBT(NR).NE.NP) IGOOF=1
      IF(IGOOF.EQ.0) GO TO 20
C-----ERROR.
      IF(ITYPE.EQ.1) WRITE(OUTP,60) NR,NP
      IF(ITYPE.EQ.2) WRITE(OUTP,70) NR,NP
      IF(ITYPE.EQ.3) WRITE(OUTP,80) NR,NP
      IF(ITYPE.EQ.4) WRITE(OUTP,90) NR,NP
      WRITE(OUTP,100) (NBT(I),INT(I),I=1,NR)
      WRITE(OUTP,110)
C-----INSURE LAST INTERPOLATION BOUNDARY IS EQUAL TO NUMBER OF POINTS.
      NBT(NR)=NP
C-----CORRECT INTERPOLATION SCHEME TO BE 1 TO 5.
   20 IPASS=0
      DO 50 I=1,NR
      IF(INT(I).GE.1.AND.INT(I).LE.5) GO TO 50
      INTX=MOD(INT(I),10)
      IF(INTX.LT.1.OR.INTX.GT.5) INTX=2
C-----NO ERROR MESSAGE FOR INCIDENT ERROR.
      IF(ITYPE.EQ.2) GO TO 40
      IF(IPASS.NE.0) GO TO 30
      IPASS=1
      IF(ITYPE.EQ.1) WRITE(OUTP,120)
      IF(ITYPE.EQ.3) WRITE(OUTP,130)
      IF(ITYPE.EQ.4) WRITE(OUTP,140)
   30 WRITE(OUTP,150) INT(I),INTX
   40 INT(I)=INTX
   50 CONTINUE
      IF(IPASS.NE.0) WRITE(OUTP,160)
      RETURN
   60 FORMAT(1X,78('-')/' Yield Interpolation Law ERROR'/
     1 1X,78('-')/' NR/NP=',2I6/'   NBT   INT')
   70 FORMAT(1X,78('-')/' Incident Energy Interpolation Law ERROR'/
     1 1X,78('-')/' NR/NP=',2I6/'   NBT   INT')
   80 FORMAT(1X,78('-')/' Secondary Energy Interpolation Law ERROR'/
     1 1X,78('-')/' NR/NP=',2I6/'   NBT   INT')
   90 FORMAT(1X,78('-')/' Cosine Interpolation Law ERROR'/
     1 1X,78('-')/' NR/NP=',2I6/'   NBT   INT')
  100 FORMAT(2I6)
  110 FORMAT(1X,78('-'))
  120 FORMAT(1X,78('-')/' Yield Interpolation Law')
  130 FORMAT(1X,78('-')/' Secondary Energy Interpolation Law')
  140 FORMAT(1X,78('-')/' Cosine Interpolation Law')
  150 FORMAT(' Replaced Interpolation=',I3,' by ',I3)
  160 FORMAT(1X,78('-'))
      END
      SUBROUTINE CHECK3(X,Y1,Y2,KMAX,INTX)
C=======================================================================
C
C     CHECK 3D INTEGRATION INTERPOLATION LAWS VS. X AND Y VALUES.
C
C     GIVEN 2 VECTORS, Y1 AND Y2, INTEGRATE FROM X(1) AND X(2) BETWEEN
C     EACH CORRESPONDING ELEMENT OF Y1 AND Y2 - TEST TO INSURE THAT
C     ALL X, Y1 AND Y2 VALUES ARE COMPATIBLE WITH THE INTERPOLATION
C     LAW INTX.
C
C     THERE ARE KMAX ELEMENTS IN EACH OF THE VECTORS, Y1, Y2, Y3.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      DIMENSION X(2),Y1(KMAX),Y2(KMAX)
C-----INSURE ALL INPUT PARAMETERS ARE LEGAL.
      INTERP=INTX
      IF(INTERP.GT.10) INTERP=INTERP-10*(INTERP/10)
      IF(INTERP.GE.1.AND.INTERP.LE.5) GO TO 10
      WRITE(OUTP,110) X,INTX
      RETURN
c-----------------------------------------------------------------------
C
C     SELECT INTERPOLATION METHOD.
C
c-----------------------------------------------------------------------
   10 GO TO (20,30,60,40,80),INTERP
c-----------------------------------------------------------------------
C
C     HISTOGRAM - NOTHING TO CHECK.
C
c-----------------------------------------------------------------------
   20 RETURN
c-----------------------------------------------------------------------
C
C     LIN X VS. LIN Y - NOTHING TO CHECK
C
c-----------------------------------------------------------------------
   30 RETURN
c-----------------------------------------------------------------------
C
C     LIN X VS. LOG Y - ALL Y VALUES MUST BE POSITIVE.
C
c-----------------------------------------------------------------------
   40 DO 50 K=1,KMAX
      IF(Y1(K).GT.0.0d0.AND.Y2(K).GT.0.0d0) GO TO 50
      WRITE(OUTP,120) X,Y1(K),Y2(K),INTX
   50 CONTINUE
      RETURN
c-----------------------------------------------------------------------
C
C     LOG X VS. LIN Y - BOTH X VALUES POSITIVE.
C
c-----------------------------------------------------------------------
   60 IF(X(1).GT.0.0d0.AND.X(2).GT.0.0d0) GO TO 70
      WRITE(OUTP,110) X,INTX
   70 RETURN
c-----------------------------------------------------------------------
C
C     LOG X VS. LOG Y - BOTH X VALUES AND ALL Y VALUES MUST BE POSITIVE
C
c-----------------------------------------------------------------------
   80 IF(X(1).GT.0.0d0.AND.X(2).GT.0.0d0) GO TO 90
      WRITE(OUTP,110) X,INTX
   90 DO 100 K=1,KMAX
      IF(Y1(K).GT.0.0d0.AND.Y2(K).GT.0.0d0) GO TO 100
      WRITE(OUTP,120) X,Y1(K),Y2(K),INTX
  100 CONTINUE
      RETURN
  110 FORMAT(1X,78('-')/' X=',1PE11.4,' to ',1PE11.4,' INT=',I5,
     1 ' (Illegal Interpolation)'/1X,78('-'))
  120 FORMAT(1X,78('-')/' X=',1PE11.4,' to ',1PE11.4,
     1 ' Y1=',1PE11.4,' Y2=',1PE11.4,' INT=',I5,
     1 ' (Illegal Interpolation)'/1X,78('-'))
      END
      SUBROUTINE CHECKL(F0,FL,I1,I2,ITYPE)
C=======================================================================
C
C     CHECK LEGENDRE COEFFICIENTS
C
C     ITYPE = 1 - LAW 1
C           = 2 - LAW 2
C           = 3 - LAW 5 - B0
C           = 4 - LAW 5 - C0
C           = 5 - LAW 1 - AVERAGED OVER EP
C           = 6 - LAW 5 - RA AND IA
C
C     WARNING - Local vriable SUMFL never used?
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*8 WAYS
      DIMENSION   WAYS(3)
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/TYPLAW/LAWIN(8,13),LAWOUT(8,13),NOUT(4,13),NYIELD(8,2),
     1 MAXLEG(8),MAXMU(8),NANGLE(8,3),NDIST(8,3)
      COMMON/SPAC3D/EI,EP,XMU
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
      COMMON/MUSUM/SUMMU(3)
      DIMENSION DSUMMU(3),FL(I2)
      DATA WAYS/
     1 'Cos=-1  ',
     2 'Cos= 0  ',
     3 'Cos=+1  '/
      DATA HALF/5.0d-01/
      DATA ONE /1.0d0/
      DATA TWO /2.0d0/
      IF(ITYPE.EQ.6) GO TO 90
      IF(I2.GT.30) THEN
      WRITE(   *,10) I2
      WRITE(OUTP,10) I2
   10 FORMAT(' WARNING - ',i5,' Legendre Coefficients. Using more'/
     1       '           ',5x,' than 30 gives NONSENSE Results')
      ENDIF
c-----------------------------------------------------------------------
C
C     ALL COEFFICIENTS EXCEPT A.
C
c-----------------------------------------------------------------------
C-----FO CANNOT BE NEGATIVE.
      IF(F0.GE.0.0d0) GO TO 20
C-----ALREADY CHECKED FOR ITYPE=1
      IF(ITYPE.EQ.2) WRITE(OUTP,170) EI,F0
      IF(ITYPE.EQ.3) WRITE(OUTP,180) EI,F0
      IF(ITYPE.EQ.4) WRITE(OUTP,190) EI,F0
      IF(ITYPE.EQ.5) WRITE(OUTP,200) EI,F0
      F0=0.0d0
C-----FN CANNOT EXCEED F0.
   20 DO 30 K=I1,I2
      IF(DABS(FL(K)).LE.F0) GO TO 30
      IF(ITYPE.EQ.1) WRITE(OUTP,120) EI,EP,FL(K),F0
      IF(ITYPE.EQ.2) WRITE(OUTP,130) EI,FL(K)
      IF(ITYPE.EQ.3) WRITE(OUTP,140) EI,FL(K),F0
      IF(ITYPE.EQ.4) WRITE(OUTP,150) EI,FL(K),F0
      IF(ITYPE.EQ.5) WRITE(OUTP,160) EI,FL(K),F0
      FL(K)=0.0d0
   30 CONTINUE
c-----------------------------------------------------------------------
C
C     CHECK ANGULAR DISTRIBUTION AT COS = -1, 0 AND +1
C
C     DEFINE,
C
C     F(COS) = (SUM OVER L)*(2*L+1)*FL*P(L)(COS)/2
C
C     FOR COS = -1, 0 AND +1
C
C     AT COS = +1 P(L)(+1)   = +1                FOR ALL L
C
C            =  0 P(L+2)(0)  = -(L+1)/(L+2)*P(L) FOR L EVEN
C                            = 0                 FOR L ODD
C
C            = -1 P(L)(-1)   = +1                FOR L EVEN
C                            = -1                FOR L ODD
C
c-----------------------------------------------------------------------
C-----IF F0 IS NOT POSITIVE ALL COEFFICIENTS HAVE NOW BEEN
C-----SET TO ZERO - NO REASON FOR TEST.
      IL=0
      IF(F0.LE.0.0d0) GO TO 80
C-----ONLY EVEN COEFFICIENTS FOR B0.
      ILD=1
      IF(ITYPE.EQ.3) ILD=2
      DFLTIM=ONE
      IF(ITYPE.EQ.3) DFLTIM=TWO
C-----(2*L+1)/2     L=0
      FLTIME=HALF
C-----(2*L+1)/2*FL  L=0
      PLNOW=FLTIME*F0
      DSUMMU(1)=PLNOW
      DSUMMU(2)=PLNOW
      DSUMMU(3)=PLNOW
C-----INITIALIZE P0(0), (L+1), (L+2) FOR COS=0 RECURSION RELATIONSHIP
C-----P(L+2)=-(L+1)/(L+2)*P(L), STARTING WITH L = 0.
      P0=ONE
      CLP1=ONE
      CLP2=TWO
C-----LOOP OVER COEFFICIENTS.
      DO 50 K=I1,I2
      IL=IL+ILD
C-----(2*L+1)/2
      FLTIME=FLTIME+DFLTIM
C-----(2*L+1)/2*FL
      PLNOW=FLTIME*FL(K)
C-----COS=1 - SUM (2*L+1)/2*FL - ALL TERMS.
      DSUMMU(3)=DSUMMU(3)+PLNOW
C-----COS=0 - ONLY EVEN TERMS.
      IF(MOD(IL,2).NE.0) GO TO 40
C-----AT COS=0 USE P(L+2)=-(L+1)/(L+2)*P(L), L= 0, 2, 4.....
      P0=-CLP1*P0/CLP2
      DSUMMU(2)=DSUMMU(2)+PLNOW*P0
C-----INCREMENT (L+1) AND (L+2) FOR NEXT EVEN ORDER.
      CLP1=CLP1+TWO
      CLP2=CLP2+TWO
C-----COS=-1 - +EVEN TERMS
      DSUMMU(1)=DSUMMU(1)+PLNOW
      GO TO 50
C-----COS=-1 - -ODD TERMS
   40 DSUMMU(1)=DSUMMU(1)-PLNOW
   50 CONTINUE
      DO 60 I=1,3
      SUMMU(I)=DSUMMU(I)
   60 CONTINUE
C-----SAVE FOR PLOTTAB.
      CALL PLOT4A
C-----ERROR IF ANY ARE NEGATIVE - DO NOT CHECK COS=-1 FOR B0 - SYMMETRIC
C-----HALF RANGE EXPRESSION.
      ITOP=3
      IF(ITYPE.EQ.3) ITOP=2
      DO 70 IWAY=1,ITOP
      IF(SUMMU(IWAY).ge.0.0D+0) go to 70
      IF(ITYPE.EQ.1) WRITE(OUTP,220) EI,EP,WAYS(IWAY)
      IF(ITYPE.EQ.2) WRITE(OUTP,240) EI,WAYS(IWAY)
      IF(ITYPE.EQ.3) WRITE(OUTP,240) EI,WAYS(IWAY)
      IF(ITYPE.EQ.4) WRITE(OUTP,240) EI,WAYS(IWAY)
      IF(ITYPE.EQ.5) WRITE(OUTP,230) EI,WAYS(IWAY)
   70 CONTINUE
c-----------------------------------------------------------------------
C
C     KEEP TRACK OF MAXIMUM LEGENDRE ORDER.
C
c-----------------------------------------------------------------------
C-----ONLY USE ORIGINAL DATA - NOT DATA AVERAGED OVER EP (ITYPE=5).
   80 IF(ITYPE.NE.5.AND.IL.GT.MAXLEG(IPO)) MAXLEG(IPO)=IL
      RETURN
c-----------------------------------------------------------------------
C
C     COEFFICIENTS  A.
C
c-----------------------------------------------------------------------
   90 DO 110 I=I1,I2,2
      AA=FL(I)**2+FL(I+1)**2
      IF(I.GT.I1) GO TO 100
      AA0=AA
      GO TO 110
C-----HIGHER ORDER COEFFICIENTS NOT BIGGER THAN ZEROTH ORDER.
  100 IF(AA.LE.AA0) GO TO 110
      WRITE(OUTP,210) EI,AA,AA0
      FL(I)  =0.0d0
      FL(I+1)=0.0d0
  110 CONTINUE
      RETURN
  120 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,' FN=',1PE11.4,
     2 ' Exceeds F0=',1PE11.4,' Set=0'/1X,78('-'))
  130 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' FN=',1PE11.4,' Exceeds 1.0 Set=0'/1X,78('-'))
  140 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' BN=',1PE11.4,
     2 ' Exceeds B0=',1PE11.4,' Set=0'/1X,78('-'))
  150 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' CN=',1PE11.4,
     2 ' Exceeds C0=',1PE11.4,' Set=0'/1X,78('-'))
  160 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' Average FN=',1PE11.4,
     2 ' Exceeds F0=',1PE11.4,' Set=0'/1X,78('-'))
  170 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' F0=',1PE11.4,' F0 Negative Set=0'/1X,78('-'))
  180 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' B0=',1PE11.4,
     2 ' B0 Negative Set=0'/1X,78('-'))
  190 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' C0=',1PE11.4,
     2 ' C0 Negative Set=0'/1X,78('-'))
  200 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' Average F0=',1PE11.4,' F0 Negative Set=0'/
     2 1X,78('-'))
  210 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' AN**2=',1PE11.4,' Exceeds A0**2=',1PE11.4,
     2 ' Set=0'/1X,78('-'))
  220 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP=',1PE11.4,
     2 ' Angular Distribution Negative at ',A8)
  230 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' EP Averaged',
     2 ' Angular Distribution Negative at ',A8)
  240 FORMAT(1X,78('-')/
     1 ' E=',1PE11.4,' Angular Distribution Negative at ',A8)
      END
      SUBROUTINE CHECKE
C=======================================================================
C
C     CHECK INCIDENT ENERGY - NOT NEGATIVE, IN ASCENDING ORDER.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/SPAC3D/EI,EP,XMU
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
      DATA EILST/0.0d0/
C-----CHECK FOR INCIDENT ENERGY NON-NEGATIVE.
      IF(EI.LT.0.0d0) WRITE(OUTP,20) EI
      IF(IE.LE.1) GO TO 10
C-----CHECK FOR ASCENDING ORDER.
      IF(EI.LT.EILST) WRITE(OUTP,30) EILST,EI
   10 EILST=EI
   20 FORMAT(1X,78('-')/' E=',1PE11.4,' (E Negative)'/1X,78('-'))
   30 FORMAT(1X,78('-')/' E=',1PE11.4,1PE11.4,' (NOT Increasing)'/
     1 1X,78('-'))
      RETURN
      END
      REAL*8 FUNCTION XINT2(X,Y,NBT,INT,NR)
C=======================================================================
C
C     INTEGRATE USING ENDF/B INTERPOLATION LAWS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      DIMENSION X(*),Y(*),NBT(100),INT(100)
C-----INITIALIZE INTEGRAL AND POINT INDEX.
      YINT=0.0d0
      IPT1=1
C-----LOOP OVER INTERPOLATION REGIONS.
      DO 10 IR=1,NR
      IPT2=NBT(IR)
      KPT=(IPT2-IPT1)+1
      INTX=INT(IR)
      IF(INTX.GT.10) INTX=INTX-10*(INTX/10)
C-----INTEGRATE OVER INTERPOLATION REGION.
      CALL INT2D(X(IPT1),Y(IPT1),KPT,YINT1,ERRTOP,INTX,0)
C-----INCREMENT INTEGRAL AND POINT INDEX.
      YINT=YINT+YINT1
      IPT1=IPT2
   10 CONTINUE
C-----IF POINTS ARE IN DESCENDING ORDER REVERSE SIGN
      IF(X(1).GT.X(IPT2)) YINT = -YINT
C-----RETURN ANSWER.
      XINT2=YINT
      RETURN
      END
      SUBROUTINE INT2D(X,Y,KMAX,YINT,ERRMAX,INTERP,NPOWER)
C=======================================================================
C
C     SUBROUTINE INT2D  (VERSION 88-1) NOVEMBER 1988
C                       (VERSION 90-1) AUGUST 1990
C
C     WRITTEN BY DERMOTT E. CULLEN
C                L-59
C                LAWRENCE LIVERMORE NATIONAL LABORATORY
C                P.O. BOX 808
C                LIVERMORE, CA 94550
C
C     TELEPHONE  925-423-7359
C
C     PURPOSE
C=======================================================================
C
C     GIVEN A FUNCTION DEFINED BY A TABLE OF (X,Y) PAIRS AND AN
C     INTERPOLATION LAW BETWEEN TABULATED POINTS THIS ROUTINE WILL
C     CALCULATE,
C
C     NPOWER
C     ------
C        0   - THE INTEGRAL OF THE FUNCTION
C        1   - THE INTEGRAL OF X TIMES THE FUNCTION
C        2   - THE INTEGRAL OF X*X TIMES THE FUNCTION
C
C     ARGUMENTS
C=======================================================================
C
C     X      - X TABLE (DIMENSION AT LEAST KMAX)
C     Y      - Y TABLE (DIMENSION AT LEAST KMAX)
C     KMAX   - MAXIMUM INDEX FOR X
C     YINT   - CALCULATED INTEGRAL
C     ERRMAX - MAXIMUM UNCERTAINTY IN THE INTEGRAL (EXPLAINED BELOW)
C     INTERP - INTERPOLATION LAW FOR Y:
C            = 1 - HISTOGRAM.
C            = 2 - LIN X VS. LIN Y.
C            = 3 - LOG X VS. LIN Y (Y .GT. 0).
C            = 4 - LIN X VS. LOG Y (X .GT. 0).
C            = 5 - LOG X VS. LOG Y (X AND Y .GT. 0).
C     NPOWER = POWER OF X BY WHICH Y SHOULD BE MULTIPLIED
C            = 0 - INTEGRATE FUNCTION
C            = 1 - INTEGRATE X TIMES THE FUNCTION
C
C     LIMITATIONS AND CONVENTIONS
C=======================================================================
C
C     THE TABULATED X VALUES ARE ASSUMED TO BE IN ASCENDING NUMERICAL
C     ORDER WITH REPEATED X VALUES (E.G., DISCONTINUITY) ALLOWED.
C
C     INTERPOLATION
C=======================================================================
C
C     IN ORDER TO UNIQUELY DEFINE THE REQUIRED INTEGRAL WE MUST KNOW THE
C     VALUE OF THE FUNCTION NOT ONLY AT THE TABULATED VALUES, BUT RATHER
C     AT ALL VALUES OF X.
C
C     GIVEN A TABLE OF (X,Y) PAIRS AND AN INTERPOLATION LAW BETWEEN
C     POINTS WE CAN UNIQUELY DEFINE THE FUNCTION Y FOR ALL VALUES OF
C     X. IF WE CONSIDER AN X INTERVAL X1 TO X2 AND ANY ARBITRARY VALUES
C     OF X AND X3 WITHIN THIS INTERVAL WE CAN UNIQUELY DEFINE Y AT ANY
C     VALUE OF X IN THE FORM,
C
C     (1) Y(X)     = Y(X1)
C     (2) Y(X)     = Y(X3)     +A*(X-X3)        A=(Y2-Y1)/(X2-X1)
C     (3) LOG(Y(X))= LOG(Y(X3))+A*(X-X3)        A=LOG(Y2/Y1)/(X2-X1)
C     (4) Y(X)     = Y(X3)     +A*LOG(X/X3)     A=(Y2-Y1)/LOG(X2/X1)
C     (5) LOG(Y(X))= LOG(Y(X3))+A*LOG(X/X3)     A=LOG(Y2/Y1)/LOG(X2/X1)
C
C     WITH THESE INTERPOLATION RELATIONSHIPS WE CAN DEFINE THE REQUIRED
C     INTEGRAL.
C
C     HOW IMPORTANT IS IT TO USE THE PROPER INTERPOLATION LAW
C=======================================================================
C
C     CONSIDER THE TRIVIAL EXAMPLE OF A FUNCTION Y(X) = 1/X. IN ORDER
C     TO INTEGRATE THIS FUNCTION BETWEEN X = 1 AND X = 1000 USING
C     LOG X VS. LOG Y INTERPOLATION (WHICH IS EXACT) ALL WE NEED DO
C     IS TABULATE THE FUNCTION AT 2 POINTS,
C     X1 = 1     Y1 = 1
C     X2 =1000   Y2 = 1/1000
C     AND INTEGRATE. IF WE IGNORE THE LOG X VS. LOG Y INTERPOLATION AND
C     MERELY ASSUME LINEAR X VS. LINEAR Y INTERPOLATION WHEN WE
C     INTEGRATE AND COMPARE OUR ANSWER TO THE EXACT ANSWER WE WILL
C     FIND THE INTEGRALS ARE ABOUT,
C
C     LOG X VS. LOG Y INTEGRAL =   6.9
C     LIN X VS. LIN Y INTEGRAL = 500.0
C
C     IN OTHER WORDS NOT USING THE CORRECT INTERPOLATION LAW LEADS TO
C     AN ANSWER WHICH IS OVER 72 TIMES (NOT 72 PER-CENT, 72 TIMES) TOO
C     LARGE. THIS TRIVIAL EXAMPLE CLEARLY ILLUSTRATES THE IMPORTANCE
C     OF PROPERLY INTERPOLATING BETWEEN TABULATED VALUES.
C
C     INTEGRATION
C=======================================================================
C
C     STARTING FROM THE RELATIONSHIP,
C
C     D(Y*X**(N+1))/D(X) = (N+1)*Y*X**N + X**(N+1)*D(Y)/D(X)
C
C     WE CAN SOLVE FOR Y*X**N TO FIND,
C
C         D(Y)/D(X) Y*X**N
C         --------  ---------------------------------------------
C     (1) 0         Y1*(D(X**(N+1))/D(X))/(N+1)
C     (2) A         (D(X**(N+1)*(Y - A*X/(N+2))/D(X))/(N+1)
C     (3) A*Y       (D(Y*X**(N))/D(X) - N*Y*X**(N-1))/A
C     (4) A/X       (D(X**(N+1)*(Y - A/(N+1)))/D(X))/(N+1)
C     (5) A*Y/X     (D(Y*X**(N+1))/D(X))/(A+N+1)
C
C     N = 0          N = 1               N = 2
C     -------------- ------------------- ------------------------------
C (1) Y1*D(X)        Y1*D(X*X)/2         Y1*D(X**3)/3
C (2) D(X*(Y-A*X/2)) D(X*X*(Y-A*X*/3))/2 D(X**3*(Y-A*X)/4))/3
C (3) D(Y)/A         D(Y*(A*X-1))/(A*A)  D(Y*(A*A*X*X-2*A*X+2))/(A*A*A)
C (4) D(X*(Y-A))     D(X*X*(Y-A/2))/2    D(X**3*(Y-A/3))/3
C (5) D(Y*X)/(A+1)   D(Y*X*X)/(A+2)      D(Y*X**3)/(A+3)
C
C     IMPROVED STABILTY
C=======================================================================
C
C     THE STABILITY OF THE RESULTING INTEGRALS CAN BE IMPROVED BY
C     DEFINING THE INTEGRALS NOT IN TERMS OF THE VALUES OF X AND Y AT
C     THE ENDS OF AN X INTERVAL, BUT RATHER IN TERMS OF AVERAGE VALUES
C     AND DIFFERENCES.
C
C (1) - (5)                           (5) N = 0 OR 1
C----------------   ---------------   ---------------------------------
C   2*B = X2 + X1   2*D   = Y2 + Y1    2*BN = Y2*X2**(N+1)+Y1*X1**(N+1)
C   2*C = X2 - X1   2*E   = Y2 - Y1    2*CN = Y2*X2**(N+1)-Y1*X1**(N+1)
C----------------   ---------------   ---------------------------------
C B + C = X2        D + E = Y2        BN+CN = Y2*X2**(N+1)
C B - C = X1        D - E = Y1        BN-CN = Y1*X1**(N+1)
C
C     X2       - X1       = 2*C
C     X2**2    - X1**2    = 4*C*B
C     X2**3    - X1**3    = 2*C*(3*B*B+C*C)
C     X2**4    - X1**4    = 8*C*B*(B*B+C*C)
C     Y2       - Y1       = 2*E
C     Y2*X2    - Y1*X1    = 2*(C*D+B*E)                         = 2*C0
C     Y2*X2**2 - Y1*X1**2 = 2*(2*B*C*D+(B*B+C*C)*E)             = 2*C1
C     Y2*X2**3 - Y1*X1**3 = 2*(C*(3*B*B+C*C)*D+B*(B*B+3*C*C)*E) = 2*C2
C     Y2*X2    + Y1*X1    = 2*(B*D+C*E)                         = 2*B0
C     Y2*X2**2 + Y1*X1**2 = 2*((B*B+C*C)*D+2*B*C*E)             = 2*B1
C     Y2*X2**3 + Y1*X1**3 = 2*(B*(B*B+3*C*C)*D+C*(3*B*B+C*C)*E) = 2*B2
C
C     (1) A     = 0                                  = 0
C     (2) A     = E/C                                = E/C
C     (3) A     = LOG((D+E)/(D-E))/(2*C)             = LY/(2*C)
C     (4) A     = (2*E)/LOG((B+C)/(B-C))             = (2*E)/LX
C     (5) A+N+1 = LY/LX+N+1   = (LY+(N+1)*LX)/LX     = LN/LX
C            LN = LY+(N+1)*LX = LOG((BN+CN)/(BN-CN))
C
C     THE INTEGRALS CAN BE WRITTEN USING THESE TERMS, ARRANGED INTO
C     GROUPS OF TERMS TO ACCOUNT FOR COMMON FACTORS AND THE ABOVE
C     DEFINITION OF (A) USED TO FIND,
C
C         N = 0                N = 1
C         -------------------  -------------------------------------
C     (1) 2*C*Y1               2*B*C*Y1
C     (2) 2*[C*D+B*E-A*C*B]    [2*B*C*D+(B*B+C*C)*E-A*C*(3*B*B+C*C)/3]
C         2*[C*D+B*(E-A*C)]    [2*B*C*D+2*C*C*E/3+(B*B+C*C/3)*(E-A*C)]
C         2*C*D                2*C*[B*D+C*E/3]
C     (3) 2*E/A                2*[(C*D+B*E)/A-E/(A*A)]
C         2*E/A                2*[B*E/A+(C*D-E/A)/A]
C         4*C*E/LY             2*C*[2*B*E/LY+2*C*(D-2*E/LY)/LY]
C     (4) 2*[C*D+B*E-A*C]      [2*B*C*D+(B*B+C*C)*E-A*C*B]
C         2*[C*D+(B*E-A*C)]    [2*B*C*D+C*C*E+B*(B*E-A*C)]
C         2*[C*D+E*(B-2*C/LX)] [2*B*C*D+E*{C*C+B*(B-2*C/LX)}]
C     (5) 2*C0/(A+1)           2*C1/(A+2)
C         2*LX*C0/L0           2*LX*C1/L1
C
C         N = 2
C         ---------------------------------------------------------
C     (1) 2*C*[3*B*B+C*C]*Y1/3
C     (2) 2*[C*(3*B*B+C*C)*D+B*(B*B+3*C*C)*E-A*C*B*(B*B+C*C)]/3
C         2*[C*D*(3*B*B+C*C)+2*B*C*C*E+B*(B*B+C*C)*(E-A*C)]/3
C         2*C*[D*(3*B*B+C*C)+2*B*C*E]/3
C     (3) 2*[{2*B*C*D+(B*B+C*C)*E}/A-2*(C*D+B*E)/(A*A)+2*E/(A*A*A)]
C         2*[(B*B+C*C)*E/A+2*B*(C*D-E/A)/A-2*(C*D-E/A)/(A*A)]
C         2*[(B*B+C*C)*2*C*E/LY+4*C*C*(B-2*C/LY)*(D-2*E/LY)/LY]
C     (4) 2*[C*(3*B*B+C*C)*D+B*(B*B+3*C*C)*E-A*C*(3*B*B+C*C)/3]/3
C         2*[C*D*(3*B*B+C*C)+8*B*C*C*E/3+(B*B+C*C/3)*(B*E-A*C)]/3
C         2*[C*D*(3*B*B+C*C)+E*{8*B*C*C/3+(B*B+C*C/3)*(B-2*C/LX)}]/3
C     (5) 2*C2/(A+3)
C         2*LX*C2/L2
C
C     FOR (1) HISTOGRAM OR (2) LIN X VS. LIN Y THE SOLUTION IN THIS
C     FORM IS NUMERICALLY STABLE. THE RESULTS ARE DEFINED ONLY IN
C     TERMS OF THE TABULATED VALUES, INDEPENDENT OF THE SLOPE (A) AND
C     ALL TERMS THAT CROSS CANCEL HAVE ALREADY BEEN REMOVED.
C
C     WHAT HAPPENS WHEN LX, LY OR LN APPROACHES 0.0
C=======================================================================
C
C     SINCE THE SOLUTION IN ALL OF THE CASES INVOLVING LOG X AND/OR LOGY
C     INTERPOLATION (3-5) INCLUDE DIVISION BY A LOG THE SOLUTIONS CAN
C     BECOME NUMERICALLY UNSTABLE AS THE ARGUMENT OF THE LOG APPROACHES
C     1.0 (E.G., LOG(1.0) = 0.0) UNLESS SPECIAL CARE IS TAKEN. IN ORDER
C     TO AVOID NUMERICAL UNSTABILITY WE CAN USE THE RELATIONSHIPS,
C
C     Q0(R)=LOG((1+R)/(1-R)) = 2*R*(1+R**2/3+R**4/5+R**6/7+R**8/9+..
C     Q1(R)=2*R/Q0(R)        = 1/(1+R**2/3+R**4/5+R**6/7+R**8/9+..
C     Q2(R)=1-Q1(R)          = (R**2)*(1/3+R**2/5+..)/((1+R**2/3+..))
C     Q3(R)=Q2(R)/Q0(R)      = (R/2)*(1/3+R**2/5+..)/((1+R**2/3+..))**2
C     Q4(R)=Q3(R)/Q0(R)      = (1/4)*(1/3+R**2/5+..)/((1+R**2/3+..))**3
C
C     LIMITING VALUES            R---> 0         R---> 1
C     ---------------            -------         -------
C     Q1(R)                        1               0
C     Q2(R)                       R*R/3            0
C     Q3(R)                       R/6              0
C     Q4(R)                       1/12             0
C
C     NOTE THAT FOR R IN THE RANGE 0 TO 1 THESE FUNCTIONS ARE BOUNDED
C     BY THE R = 0 AND R = 1 LIMITS AND VARY SMOOTHLY BETWEEN THESE
C     LIMITS.
C
C     WHEN THE ABSOLUTE VALUE OF R IS GREATER THAN OR EQUAL TO 0.1 THESE
C     FUNCTIONS WILL BE DEFINED DIRECTLY IN THE FORM,
C
C     Q0     = LOG((1+R)/(1-R))
C     Q1     = 2*R/Q0
C     Q2     = 1-Q1
C     Q3     = Q2/Q0
C     Q4     = Q3/Q0
C
C     WHEN THE ABSOLUTE VALUE OF R IS LESS THAN 0.1 THESE FUNCTIONS
C     WILL BE DEFINED USING THE EXPANSION,
C
C     EXLOG1 = (1/3+R**2/5+R**4/7+R**6/9+R**8/11+R**10/13)
C     EXLOG2 = (1+R*R*EXLOG1)
C     Q0     = 2*R*EXLOG2
C     Q1     = 2*R/Q0 =            1/EXLOG2
C     Q2     = 1-Q1   =   R*R*EXLOG1/EXLOG2
C     Q3     = Q2/Q0  = (R/2)*EXLOG1/(EXLOG2**2)
C     Q4     = Q3/Q0  = (1/4)*EXLOG1/(EXLOG2**3)
C
C     THIS EXPANSION WILL BE ACCURATE TO ORDER R**12 (E.G., FOR A
C     MAXIMUM R = 0.1, TO AT LEAST 12 DIGITS).
C
C     BY IDENTIFYING THE TERMS,
C
C     LX = LOG((1+C/B)/(1-C/B))        = Q0(C/B)
C     LY = LOG((1+E/D)/(1-E/D))        = Q0(E/D)
C     LN = LOG((1+CN/BN)/(1-CN/BN))    = Q0(CN/BN)
C
C     2*C/LX  = B*(2*C/B)/Q0(C/B)      = B*Q1(C/B)
C     2*E/LY  = D*(2*E/D)/Q0(E/D)      = D*Q1(E/D)
C     2*CN/LN = BN*(2*CN/BN)*Q0(CN/BN) = BN*Q1(CN/BN)
C
C     UPON REGROUPING TERMS WE CAN OBTAIN THE STABLE FORMS WHICH WILL
C     BE USED IN THE CALCULATIONS,
C
C         N = 0                    N = 1
C      -------------------         -------------------------------------
C  (1) 2*C*Y1                      2*B*C*Y1
C  (2) 2*C*D                       2*C*[B*D+C*E/3]
C  (3) 4*C*E/LY                    2*C*[2*B*E/LY+2*C*(D-2*E/LY)/LY]
C      2*C*D*(2*E/D)/LY            2*C*D*[B*(2*E/D)/LY+
C                                  2*C*(1-(2*E/D)/LY)/LY]
C      2*C*D*Q1(E/D)               2*C*D*[B*Q1(E/D)+2*C*Q3(E/D)]
C  (4) 2*[C*D+E*(B-2*C/LX)]        [2*B*C*D+E*{C*C+B*(B-2*C/LX)}]
C      2*[C*D+E*B*(1-(2*C/B)/LX)]  [2*B*C*D+E*{C*C+B*B*(1-(2*C/B)/LX)}]
C      2*[C*D+E*B*Q2(C/B)]         [2*B*C*D+E*{C*C+B*B*Q2(C/B)}]
C  (5) 2*LX*C0/L0                  2*LX*C1/L1
C      LX*B0*Q1(C0/B0)             LX*B1*Q1(C1/B1)
C
C      N = 2
C      ---------------------------------------------------------
C  (1) 2*C*Y1*[B*B+C*C/3]
C  (2) 2*C*[D*(B*B+C*C/3)+2*B*C*E/3]
C  (3) 2*[(B*B+C*C)*2*C*E/LY+4*C*C*(B-2*C/LY)*(D-2*E/LY)/LY]
C      2*C*D*[(B*B+C*C)*(2*E/D)/LY+4*C*(B-2*C/LY)*(1-(2*E/D)/LY)/LY]
C      2*C*D*[(B*B+C*C)*Q1(E/D)   +4*B*C*Q3(E/D)-8*C*C*Q4(E/D)]
C      2*C*D*[(B*B+C*C/3)*Q1(E/D)+4*B*C*Q3(E/D)+
C      2*C*C*{Q1(E/D)/3-4*Q4(E/D)}]
C  (4) 2*[C*D*(3*B*B+C*C)+E*{8*B*C*C/3+(B*B+C*C/3)*(B-2*C/LX)}]/3
C      2*[C*D*(3*B*B+C*C)+E*{8*B*C*C/3+(B*B+C*C/3)*Q2(C/B)}]/3
C      2*[C*D*(B*B+C*C/3)+E*{8*B*C*C/3+(B*B+C*C/3)*Q2(C/B)}/3]
C  (5) 2*LX*C2/L2
C      LX*B2*Q1(C2/B2)
C
C     IMPORTANT LIMITS TO CONSIDER
C=======================================================================
C     LIMIT C ----> 0 (DISCONTINUITY X2 ---> X1)
C     ------------------------------------------
C     ALL TERMS SHOULD APPROACH 0 AS FAST AS C
C
C     LIMITING VALUES
C     ---------------
C     Q1(C/B)------> 1
C     Q2(C/B)------> C*C/B/B
C     Q3(C/B)------> C/B/6
C     Q4(C/B)------> 1/12
C     B0-----------> B*D
C     B1-----------> B*B*D
C     B2-----------> B*B*B*D
C     LX-----------> 2*C/B
C     Q1(CN/BN)----> Q1(E/D)
C
C         N = 0                N = 1
C         -------------------  -------------------------------------
C     (1) 2*C*Y1               2*B*C*Y1
C     (2) 2*C*D                2*C*[B*D+C*E/3]
C         2*C*D                2*B*C*D
C     (3) 2*C*D*Q1(E/D)        2*C*D*[B*Q1(E/D)+2*C*Q3(E/D)]
C         2*C*D*Q1(E/D)        2*B*C*D*Q1(E/D)
C     (4) 2*[C*D+E*B*Q2(C/B)]  [2*B*C*D+E*{C*C+B*B*Q2(C/B)}]
C         2*[C*D+E*B*C*C/B/B]  [2*B*C*D+E*{C*C+B*B*C*C/B/B}]
C         2*C*D                2*B*C*D
C     (5) LX*B0*Q1(C0/B0)      LX*B1*Q1(C1/B1)
C         2*C*D*Q1(E/D)        2*B*C*D*Q1(E/D)
C
C         N = 2
C         ---------------------------------------------------------
C     (1) 2*C*Y1*[B*B+C*C/3]
C         2*B*B*C*Y1
C     (2) 2*B*B*C*D
C     (3) 2*C*[(B*B+C*C)*D*Q1(E/D)+4*C*D*{B*Q3(E/D)-2*C*Q4(E/D)}]
C         2*B*B*C*D
C     (4) 2*[C*D*(3*B*B+C*C)+E*{8*B*C*C/3+(B*B+C*C/3)*Q2(C/B)}]/3
C         2*[C*D*(3*B*B+C*C)+E*{8*B*C*C/3+(B*B+C*C/3)*C*C/B/B}]/3
C         2*B*B*C*D
C     (5) LX*B2*Q1(C2/B2)
C         2*B*B*C*D*Q1(E/D)
C
C     ALL TERMS APPROACH ZERO AS FAST AS C.
C
C     LIMIT E ----> 0 (CONSTANT FUNCTION Y2 ----> Y1)
C     ----------------------------------------------
C     ALL TERMS SHOULD APPROACH THE HISTOGRAM SOLUTION AS E---> 0
C
C     LIMITING VALUES
C     ---------------
C     Q1(E/D)-----------> 1
C     Q2(E/D)-----------> E*E/D/D
C     Q3(E/D)-----------> E/D/6
C     Q4(E/D)-----------> 1/12
C     Q1(CN/BN)---------> 2*(CN/BN)/LN = 2*(CN/BN)/[LY+(N+1)*LX]
C              ---------> 2*(CN/BN)/[(N+1)*LX]
C     LX*BN*Q1(CN/BN)---> 2*CN/(N+1)
C     C0----------------> C*D
C     C1----------------> 2*B*C*D
C     C2----------------> C*D*(3*B*B+C*C)
C
C         N = 0                N = 1
C         -------------------  -------------------------------------
C     (1) 2*C*Y1               2*B*C*Y1
C     (2) 2*C*D                2*C*[B*D+C*E/3]
C         2*C*D                2*B*C*D
C     (3) 2*C*D*Q1(E/D)        2*C*D*[B*Q1(E/D)+2*C*Q3(E/D)]
C         2*C*D                2*C*D*[B        +2*C*E/D/6  ]
C         2*C*D                2*B*C*D
C     (4) 2*[C*D+E*B*Q2(C/B)]  [2*B*C*D+E*{C*C+B*B*Q2(C/B)}]
C         2*C*D                2*B*C*D
C     (5) LX*B0*Q1(C0/B0)      LX*B1*Q1(C1/B1)
C         2*C*D                2*B*C*D
C
C         N = 2
C         ---------------------------------------------------------
C     (1) 2*C*Y1*[B*B+C*C/3]
C     (2) 2*C*[D*(3*B*B+C*C)+2*B*C*E]/3
C         2*C*D*[B*B+C*C/3]
C     (3) 2*C*[(B*B+C*C)*D*Q1(E/D)+4*C*D*{B*Q3(E/D)-2*C*Q4(E/D)}]
C         2*C*[(B*B+C*C)*D        +4*C*D*{B*E/D/6  -2*C/12   }]
C         2*C*[(B*B+C*C)*D        -2*C*C*D/3]
C         2*C*D*(B*B+C*C/3)
C     (4) 2*[C*D*(3*B*B+C*C)+E*{8*B*C*C/3+(B*B+C*C/3)*Q2(C/B)}]/3
C         2*C*D*(B*B+C*C/3)
C     (5) LX*B2*Q1(C2/B2)
C         2*C*D*(B*B+C*C/3)
C
C     ALL TERMS APPROACH EXACTLY THE SAME LIMIT.
C
C     LIMIT E ----> + OR - D (EITHER Y1 OR Y2 ---> 0)
C     ----------------------------------------------
C     THIS LIMIT WILL DEFINE THE INTEGRAL WHEN LOG Y INTERPOLATION IS
C     USED AND Y AS 0.0 AT ONE END OF THE INTERVAL.
C
C     LIMITING VALUES
C     ---------------
C     Q1(E/D)-----------> 0
C     Q2(E/D)-----------> 0
C     Q3(E/D)-----------> 0
C     Q4(E/D)-----------> 0
C     Q1(CN/BN)---------> 0
C
C         N = 0                N = 1
C         -------------------  -------------------------------------
C     (1) 2*C*Y1               2*B*C*Y1
C     (2) 2*C*D                2*C*[B*D+C*E/3]
C     (3) 2*C*D*Q1(E/D)        2*C*D*[B*Q1(E/D)+2*C*Q3(E/D)]
C         0                    0
C     (4) 2*[C*D+E*B*Q2(C/B)]  [2*B*C*D+E*{C*C+B*B*Q2(C/B)}]
C     (5) LX*B0*Q1(C0/B0)      LX*B1*Q1(C1/B1)
C         0                    0
C
C         N = 2
C         ---------------------------------------------------------
C     (1) 2*C*Y1*[B*B+C*C/3]
C     (2) 2*C*[D*(3*B*B+C*C)+2*B*C*E]/3
C     (3) 2*C*[(B*B+C*C)*D*Q1(E/D)+4*C*D*{B*Q3(E/D)-2*C*Q4(E/D)}]
C         0
C     (4) 2*[C*D*(3*B*B+C*C)+E*{8*B*C*C/3+(B*B+C*C/3)*Q2(C/B)}]/3
C     (5) LX*B2*Q1(C2/B2)
C         0
C
C     THE IMPORTANT CONCLUSION IS THAT WHEN LOG Y INTERPOLATION IS
C     USED [(3) AND (5)] THE INTEGRAL HAS A WELL DEFINED LIMIT OF 0.0
C     IF Y IS 0.0 AT ONE, OR BOTH, ENDS OF THE INTERVAL (THIS WILL
C     BE EXPLAINED BELOW).
C
C     LIMITS ON THE INTEGRAL
C=======================================================================
C
C     FOR ANY OF THE INTERPOLATION LAWS USED BY THIS ROUTINE Y(X) IN
C     ANY INTERVAL X1 TO X2 MUST BE IN THE RANGE BETWEEN Y1 AND Y2.
C     THEREFORE OVER THE ENTIRE X RANGE OF THE INTEGRAL WE KNOW THAT
C     THE INTEGRAL LIES IN THE RANGE BETWEEN THE MINIMUM VALUE OF Y
C     TIMES THE X RANGE AND THE MAXIMUM VALUE OF Y TIMES THE X RANGE,
C
C     MINIMUM = (X-MAX - X-MIN)*Y-MIN
C     MAXIMUM = (X-MAX - X-MIN)*Y-MAX
C
C     WHERE X-MIN AND X-MAX ARE THE MINIMUM AND MAXIMUM VALUES OF X AND
C     Y-MIN AND Y-MAX ARE THE MINIMUM AND MAXIMUM TABULATED VALUES OF Y
C     ANYWHERE WITHIN THE X RANGE OF INTEGRATION.
C
C     THEREFORE IF THE TABULATED VALUES OF Y AND THE X RANGE ARE BOUNDED
C     (I.E., ARE LESS THAN + OR - INFINITY) THEN THE INTEGRAL IS ALSO
C     BOUNDED REGARDLESS OF WHICH OF THE INTERPOLATION LAWS USED BY THIS
C     ROUTINE ARE USED TO INTERPOLATE THE DATA.
C
C     UNCERTAINTY IN THE INTEGRAL
C=======================================================================
C
C     IF WE ENCOUNTER ANY PROBLEM OR UNCERTAINTY AS TO HOW TO ACTUALLY
C     INTERPOLATE Y (AS EXPLAINED BELOW) WE KNOW THAT WITH ANY GIVEN
C     X INTERVAL, X1 TO X2, THE CONTRIBUTION OF THIS INTERVAL TO THE
C     INTEGRAL MUST LIE BETWEEN THE MAXIMUM AND MINIMUM VALUE OF Y
C     TIMES THE WIDTH OF THE X INTERVAL. THEREFORE IF ANY PROBLEMS ARE
C     ENCOUNTERED THIS ROUTINE WILL PRINT AN ERROR MESSAGE, SKIP THE
C     X INTERVAL INVOLVED AND ADD,
C
C     DABS(Y-MAX)*(X2-X1))   Y-MAX = THE LARGER OF DABS(Y1) OR ABD(Y2)
C
C     TO ERRMAX TO INDICATE THE UNCERTAINTY IN THE INTEGRAL. IF ERRMAX
C     AS RETURNED FROM THIS ROUTINE IS 0.0 THERE IS NO UNCERTAINTY IN
C     THE INTEGRAL. IF ERRMAX IS GREATER THAN 0.0 THE USER MAY COMPARE
C     ERRMAX TO THE INTEGRAL IN ORDER TO DETERMINE WHETHER OR NOT THE
C     UNCERTAINTY IS OF ANY PRACTICAL IMPORTANCE, E.G., IF ERRMAX
C     IS MUCH SMALLER THAN THE INTEGRAL IT MAY BE OF NO PRACTICAL
C     IMPORTANCE - DEPENDING ON THE APPLICATION.
C
C     WHAT TO DO IF X AND/OR Y NON-POSITIVE FOR LOG INTERPOLATION
C=======================================================================
C
C     Y NOT POSITIVE DURING LOG Y INTERPOLATION
C     -----------------------------------------
C
C     IF Y IS NEGATIVE AT ONE OR BOTH ENDS OF AN X INTERVAL THIS WILL
C     BE CONSIDERED TO BE AN ERROR. IN THIS CASE THE X INTERVAL WILL
C     NOT MAKE ANY CONTRIBUTION TO THE INTEGRAL, THE MAXIMUM POSSIBLE
C     CONTRIBUTION WILL BE ADDED TO ERRMAX (AS EXPLAINED ABOVE) AND
C     AN ERROR MESSAGE WILL BE PRINTED.
C
C     IF Y IS 0.0 AT BOTH ENDS OF AN INTERVAL OBVIOUSLY ITS INTEGRAL
C     IS EXACTLY EQUAL TO 0.0, REGARDLESS OF HOW WE INTERPOLATE AND
C     THIS IS NOT CONSIDERED TO BE AN ERROR.
C
C     IF Y IS 0.0 AT ONE END OF AN INTERVAL BUT POSITIVE AT THE OTHER
C     END OF THE INTERVAL THE SLOPE (A) WILL APPROACH EITHER + OR -
C     INFINITY. IF WE CONSIDER THIS AS (A) APPROACHES + OR - INFINITY
C     AND USE THE ABOVE INTERPOLATION EQUATIONS TO DEFINE Y(X) WITHIN
C     THE INTERVAL WE WILL FIND THAT AS (A) APPROACHES + OR - INFINITY
C     THE FUNCTION Y(X) SMOOTHLY APPROACHES 0.0 OVER THE ENTIRE X
C     INTERVAL EXCEPT EXACTLY AT THE END OF THE INTERVAL WHERE THE
C     TABULATED FUNCTION IS POSITIVE (I.E., AT EITHER X1 OR X2). IN
C     THE LIMIT AS (A) APPROACHES + OR - INFINITY THE INTEGRAL WILL
C     APPROACH 0.0. IN THIS CASE THE X INTERVAL WILL NOT MAKE ANY
C     CONTRIBUTION TO THE INTEGRAL, THE MAXIMUM POSSIBLE CONTRIBUTION
C     WILL BE ADDED TO ERRMAX (AS EXPLAINED ABOVE) AND AN ERROR MESSAGE
C     WILL BE PRINTED.
C
C     X NOT POSITIVE DURING LOG X INTERPOLATION
C     -----------------------------------------
C
C     IF X IS NEGATIVE AT ONE OR BOTH ENDS OF AN X INTERVAL THIS WILL
C     BE CONSIDERED TO BE AN ERROR. IN THIS CASE THE X INTERVAL WILL
C     NOT MAKE ANY CONTRIBUTION TO THE INTEGRAL, THE MAXIMUM POSSIBLE
C     CONTRIBUTION WILL BE ADDED TO ERRMAX (AS EXPLAINED ABOVE) AND
C     AN ERROR MESSAGE WILL BE PRINTED.
C
C     THE CASE IN WHICH THE X RANGE STARTS WITH X=0.0 CAN BE HANDLED IN
C     A MANNER SIMILAR THE CASE DESCRIBED ABOVE. IN THIS CASE IF WE
C     DEFINE THE VALUE OF Y AT ANY VALUE OF X BETWEEN X=0.0 (BUT NOT
C     INCLUDING X=0.0) AND THE NEXT TABULATED POINT WE WILL FIND THAT
C     Y IS CONSTANT EQUAL TO THE VALUE AT THE NEXT TABULATED POINT,
C     I.E., Y IS CONSTANT OVER THE ENTIRE FIRST X INTERVAL AND THE
C     INTEGRAL IS SIMPLY THE VALUE OF Y TIMES THE WIDTH OF THE X INTERVA
C     INDEPENDENT OF HOW WE INTERPOLATE. IN THIS CASE THE X INTERVAL
C     WILL CONTRIBUTE THE CONSTANT VALUE OF Y TIMES THE WIDTH OF THE
C     INTERVAL TO THE INTEGRAL, THE MAXIMUM POSSIBLE CONTRIBUTION WILL
C     BE ADDED TO ERRMAX (AS EXPLAINED ABOVE) AND AN ERROR MESSAGE
C     WILL BE PRINTED.
C
C     BOTH X=0.0 AND Y=0.0 DURING LOG X AND LOG Y INTERPOLATION
C     ---------------------------------------------------------
C
C     IN THE CASE OF LOG X VS. LOG Y INTERPOLATION IF WE REWRITE THE
C     EQUATION IN THE FORM,
C
C     Y(X) = Y(X2)*(X/X2)**A
C
C     WE CAN SEE THAT AS X APPROACHES 0.0 Y WILL ALSO APPROACH 0.0
C     AS LONG AS (A) IS POSITIVE, I.E., (A) IS UNCERTAIN AND CAN BE
C     ANYTHING BETWEEN DELTA (SLIGHTLY BIGGER THAN 0.0) AND INFINITY.
C
C     THE INTEGRAL OF THIS EXPRESSION BETWEEN X1 = 0.0 AND X2 IS,
C
C     Y(X2)*X2/(A+1)
C
C     IN THIS CASE THE X INTERVAL WILL CONTRIBUTE TO THE INTEGRAL BY
C     ASSUMING (A) = 1 (I.E., LINEAR INTERPOLATION), THE MAXIMUM
C     POSSIBLE CONTRIBUTION WILL BE ADDED TO ERRMAX (CORRESPONDING TO
C     (A) = 0) AND AN ERROR MESSAGE WILL BE PRINTED.
C
C=======================================================================
      INCLUDE 'implicit.h'
      REAL*8 NINE
      DIMENSION X(KMAX),Y(KMAX)
C-----DEFINE REQUIRED CONSTANTS FIRST TIME THIS ROUTINE IS CALLED.
      DATA IPASS/0/
      DATA RATMIN/1.0d-01/
      DATA ZERO  /0.0d0/
      DATA HALF  /5.0d-01/
      DATA ONE   /1.0d0/
      DATA TWO   /2.0d0/
      DATA THREE /3.0d0/
      DATA FOUR  /4.0d0/
      DATA FIVE  /5.0d0/
      DATA SEVEN /7.0d0/
      DATA EIGHT /8.0d0/
      DATA NINE  /9.0d0/
      DATA ELEVEN/1.1d1/
      DATA TEEN3 /1.3d1/
C-----DEFINE ARITHMETIC STATEMENT FUNCTIONS FOR EXPANSION OF LOG.
      EXPO(R)=((((C13*R+C11)*R+C9)*R+C7)*R+C5)*R+C3
      Q1(R)=ONE/((((((C13*R+C11)*R+C9)*R+C7)*R+C5)*R+C3)*R+ONE)
      IF(IPASS.NE.0) GO TO 10
      IPASS=1
      C3=ONE/THREE
      C5=ONE/FIVE
      C7=ONE/SEVEN
      C9=ONE/NINE
      C11=ONE/ELEVEN
      C13=ONE/TEEN3
C-----INITIALIZE INTEGRAL AND UNCERTAINTY.
   10 YINT=ZERO
      ERRMAX=ZERO
C-----INSURE ALL INPUT PARAMETERS ARE IN LEGAL. IF NOT RETURN AN
C-----INTEGRAL OF 0.0 (AS INITIALIZED ABOVE)
      IF(NPOWER.LT.0.OR.NPOWER.GT.2) RETURN
      IF(INTERP.LT.1.OR.INTERP.GT.5) RETURN
      IF(KMAX.LT.2) RETURN
      SUM=ZERO
c-----------------------------------------------------------------------
C
C     SELECT INTERPOLATION METHOD.
C
c-----------------------------------------------------------------------
      GO TO (20,80,290,140,440),INTERP
c-----------------------------------------------------------------------
C
C     HISTOGRAM
C
c-----------------------------------------------------------------------
   20 XLAST=X(1)
      IF(NPOWER.eq.1) go to 40
      IF(NPOWER.gt.1) go to 60
C-----INTEGRATE Y.
      DO 30 K=2,KMAX
      XNOW=X(K)
      DX=XNOW-XLAST
      SUM=SUM+DX*Y(K-1)
      XLAST=XNOW
   30 CONTINUE
      YINT=SUM
      RETURN
C-----INTEGRATE X*Y.
   40 DO 50 K=2,KMAX
      XNOW=X(K)
      DX=XNOW-XLAST
      AVX=XNOW+XLAST
      SUM=SUM+DX*AVX*Y(K-1)
      XLAST=XNOW
   50 CONTINUE
      YINT=SUM/TWO
      RETURN
C-----INTEGRATE X*X*Y
   60 SUM1=ZERO
      DO 70 K=2,KMAX
      XNOW=X(K)
      YLAST=Y(K-1)
      DX=XNOW-XLAST
      AVX=XNOW+XLAST
      SUM=SUM+DX*AVX*AVX*YLAST
      SUM1=SUM1+DX*DX*DX*YLAST
      XLAST=XNOW
   70 CONTINUE
      YINT=(SUM+SUM1/THREE)/FOUR
      RETURN
c-----------------------------------------------------------------------
C
C     LIN X VS. LIN Y
C
c-----------------------------------------------------------------------
   80 XLAST=X(1)
      YLAST=Y(1)
      IF(NPOWER.eq.1) go to 100
      IF(NPOWER.gt.1) go to 120
C-----INTEGRATE Y.
      DO 90 K=2,KMAX
      XNOW=X(K)
      YNOW=Y(K)
      DX=XNOW-XLAST
      AVY=YNOW+YLAST
      SUM=SUM+DX*AVY
      XLAST=XNOW
      YLAST=YNOW
   90 CONTINUE
      YINT=SUM/TWO
      RETURN
C-----INTEGRATE X*Y.
  100 SUM1=ZERO
      DO 110 K=2,KMAX
      XNOW=X(K)
      YNOW=Y(K)
      DX=XNOW-XLAST
      DY=YNOW-YLAST
      AVX=XNOW+XLAST
      AVY=YNOW+YLAST
      SUM=SUM+DX*AVX*AVY
      SUM1=SUM1+DX*DX*DY
      XLAST=XNOW
      YLAST=YNOW
  110 CONTINUE
      YINT=(SUM+SUM1/THREE)/FOUR
      RETURN
C-----INTEGRATE X*X*Y.
  120 SUM1=ZERO
      SUM2=ZERO
      DO 130 K=2,KMAX
      XNOW=X(K)
      YNOW=Y(K)
      DX=XNOW-XLAST
      DY=YNOW-YLAST
      AVX=XNOW+XLAST
      AVY=YNOW+YLAST
      SUM=SUM+DX*AVX*AVX*AVY
      SUM1=SUM1+DX*DX*DX*AVY
      SUM2=SUM2+DX*DX*DY*AVX
      XLAST=XNOW
      YLAST=YNOW
  130 CONTINUE
      YINT=(SUM+(SUM1+TWO*SUM2)/THREE)/EIGHT
      RETURN
c-----------------------------------------------------------------------
C
C     LIN X VS. LOG Y
C
c-----------------------------------------------------------------------
  140 XLAST=X(1)
      YLAST=Y(1)
      SUM1=ZERO
      IF(NPOWER.eq.1) go to 190
      IF(NPOWER.gt.1) go to 240
C-----INTEGRATE Y.
      DO 180 K=2,KMAX
      XNOW=X(K)
      YNOW=Y(K)
C-----SKIP INTERVALS WITH NON-POSITIVE Y.
      IF(YLAST.GT.ZERO.AND.YNOW.GT.ZERO) GO TO 150
      CALL NOPLUS(XLAST,XNOW,YLAST,YNOW,ERRMAX,NPOWER)
      GO TO 170
  150 DX=XNOW-XLAST
      AVX=XNOW+XLAST
      DY=YNOW-YLAST
      AVY=YNOW+YLAST
      RATY=DY/AVY
      IF(DABS(RATY).GT.RATMIN) GO TO 160
      RATY2=RATY*RATY
      QY1=Q1(RATY2)
      SUM1=SUM1+DX*AVY*QY1
      GO TO 170
  160 QY1=RATY/DLOG(YNOW/YLAST)
      SUM=SUM+DX*AVY*QY1
  170 XLAST=XNOW
      YLAST=YNOW
  180 CONTINUE
      YINT=SUM+SUM1/TWO
      RETURN
C-----INTEGRATE X*Y.
  190 DO 230 K=2,KMAX
      XNOW=X(K)
      YNOW=Y(K)
C-----SKIP INTERVALS WITH NON-POSITIVE Y.
      IF(YLAST.GT.ZERO.AND.YNOW.GT.ZERO) GO TO 200
      CALL NOPLUS(XLAST,XNOW,YLAST,YNOW,ERRMAX,NPOWER)
      GO TO 220
  200 DX=XNOW-XLAST
      AVX=XNOW+XLAST
      DY=YNOW-YLAST
      AVY=YNOW+YLAST
      RATY=DY/AVY
      IF(DABS(RATY).GT.RATMIN) GO TO 210
      RATY2=RATY*RATY
      EXLOG1=EXPO(RATY2)
      EXLOG2=ONE+RATY2*EXLOG1
      QY1=1/EXLOG2
      QY3=RATY*EXLOG1/(TWO*EXLOG2*EXLOG2)
      SUM1=SUM1+DX*AVY*(AVX*QY1+TWO*DX*QY3)
      GO TO 220
  210 YLOG=DLOG(YNOW/YLAST)
      QY1=RATY/YLOG
      QY3=(HALF-QY1)/YLOG
      SUM=SUM+DX*AVY*(AVX*QY1+TWO*DX*QY3)
  220 XLAST=XNOW
      YLAST=YNOW
  230 CONTINUE
      YINT=(SUM+SUM1/TWO)/TWO
      RETURN
C-----INTEGRATE X*X*Y.
  240 DO 280 K=2,KMAX
      XNOW=X(K)
      YNOW=Y(K)
C-----SKIP INTERVALS WITH NON-POSITIVE Y.
      IF(YLAST.GT.ZERO.AND.YNOW.GT.ZERO) GO TO 250
      CALL NOPLUS(XLAST,XNOW,YLAST,YNOW,ERRMAX,NPOWER)
      GO TO 270
  250 DX=XNOW-XLAST
      AVX=XNOW+XLAST
      DY=YNOW-YLAST
      AVY=YNOW+YLAST
      RATY=DY/AVY
      IF(DABS(RATY).GT.RATMIN) GO TO 260
      RATY2=RATY*RATY
      EXLOG1=EXPO(RATY2)
      EXLOG2=ONE+RATY2*EXLOG1
      QY1=ONE/EXLOG2
      FACTOR=EXLOG1/(TWO*EXLOG2*EXLOG2)
      QY3=RATY*FACTOR
      QY4=FACTOR/(TWO*EXLOG2)
      SUM1=SUM1+DX*((AVX*AVX+DX*DX)*AVY*QY1+
     1 FOUR*DX*AVY*(AVX*QY3-TWO*DX*QY4))
      GO TO 270
  260 YLOG=DLOG(YNOW/YLAST)
      QY1=RATY/YLOG
      QY3=(HALF-QY1)/YLOG
      QY4=QY3/YLOG
      SUM=SUM+DX*((AVX*AVX+DX*DX)*AVY*QY1+
     1 FOUR*DX*AVY*(AVX*QY3-TWO*DX*QY4))
  270 XLAST=XNOW
      YLAST=YNOW
  280 CONTINUE
      YINT=(SUM+SUM1/TWO)/FOUR
      RETURN
c-----------------------------------------------------------------------
C
C     LOG X VS. LIN Y
C
c-----------------------------------------------------------------------
  290 XLAST=X(1)
      YLAST=Y(1)
      IF(NPOWER.eq.1) go to 340
      IF(NPOWER.gt.1) go to 390
C-----INTEGRATE Y.
      DO 330 K=2,KMAX
      XNOW=X(K)
      YNOW=Y(K)
C-----SKIP INTERVALS WITH NON-POSITIVE X.
      IF(XLAST.GT.ZERO) GO TO 300
C-----IF CURRENT INTERVAL EXTENDS INTO POSITIVE X ADD CONTRIBUTION TO
C-----INTEGRAL.
      IF(XNOW.GT.ZERO) SUM=SUM+XNOW*YNOW
      CALL NOPLUS(XLAST,XNOW,YLAST,YNOW,ERRMAX,NPOWER)
      GO TO 320
  300 DX=XNOW-XLAST
      AVX=XNOW+XLAST
      DY=YNOW-YLAST
      AVY=YNOW+YLAST
      RATX=DX/AVX
      IF(DABS(RATX).GT.RATMIN) GO TO 310
      RATX2=RATX*RATX
      EXLOG1=EXPO(RATX2)
      EXLOG2=ONE+RATX2*EXLOG1
      QX2=RATX2*EXLOG1/EXLOG2
      SUM=SUM+DX*AVY+DY*AVX*QX2
      GO TO 320
  310 QX2=ONE-TWO*RATX/DLOG(XNOW/XLAST)
      SUM=SUM+DX*AVY+DY*AVX*QX2
  320 XLAST=XNOW
      YLAST=YNOW
  330 CONTINUE
      YINT=SUM/TWO
      RETURN
C-----INTEGRATE X*Y.
  340 DO 380 K=2,KMAX
      XNOW=X(K)
      YNOW=Y(K)
C-----SKIP INTERVALS WITH NON-POSITIVE X.
      IF(XLAST.GT.ZERO) GO TO 350
C-----IF CURRENT INTERVAL EXTENDS INTO POSITIVE X ADD CONTRIBUTION TO
C-----INTEGRAL.
      IF(XNOW.GT.ZERO) SUM=SUM+TWO*XNOW*XNOW*YNOW
      CALL NOPLUS(XLAST,XNOW,YLAST,YNOW,ERRMAX,NPOWER)
      GO TO 370
  350 DX=XNOW-XLAST
      AVX=XNOW+XLAST
      DY=YNOW-YLAST
      AVY=YNOW+YLAST
      RATX=DX/AVX
      IF(DABS(RATX).GT.RATMIN) GO TO 360
      RATX2=RATX*RATX
      EXLOG1=EXPO(RATX2)
      EXLOG2=ONE+RATX2*EXLOG1
      QX2=RATX2*EXLOG1/EXLOG2
      SUM=SUM+TWO*DX*AVX*AVY+DY*(DX*DX+AVX*AVX*QX2)
      GO TO 370
  360 QX2=ONE-TWO*RATX/DLOG(XNOW/XLAST)
      SUM=SUM+TWO*DX*AVX*AVY+DY*(DX*DX+AVX*AVX*QX2)
  370 XLAST=XNOW
      YLAST=YNOW
  380 CONTINUE
      YINT=SUM/EIGHT
      RETURN
C-----INTEGRATE X*X*Y.
  390 DO 430 K=2,KMAX
      XNOW=X(K)
      YNOW=Y(K)
C-----SKIP INTERVALS WITH NON-POSITIVE X.
      IF(XLAST.GT.ZERO) GO TO 400
C-----IF CURRENT INTERVAL EXTENDS INTO POSITIVE X ADD CONTRIBUTION TO
C-----INTEGRAL.
      IF(XNOW.GT.ZERO) SUM=SUM+XNOW*XNOW*XNOW*YNOW
      CALL NOPLUS(XLAST,XNOW,YLAST,YNOW,ERRMAX,NPOWER)
      GO TO 420
  400 DX=XNOW-XLAST
      AVX=XNOW+XLAST
      DY=YNOW-YLAST
      AVY=YNOW+YLAST
      RATX=DX/AVX
      IF(DABS(RATX).GT.RATMIN) GO TO 410
      RATX2=RATX*RATX
      EXLOG1=EXPO(RATX2)
      EXLOG2=ONE+RATX2*EXLOG1
      QX2=RATX2*EXLOG1/EXLOG2
      SUM=SUM+DX*AVY*(AVX*AVX+DX*DX/THREE)+
     1 DY*(EIGHT*AVX*DX*DX/NINE+(AVX*AVX/THREE+DX*DX/NINE)*QX2)
      GO TO 420
  410 QX2=ONE-TWO*RATX/DLOG(XNOW/XLAST)
      SUM=SUM+DX*AVY*(AVX*AVX+DX*DX/THREE)+
     1 DY*(EIGHT*AVX*DX*DX/NINE+(AVX*AVX/THREE+DX*DX/NINE)*QX2)
  420 XLAST=XNOW
      YLAST=YNOW
  430 CONTINUE
      YINT=SUM/EIGHT
      RETURN
c-----------------------------------------------------------------------
C
C     LOG X VS. LOG Y FOR NPOWER = 0, 1 OR 2
C
c-----------------------------------------------------------------------
  440 XLAST=X(1)
      YLAST=Y(1)
      SUM1=ZERO
      NPP1=NPOWER+1
      ZLAST=Y(1)*(XLAST**NPP1)
      DO 500 K=2,KMAX
      XNOW=X(K)
      YNOW=Y(K)
      ZNOW=YNOW*(XNOW**NPP1)
C-----SKIP INTERVALS WITH NON-POSITIVE X.
      IF(XLAST.GT.ZERO) GO TO 450
C-----IF CURRENT INTERVAL EXTENDS INTO POSITIVE X WITH A POSITIVE Y
C-----VALUE ADD ITS CONTRIBUTION TO THE INTEGRAL.
      IF(XNOW.LE.ZERO.OR.YNOW.LE.ZERO) GO TO 460
C-----DO NOT ADD CONTRIBUTION IF LAST Y VALUE WAS NEGATIVE.
      IF(YLAST.LT.ZERO) GO TO 460
C-----ASSUME EITHER CONSTANT EQUAL TO CURRENT Y VALUE (IF LAST Y VALUE
C-----IS POSITIVE) OR LINEAR FROM 0.0 TO CURRENT Y VALUE (IF LAST Y
C-----VALUE IS 0.0).
      XPOWER=NPP1
      IF(YLAST.EQ.ZERO) XPOWER=XPOWER+ONE
      SUM=SUM+XNOW*ZNOW/XPOWER
      GO TO 460
C-----SKIP INTERVALS WITH NON-POSITIVE Y.
  450 IF(YLAST.GT.ZERO.AND.YNOW.GT.ZERO) GO TO 470
  460 CALL NOPLUS(XLAST,XNOW,YLAST,YNOW,ERRMAX,NPOWER)
      GO TO 490
  470 DZ=ZNOW-ZLAST
      AVZ=ZNOW+ZLAST
      RATZ=DZ/AVZ
      IF(DABS(RATZ).GT.RATMIN) GO TO 480
      RATZ2=RATZ*RATZ
      QZ1=Q1(RATZ2)
      SUM1=SUM1+AVZ*QZ1*DLOG(XNOW/XLAST)
      GO TO 490
  480 QZ1=RATZ/DLOG(ZNOW/ZLAST)
      SUM=SUM+AVZ*QZ1*DLOG(XNOW/XLAST)
  490 XLAST=XNOW
      YLAST=YNOW
      ZLAST=ZNOW
  500 CONTINUE
      YINT=SUM+SUM1/TWO
      RETURN
      END
      SUBROUTINE INT3D(X,Y1,Y2,Y3,KMAX,INTX)
C=======================================================================
C
C     SUBROUTINE INT3D  (VERSION 92-1) JANUARY 1992
C
C     A VARIATION OF INT2D - SEE INT2D FOR DETAILS.
C
C     GIVEN 2 VECTORS, Y1 AND Y2, INTEGRATE FROM X(1) AND X(2) BETWEEN
C     EACH CORRESPONDING ELEMENT OF Y1 AND Y2. STORE THE RESULTING
C     VECTOR IN Y3.
C
C     NOTE - THE RESULT IN Y3 IS CUMULATIVE - NOT MERELY THE RESULT
C            FROM THIS INTERVAL - THEREFORE YOU MUST INITIALIZE Y3
C            TO START.
C
C     THERE ARE KMAX ELEMENTS IN EACH OF THE VECTORS, Y1, Y2, Y3.
C
C     INTERPOLATION IS DEFINED BY INTX
C
C=======================================================================
      INCLUDE 'implicit.h'
      REAL*8 NINE
      DIMENSION X(2),Y1(KMAX),Y2(KMAX),Y3(KMAX)
C-----DEFINE REQUIRED CONSTANTS FIRST TIME THIS ROUTINE IS CALLED.
      DATA IPASS/0/
      DATA RATMIN/1.0d-01/
      DATA ZERO  /0.0d0/
      DATA ONE   /1.0d0/
      DATA TWO   /2.0d0/
      DATA THREE /3.0d0/
      DATA FIVE  /5.0d0/
      DATA SEVEN /7.0d0/
      DATA NINE  /9.0d0/
      DATA ELEVEN/1.1d1/
      DATA TEEN3 /1.3d1/
C-----DEFINE ARITHMETIC STATEMENT FUNCTIONS FOR EXPANSION OF LOG.
      EXPO(R)=((((C13*R+C11)*R+C9)*R+C7)*R+C5)*R+C3
      Q1(R)=ONE/((((((C13*R+C11)*R+C9)*R+C7)*R+C5)*R+C3)*R+ONE)
      IF(IPASS.NE.0) GO TO 10
      IPASS=1
      C3=ONE/THREE
      C5=ONE/FIVE
      C7=ONE/SEVEN
      C9=ONE/NINE
      C11=ONE/ELEVEN
      C13=ONE/TEEN3
C-----INSURE ALL INPUT PARAMETERS ARE LEGAL. IF NOT RETURN ALL
C-----INTEGRALS OF 0.0
   10 INTERP=INTX
      IF(INTERP.GT.10) INTERP=INTERP-10*(INTERP/10)
      IF(INTERP.GE.1.AND.INTERP.LE.5) GO TO 20
      RETURN
c-----------------------------------------------------------------------
C
C     SELECT INTERPOLATION METHOD.
C
c-----------------------------------------------------------------------
   20 GO TO (30,50,120,70,190),INTERP
c-----------------------------------------------------------------------
C
C     HISTOGRAM
C
c-----------------------------------------------------------------------
   30 DX=X(2)-X(1)
C-----INTEGRATE Y.
      DO 40 K=1,KMAX
      Y3(K)=Y3(K)+DX*Y1(K)
   40 CONTINUE
      RETURN
c-----------------------------------------------------------------------
C
C     LIN X VS. LIN Y
C
c-----------------------------------------------------------------------
   50 DX=(X(2)-X(1))/TWO
C-----INTEGRATE Y.
      DO 60 K=1,KMAX
      Y3(K)=Y3(K)+DX*(Y2(K)+Y1(K))
   60 CONTINUE
      RETURN
c-----------------------------------------------------------------------
C
C     LIN X VS. LOG Y
C
c-----------------------------------------------------------------------
   70 DX=X(2)-X(1)
      AVX=X(2)+X(1)
C-----INTEGRATE Y.
      DO 110 K=1,KMAX
C-----SKIP INTERVALS WITH NON-POSITIVE Y.
      IF(Y1(K).GT.ZERO.AND.Y2(K).GT.ZERO) GO TO 80
      GO TO 110
   80 DY=Y2(K)-Y1(K)
      AVY=Y2(K)+Y1(K)
      RATY=DY/AVY
      IF(DABS(RATY).GT.RATMIN) GO TO 90
      RATY2=RATY*RATY
      QY1=Q1(RATY2)/TWO
      GO TO 100
   90 QY1=RATY/DLOG(Y2(K)/Y1(K))
  100 Y3(K)=Y3(K)+DX*AVY*QY1
  110 CONTINUE
      RETURN
c-----------------------------------------------------------------------
C
C     LOG X VS. LIN Y
C
c-----------------------------------------------------------------------
  120 DX=X(2)-X(1)
      AVX=X(2)+X(1)
      IF(X(2).GT.ZERO) GO TO 130
      RETURN
  130 IF(X(1).GT.ZERO) GO TO 150
      DO 140 K=1,KMAX
      Y3(K)=Y3(K)+X(2)*Y2(K)
  140 CONTINUE
      RETURN
C-----INTEGRATE Y - BY NOW BOTH X(1) AND X(2) MUST BE POSITIVE.
  150 DO 180 K=1,KMAX
      DY=Y2(K)-Y1(K)
      AVY=Y2(K)+Y1(K)
      RATX=DX/AVX
      IF(DABS(RATX).GT.RATMIN) GO TO 160
      RATX2=RATX*RATX
      EXLOG1=EXPO(RATX2)
      EXLOG2=ONE+RATX2*EXLOG1
      QX2=RATX2*EXLOG1/EXLOG2
      GO TO 170
  160 QX2=ONE-TWO*RATX/DLOG(X(2)/X(1))
  170 Y3(K)=Y3(K)+(DX*AVY+DY*AVX*QX2)/TWO
  180 CONTINUE
      RETURN
c-----------------------------------------------------------------------
C
C     LOG X VS. LOG Y
C
c-----------------------------------------------------------------------
  190 DX=X(2)-X(1)
      AVX=X(2)+X(1)
      IF(X(2).GT.ZERO) GO TO 200
      RETURN
  200 IF(X(1).GT.ZERO) GO TO 220
      DO 210 K=1,KMAX
      IF(Y2(K).LE.ZERO) GO TO 210
      IF(Y1(K).LT.ZERO) GO TO 210
      XPOWER=ONE
      IF(Y1(K).EQ.ZERO) XPOWER=XPOWER+ONE
      Y3(K)=Y3(K)+X(2)*X(2)*Y2(K)/XPOWER
  210 CONTINUE
      RETURN
C-----INTEGRATE Y - BY NOW BOTH X(1) AND X(2) MUST BE POSITIVE.
  220 DO 260 K=1,KMAX
      ZLAST=Y1(K)*X(1)
      ZNOW=Y2(K)*X(2)
C-----SKIP INTERVALS WITH NON-POSITIVE Y.
      IF(Y1(K).GT.ZERO.AND.Y2(K).GT.ZERO) GO TO 230
      GO TO 260
  230 DZ=ZNOW-ZLAST
      AVZ=ZNOW+ZLAST
      RATZ=DZ/AVZ
      IF(DABS(RATZ).GT.RATMIN) GO TO 240
      RATZ2=RATZ*RATZ
      QZ1=Q1(RATZ2)/TWO
      GO TO 250
  240 QZ1=RATZ/DLOG(ZNOW/ZLAST)
  250 Y3(K)=Y3(K)+AVZ*QZ1*DLOG(X(2)/X(1))
  260 CONTINUE
      RETURN
      END
      SUBROUTINE NOPLUS(XLAST,XNOW,YLAST,YNOW,ERRMAX,NPOWER)
C=======================================================================
C
C     ERROR HANDLING ROUTINE FOR SUBROUTINE INT2D. CALL WHEN X AND/OR
C     Y ARE NON-POSITIVE DURING LOG INTERPOLATION.
C
C     ADD THE MAXIMUM POSSIBLE UNCERTAINTY TO ERRMAX
C
C     THE MAXIMUM UNCERTAINTY WILL BE THE WIDTH OF THE X INTERVAL
C     TIMES THE MAXIMUM VALUE OF Y TIMES THE MAXIMUM VALUE OF X**NPOWER
C
C=======================================================================
      INCLUDE 'implicit.h'
      YMAX=DABS(YLAST)
      YABS=DABS(YNOW)
      IF(YABS.GT.YMAX) YMAX=YABS
      XMAX=DABS(XLAST)
      XABS=DABS(XNOW)
      IF(XABS.GT.XMAX) XMAX=XABS
      ERRMAX=ERRMAX+(XNOW-XLAST)*YMAX*(XNOW**NPOWER)
      RETURN
      END
      SUBROUTINE MERGE1
C=======================================================================
C
C     DEFINE EVERYTHING ON A MERGED ENERGY GRID.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INCLUDE 'sixpak.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/INNER/NBT3(100),INT3(100),NP3,NR3
      COMMON/FILE4/NPT4
      COMMON/FILE5/NPT5
      COMMON/TAB4ER/NBT4(100),INT4(100),NR4
c-----------------------------------------------------------------------
C
C     INITIALIZE SECONDARY ENERGY GRID TO ENERGIES WITH FIRST COSINE.
C
c-----------------------------------------------------------------------
      NPT5=NP3
      DO 10 I=1,NPT5
      X5(I)=X3(I)
      Y5(I)=0.0d0
      Y3LAST(I)=Y3(I)
   10 CONTINUE
      RETURN
C=======================================================================
C
C     DEFINE MERGED ENERGY GRID.
C
C=======================================================================
      ENTRY MERGE2
      NP55=0
      IP3=1
      IP5=1
   20 NP55=NP55+1
C-----TERMINATE IF CORE EXCEEDED.
      IF(NP55.GT.MAXPOINT) GO TO 210
      IF(IP3.GT.NP3) GO TO 50
      IF(IP5.GT.NPT5) GO TO 30
      IF(X3(IP3).eq.X5(IP5)) go to 40
      IF(X3(IP3).gt.X5(IP5)) go to 50
   30 XX5(NP55)=X3(IP3)
      IP3=IP3+1
      GO TO 60
   40 XX5(NP55)=X5(IP5)
      IP3=IP3+1
      IP5=IP5+1
      GO TO 60
   50 XX5(NP55)=X5(IP5)
      IP5=IP5+1
   60 IF(IP3.LE.NP3.OR.IP5.LE.NPT5) GO TO 20
c-----------------------------------------------------------------------
C
C     NOTHING TO DO IF NO NEW ENERGIES.
C
c-----------------------------------------------------------------------
      IF(NP55.EQ.NPT5) GO TO 190
c-----------------------------------------------------------------------
C
C     INTERPOLATE ALL TO NEW ENERGY GRID.
C
c-----------------------------------------------------------------------
      IP3=1
      IP5=1
      DO 170 I=1,NP55
C-----Y3
   70 IF(IP3.GT.NP3) GO TO 90
      IF(X3(IP3).eq.XX5(I)) go to 110
      IF(X3(IP3).gt.XX5(I)) go to 80
      IP3=IP3+1
      GO TO 70
   80 IF(IP3.GT.1) GO TO 100
   90 YY3(I)=0.0d0
      GO TO 120
  100 YY3(I)=TERPIT(XX5(I),X3(IP3),X3(IP3-1),Y3(IP3),Y3(IP3-1),2)
      GO TO 120
  110 YY3(I)=Y3(IP3)
      IP3=IP3+1
C-----Y5 AND Y3LAST (BOTH ARE ALREADY ON SAME GRID).
  120 IF(IP5.GT.NPT5) GO TO 140
      IF(X5(IP5).eq.XX5(I)) go to 160
      IF(X5(IP5).gt.XX5(I)) go to 130
      IP5=IP5+1
      GO TO 120
  130 IF(IP5.GT.1) GO TO 150
  140 YY5(I)   =0.0d0
      YY3LST(I)=0.0d0
      GO TO 170
  150 YY5(I)=TERPIT(XX5(I),X5(IP5),X5(IP5-1),Y5(IP5),Y5(IP5-1),2)
      YY3LST(I)=TERPIT(XX5(I),X5(IP5),X5(IP5-1),
     1 Y3LAST(IP5),Y3LAST(IP5-1),2)
      GO TO 170
  160 YY5(I)=Y5(IP5)
      YY3LST(I)=Y3LAST(IP5)
      IP5=IP5+1
  170 CONTINUE
c-----------------------------------------------------------------------
C
C     DEFINE NEW POINT COUNT AND COPY EVERYTHING BACK TO MERGED GRID.
C
c-----------------------------------------------------------------------
      NPT5=NP55
      NP3=NP55
      NBT3(NR3)=NP3
      DO 180 I=1,NPT5
      X5(I)=XX5(I)
      Y5(I)=YY5(I)
      X3(I)=XX5(I)
      Y3(I)=YY3(I)
      Y3LAST(I)=YY3LST(I)
  180 CONTINUE
c-----------------------------------------------------------------------
C
C     INTEGRATE BETWEEN 2 COSINES.
C
c-----------------------------------------------------------------------
C-----DEFINE INTERPOLATION LAW.
  190 INTD3=MYTERP(NPT4,NBT4,INT4,NR4)
C-----CHECK INTERPOLATION.
      CALL CHECK3(X4(NPT4-1),Y3LAST,Y3,NPT5,INTD3)
C-----INTEGRATE.
      CALL INT3D(X4(NPT4-1),Y3LAST,Y3,Y5,NPT5,INTD3)
C-----SAVE VALUES FOR NEXT INTERVAL INTEGRATION.
      DO 200 I=1,NPT5
      Y3LAST(I)=Y3(I)
  200 CONTINUE
      GO TO 220
c-----------------------------------------------------------------------
C
C     ERROR...CORE EXCEEDED.
C
c-----------------------------------------------------------------------
  210 WRITE(OUTP,230)
c-----2018/1/22 - Added on-line
      WRITE(*   ,230)
      CALL ENDERROR
  220 RETURN
  230 FORMAT(1X,78('=')/' MERGE2...Memory Exceeded',
     1 '..Execution Terminated'/
     1 1X,78('='))
      END
      SUBROUTINE HISTOG(X,Y,NPXY)
C=======================================================================
C
C     CONVERSION FROM HISTOGRAM TO LINEAR FOR PLOTTAB OUTPUT.
C
C=======================================================================
      INCLUDE 'implicit.h'
      DIMENSION X(NPXY),Y(NPXY)
      NPNEW=2*(NPXY-1)
      II=NPNEW
      DO 10 I=NPXY,2,-1
      X(II)=X(I)
      X(II-1)=X(I-1)
      Y(II)=Y(I-1)
      Y(II-1)=Y(I-1)
      II=II-2
   10 CONTINUE
      NPXY=NPNEW
      RETURN
      END
      SUBROUTINE SIZER(Y,NY,YLOW)
C=======================================================================
C
C     DEFINE MINIMUM POSITIVE VALUE IN AN ARRAY.
C
C     INITIALIZE YLOW=0.0 TO START.
C
C=======================================================================
      INCLUDE 'implicit.h'
      DIMENSION Y(NY)
C-----LOOP OVER POINTS.
      DO 20 IY=1,NY
C-----IGNORE NON-POSITIVE POINTS.
      IF(Y(IY).le.0.0d0) go to 20
C-----INITIALIZE YLOW IF IT IS NOT ALREADY POSITIVE.
      IF(YLOW.gt.0.0d0) go to 10
      YLOW=Y(IY)
      GO TO 20
C-----OTHERWISE KEEP TRACK OF MINIMUM POSITIVE VALUE.
   10 IF(Y(IY).LT.YLOW) YLOW=Y(IY)
   20 CONTINUE
      RETURN
      END
      SUBROUTINE SPACER(IMPLOT)
C=======================================================================
C
C     DECIDE WHETHER OR NOT TO CREATE PLOTTAB OUTPUT - SPACE DATA
C     IN INCIDENT ENERGY INTERVALS.
C
C     SELECT FIRST, LAST AND 1 MEV INTERVALS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
      COMMON/SPAC3D/EI,EP,XMU
      COMMON/FILE4/NPT4
      DATA EV2MEV/1.0d6/
C-----DECIDE AT FIRST SECONDARY ENERGY OR FIRST COSINE (BOTH NPT4=1).
      IF(NPT4.NE.1) RETURN
      IMPLOT=0
      IEINOW=EI/EV2MEV
C-----SELECT FIRST OR LAST.
      IF(IE.EQ.1.OR.IE.EQ.NE) GO TO 10
C-----SELECT 1 MEV INTERVALS.
      IF(IEINOW.LE.IEILST) RETURN
   10 IEILST=IEINOW
      IMPLOT=1
      RETURN
      END
      SUBROUTINE ZALEFT(IZAC,IZAR,MT)
C=======================================================================
C
C     FOR A COMPUND NUCLEUS (IZAC) AND MT DEFINE THE RESIDUAL
C     NUCLEUS (IZAR)
C
C     USED ONLY BY KALBACH-MANN TO DEFINE RESIDUAL NUCLEUS.
C     WARNING...THE FOLLOWING LIST DOES NOT INCLUDE ALL MT NUMBER FOR
C     ENDF/B - ONLY THOSE REQUIRED FOR USE WITH KALBACH-MANN.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      DIMENSION MTTAB1(40),MTTAB2(40),IZAOUT(40)
c-----------------------------------------------------------------------
C
C     TABLE OF MT NUMBERS.
C
c-----------------------------------------------------------------------
C-----LOWER LIMIT OF AN MT RANGE.
      DATA MTTAB1/
     1    4,   16,   17,   22,   23,
     2   24,   25,   28,   29,   30,
     3   32,   33,   34,   35,   36,
     4   37,   41,   42,   50,  103,
     5  104,  105,  106,  107,  108,
     6  109,  111,  112,  113,  114,
     7  115,  116,  600,  650,  700,
     8  750,  800,    2,    4,  102/
C-----UPPER LIMIT OF AN MT RANGE.
      DATA MTTAB2/
     1    4,   16,   17,   22,   23,
     2   24,   25,   28,   29,   30,
     3   32,   33,   34,   35,   36,
     4   37,   41,   42,   91,  103,
     5  104,  105,  106,  107,  108,
     6  109,  111,  112,  113,  114,
     7  115,  116,  649,  699,  749,
     8  799,  849,    2,    4,  102/
C-----TABLE OF ZA DIFFERENCE RELATIVE TO COMPOUND NUCLEUS = SUM
C-----OF THE ZA OF ALL EMITTED PARTICLES.
      DATA IZAOUT/
     1    1,    2,    3, 2005, 6013,
     2 2006, 2007, 1002, 4009, 4010,
     3 1003, 1004, 2004, 6011, 6012,
     4    4, 1003, 1004,    1, 1001,
     5 1002, 1003, 2003, 2004, 4008,
     6 6012, 2002, 3005, 6011, 6010,
     7 2003, 2004, 1001, 1002, 1003,
     8 2003, 2004,    0,    1,    0/
C-----DEFINE INDEX TO ZA DIFFERENCE TABLE.
      DO 10 INX=1,39
      IF(MT.GE.MTTAB1(INX).AND.MT.LE.MTTAB2(INX)) GO TO 20
   10 CONTINUE
C-----NOT DEFINED - PRINT WARNING AND ASSUME SAME AS COMPOUND.
      WRITE(OUTP,30) MT
      WRITE(OUTP,40)
      IZAR=IZAC
      RETURN
C-----DEFINED.
   20 IZAR=IZAC-IZAOUT(INX)
      RETURN
   30 FORMAT(1X,78('-')/
     1 ' WARNING - Cannot Define Residual Nucleus for MT=',I4)
   40 FORMAT(
     2 '           Will Assume Resudual is the Same as Compound'/
     3 1X,78('-'))
      END
      SUBROUTINE PLOT1A
C=======================================================================
C
C     PLOTTAB FORMATTED OUTPUT.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INCLUDE 'sixpak.h'
      CHARACTER*4 EPHOL
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
      COMMON/DUMHEAD/ZERO1,ZERO2,L10,L20,N10,N20
      COMMON/SPAC3D/EI,EP,XMU
      COMMON/TAB4ER/NBT4(100),INT4(100),NR4
      COMMON/KMPARM/F0,RKM,FKM
      COMMON/MUSUM/SUMMU(3)
      COMMON/PARTIO/AWRET,IVERSE,IZAI,IZAT,IZAP,NZAT
      COMMON/PLOTR/NPLOT,KPLOT,IPLOT
      COMMON/INNER/NBT3(100),INT3(100),NP3,NR3
      COMMON/FILE4/NPT4
      COMMON/FILE5/NPT5
      DIMENSION TABMU(11)
      DATA NMUT/11/
      DATA TABMU/
     1 -1.0D+00, -0.8D+00, -0.6D+00, -0.4D+00, -0.2D+00,  0.0D+00,
     2  0.2D+00,  0.4D+00,  0.6D+00,  0.8D+00,  1.0D+00/
      DATA EV2KEV/1.0d3/
      DATA EV2MEV/1.0d6/
      DATA EPHOL/' E''='/
C***********************************************************************
C
C     PLOTTAB FORMAT - ANGULAR DISTRIBUTIONS OR LEGENDRE COEFFICIENTS.
C
C***********************************************************************
C-----NOT IF NPLOT IS NOT SET.
      IF(NPLOT.LE.0) RETURN
C-----ONLY LAW 1.
      IF(LAW.NE.1) RETURN
C-----SKIP ISOTROPIC DATA.
      IF(NA.EQ.0) RETURN
C-----ANGULAR DISTRIBUTIONS ONLY IF NPLOT IS SET FOR THEM.
      IF(LANG.NE.1.AND.NPLOT.NE.1) RETURN
C-----LEGENDRE COEFFICIENTS ONLY IF NPLOT IS SET FOR THEM.
      IF(LANG.EQ.1.AND.NPLOT.NE.3) RETURN
C-----ONLY NEUTRON IN AND OUT.
      IF(IZAI.NE.1.OR.IZAP.NE.1) RETURN
C-----SELECT FIRST, LAST AND 1 MEV INTERVALS.
      CALL SPACER(IMPLOT)
      IF(IMPLOT.LE.0) RETURN
C-----FOR LEGENDRE COEFFICIENTS RENORMALIZE TO F0.
      YNORM=1.0d0
      IF(LANG.EQ.1.AND.F0.GT.0.0d0) YNORM=1.0d0/F0
      DO 10 K=1,NP3
      YY5(K)=YNORM*Y3(K)
   10 CONTINUE
      IF(EP.GE.EV2MEV) GO TO 30
      IF(EP.GE.EV2KEV) GO TO 20
      WRITE(IPLOT,300) EPHOL,EP
      GO TO 40
   20 EPKEV=EP/EV2KEV
      WRITE(IPLOT,310) EPHOL,EPKEV
      GO TO 40
   30 EPMEV=EP/EV2MEV
      WRITE(IPLOT,320) EPHOL,EPMEV
   40 WRITE(IPLOT,330) (X3(K),YY5(K),K=1,NP3)
      WRITE(IPLOT,340)
      RETURN
C=======================================================================
C
C     PLOTTAB FORMAT - AVERAGED ANGULAR DISTRIBUTION OR LEGENDRE
C     COEFFICIENTS
C
C=======================================================================
      ENTRY PLOT1B
C-----ONLY LAW 1.
      IF(LAW.NE.1) RETURN
C-----SKIP ISOTROPIC DATA.
      IF(NA.EQ.0) RETURN
C-----ANGULAR DISTRIBUTIONS ONLY IF NPLOT IS SET FOR THEM.
      IF(LANG.NE.1.AND.NPLOT.NE.1) RETURN
C-----LEGENDRE COEFFICIENTS ONLY IF NPLOT IS SET FOR THEM.
      IF(LANG.EQ.1.AND.NPLOT.NE.3) RETURN
      IF(IMPLOT.LE.0) RETURN
C-----ONLY NEUTRON IN AND OUT.
      IF(IZAI.NE.1.OR.IZAP.NE.1) RETURN
C-----PLOTTAB DATA.
      EIMEV=EI/EV2MEV
      WRITE(IPLOT,350) EIMEV
      WRITE(IPLOT,330) (X5(K),Y5(K),K=1,NP3)
      WRITE(IPLOT,340)
C-----PLOTTAB INPUT PARAMETERS.
      CALL PLTINP(NEP+1,ZERO1)
      RETURN
C=======================================================================
C
C     PLOTTAB FORMAT - ANGULAR DISTRIBUTIONS INVERTED AT FIXED COSINES
C     TO DEFINE SPECTRA.
C
C     SAVE SPECTRA AT FIXED COSINES TO OUTPUT AT END.
C
C=======================================================================
      ENTRY PLOT2A
C-----NOT IF NPLOT IS NOT SET FOR SPECTRA.
      IF(NPLOT.NE.2) RETURN
C-----SKIP ISOTROPIC DATA.
      IF(NA.EQ.0) RETURN
C-----ONLY LAW 1 TABULATED.
      IF(LAW.NE.1.OR.LANG.EQ.1) RETURN
C-----ONLY NEUTRON IN AND OUT.
      IF(IZAI.NE.1.OR.IZAP.NE.1) RETURN
C-----SELECT FIRST, LAST AND 1 MEV INTERVALS.
      CALL SPACER(IMPLOT)
      IF(IMPLOT.LE.0) RETURN
C-----DEFINE VALUES AT FIXED COSINES.
      ILOW=1
      DO 90 IMUT=1,NMUT
      DO 50 I=ILOW,NP3
      IF(X3(I).eq.TABMU(IMUT)) go to 80
      IF(X3(I).gt.TABMU(IMUT)) go to 60
   50 CONTINUE
C-----SET = 0.0 IF NOT IN TABULATED RANGE.
      SPECTA(NPT4,IMUT)=0.0d0
      ILOW=NP3
      GO TO 90
   60 IF(I.GT.1) GO TO 70
      SPECTA(NPT4,IMUT)=0.0d0
      GO TO 90
C-----INTERPOLATE VALUE - ASSUME ONLY 1 INTERPLATION REGION.
   70 SPECTA(NPT4,IMUT)=
     1 2.0d0*TERPIT(TABMU(IMUT),X3(I-1),X3(I),Y3(I-1),Y3(I),INT3(1))
      ILOW=I
      GO TO 90
C-----USE TABULATED VALUE.
   80 SPECTA(NPT4,IMUT)=2.0d0*Y3(I)
      ILOW=I
   90 CONTINUE
      RETURN
C=======================================================================
C
C     PLOTTAB FORMAT - ANGULAR DISTRIBUTIONS INVERTED AT FIXED COSINES
C     TO DEFINE SPECTRA.
C
C     OUTPUT SPECTRA AT FIXED COSINE AND AVERAGED OVER DIRECTION.
C
C=======================================================================
      ENTRY PLOT2B
C-----NOT IF NPLOT IS NOT SET FOR SPECTRA.
      IF(NPLOT.NE.2) RETURN
C-----SKIP ISOTROPIC DATA.
      IF(NA.EQ.0) RETURN
C-----ONLY LAW 1 TABULATED.
      IF(LAW.NE.1.OR.LANG.EQ.1) RETURN
C-----ONLY NEUTRON IN AND OUT.
      IF(IZAI.NE.1.OR.IZAP.NE.1) RETURN
      IF(IMPLOT.LE.0) RETURN
C-----IGNORE LOW INCIDENT ENERGY WITH NOT ENOUGH SECONDARY ENERGIES.
      IF(NPT4.LE.2) RETURN
C-----OUTPUT SPECTRA AT FIXED COSINE AND AVERAGED OVER DIRECTION.
      NMUTP1=NMUT+1
      YLOW=0.0d0
      DO 150 I=1,NMUTP1
      NNOUT=NPT4
      IF(I.GT.NMUT) GO TO 110
C-----AT FIXED COSINE.
      WRITE(IPLOT,390) TABMU(I)
      DO 100 K=1,NNOUT
      XX5(K)=X4(K)/EV2MEV
      YY5(K)=SPECTA(K,I)*EV2MEV
  100 CONTINUE
      GO TO 130
C-----SPECTRUM AVERAGED OVER DIRECTION.
  110 EIMEV=EI/EV2MEV
      WRITE(IPLOT,350) EIMEV
      DO 120 K=1,NNOUT
      XX5(K)=X4(K)/EV2MEV
      YY5(K)=Y4(K)*EV2MEV
  120 CONTINUE
C-----RENORMALIZE TO EXACTLY UNITY.
  130 XINTEP=XINT2(XX5,YY5,NBT4,INT4,NR4)
      CALL RENORM(YY5,NPT4,XINTEP)
C-----DEFINE MINIMUM POSITIVE VALUE.
      CALL SIZER(YY5,NPT4,YLOW)
C-----IF NECESSARY CONVERT FROM HISTOGRAM TO LINEAR.
      IF(LEP.EQ.1) CALL HISTOG(XX5,YY5,NNOUT)
C-----USE MEV AND 1/MEV FOR OUTPUT.
      DO 140 K=1,NNOUT
      WRITE(IPLOT,330) XX5(K),YY5(K)
  140 CONTINUE
      WRITE(IPLOT,340)
  150 CONTINUE
C-----PLOTTAB INPUT PARAMETERS.
      CALL PLTINP(NMUT+1,YLOW)
      RETURN
C=======================================================================
C
C     PLOTTAB FORMAT - SPECTRA AT FIXED COSINE...LAW=7.
C
C=======================================================================
      ENTRY PLOT3A
C-----NOT IF NPLOT IS NOT SET FOR SPECTRA.
      IF(NPLOT.NE.2) RETURN
C-----ONLY LAW 7
      IF(LAW.NE.7) RETURN
C-----ONLY NEUTRON IN AND OUT.
      IF(IZAI.NE.1.OR.IZAP.NE.1) RETURN
C-----SELECT FIRST, LAST AND 1 MEV INTERVALS.
      CALL SPACER(IMPLOT)
      IF(IMPLOT.LE.0) RETURN
C-----SELECT COSINES - FIRST, LAST AND SPACED BY TABMU.
      IF(IMU.GT.1) GO TO 160
      KMUT=1
      IMPLOT=0
      GO TO 180
  160 IF(IMU.EQ.NMU) GO TO 190
      IF(XMU.LT.TABMU(KMUT)) RETURN
  170 IF(KMUT.LT.NMUT) KMUT=KMUT+1
  180 IF(XMU.GE.TABMU(KMUT).AND.KMUT.LT.NMUT) GO TO 170
C-----THIS COSINE HAS BEEN SELECTED - INCREMENT CURVE COUNT.
  190 IMPLOT=IMPLOT+1
      WRITE(IPLOT,390) XMU
C-----RENORMALIZE FROM PER UNIT COSINE TO AVERAGE OVER COSINE.
      DO 200 K=1,NP3
      SPECTA(K,1)=X3(K)/EV2MEV
      SPECTA(K,2)=Y3(K)*EV2MEV
  200 CONTINUE
C-----RENORMALIZE TO EXACTLY UNITY.
      XINTEP=XINT2(SPECTA(1,1),SPECTA(1,2),NBT3,INT3,NR3)
      CALL RENORM(SPECTA(1,2),NP3,XINTEP)
C-----DEFINE MINIMUM POSITIVE VALUE.
      CALL SIZER(SPECTA(1,2),NP3,YLOW)
      DO 210 K=1,NP3
      WRITE(IPLOT,330) SPECTA(K,1),SPECTA(K,2)
  210 CONTINUE
      WRITE(IPLOT,340)
      RETURN
C=======================================================================
C
C     PLOTTAB FORMAT - SPECTRA AVERAGED OVER COS.
C
C=======================================================================
      ENTRY PLOT3B
C-----NOT IF NPLOT IS NOT SET FOR SPECTRA.
      IF(NPLOT.NE.2) RETURN
C-----ONLY LAW 7
      IF(LAW.NE.7) RETURN
C-----ONLY NEUTRON IN AND OUT.
      IF(IZAI.NE.1.OR.IZAP.NE.1) RETURN
      IF(IMPLOT.LE.0) RETURN
C-----PLOTTAB DATA.
      EIMEV=EI/EV2MEV
      WRITE(IPLOT,350) EIMEV
      DO 220 K=1,NPT5
      SPECTA(K,1)=X5(K)/EV2MEV
      SPECTA(K,2)=Y5(K)*EV2MEV
  220 CONTINUE
C-----DEFINE MINIMUM POSITIVE VALUE.
      CALL SIZER(SPECTA(1,2),NPT5,YLOW)
      DO 230 K=1,NPT5
      WRITE(IPLOT,330) SPECTA(K,1),SPECTA(K,2)
  230 CONTINUE
      WRITE(IPLOT,340)
C-----PLOTTAB INPUT PARAMETERS.
      CALL PLTINP(IMPLOT+1,ZERO1)
      RETURN
C=======================================================================
C
C     SAVE SPECTRA FROM LEGENDRE COEFFICIENTS AT COS = -1, 0, +1.
C
C=======================================================================
      ENTRY PLOT4A
C-----NOT IF NPLOT IS NOT SET FOR LEGENDRE COEFFICIENTS.
      IF(NPLOT.NE.3) RETURN
C-----SKIP ISOTROPIC DATA.
      IF(NA.EQ.0) RETURN
C-----ONLY NEUTRON IN AND OUT.
      IF(IZAI.NE.1.OR.IZAP.NE.1) RETURN
C-----FOR LAW=1 SKIP IF ONLY 1 SECONDARY ENERGY.
      IF(LAW.EQ.1.AND.NEP.LE.1) RETURN
C-----SELECT FIRST, LAST AND 1 MEV INTERVALS.
      CALL SPACER(IMPLOT)
      IF(IMPLOT.LE.0) RETURN
      SPECTA(NPT4,1)=SUMMU(1)
      SPECTA(NPT4,2)=SUMMU(2)
      SPECTA(NPT4,3)=SUMMU(3)
C-----PLOT DATA WHEN ALL POINTS ARE DEFINED.
C-----LAW=1 = FOR EACH INCIDENT ENERGY, WHEN ALL SECONDARY ENERGY POINTS
C-----        ARE DEFINED
C-----LAW=OTHERWISE = WHEN ALL INCIDENT ENERGIES ARE DEFINED.
      IF(LAW.EQ.1.AND.NPT4.LT.NEP) RETURN
      IF(LAW.NE.1.AND.NPT4.LT.NE) RETURN
C***********************************************************************
C
C     PLOT SPECTRA FROM LEGENDRE COEFFICIENTS AT COS = -1, 0, +1.
C
C***********************************************************************
C-----IGNORE LOW INCIDENT ENERGY WITH NOT ENOUGH SECONDARY ENERGIES.
      IF(NPT4.LE.2) RETURN
C-----PLOTTAB DATA.
      YLOW=0.0d0
      DO 290 IWAY=1,4
      NNOUT=NPT4
      IF(IWAY.LT.4) GO TO 250
C-----SPECTRUM AVERAGED OVER DIRECTION.
      EIMEV=EI/EV2MEV
      WRITE(IPLOT,350) EIMEV
      DO 240 K=1,NNOUT
      XX5(K)=X4(K)/EV2MEV
      YY5(K)=Y4(K)*EV2MEV
  240 CONTINUE
      GO TO 270
C-----SPECTRUM AT FIXED COSINE.
  250 IF(IWAY.EQ.1) WRITE(IPLOT,360)
      IF(IWAY.EQ.2) WRITE(IPLOT,370)
      IF(IWAY.EQ.3) WRITE(IPLOT,380)
      DO 260 K=1,NNOUT
      XX5(K)=X4(K)/EV2MEV
      YY5(K)=SPECTA(K,IWAY)*EV2MEV
  260 CONTINUE
C-----RENORMALIZE TO EXACTLY UNITY.
  270 XINTEP=XINT2(XX5,YY5,NBT4,INT4,NR4)
      CALL RENORM(YY5,NPT4,XINTEP)
C-----DEFINE MINIMUM POSITIVE VALUE.
      CALL SIZER(YY5,NPT4,YLOW)
C-----IF NECESSARY CONVERT FROM HISTOGRAM TO LINEAR.
      IF(LAW.EQ.1.AND.LEP.EQ.1) CALL HISTOG(XX5,YY5,NNOUT)
      DO 280 K=1,NNOUT
      WRITE(IPLOT,330) XX5(K),YY5(K)
  280 CONTINUE
      WRITE(IPLOT,340)
  290 CONTINUE
C-----PLOTTAB INPUT PARAMETERS.
      CALL PLTINP(4,YLOW)
      RETURN
  300 FORMAT(A4,F8.3,' eV')
  310 FORMAT(A4,F8.3,' keV')
  320 FORMAT(A4,F8.3,' MeV')
  330 FORMAT(1PE11.4,1PE11.4)
  340 FORMAT(30X,'(BLANK LINE)')
  350 FORMAT(F8.3,' MeV Average')
  360 FORMAT(' Cos = -1.0')
  370 FORMAT(' Cos =  0.0')
  380 FORMAT(' Cos = +1.0')
  390 FORMAT(' Cos =',F7.3)
      END
      SUBROUTINE PLTINP(NCURVE,YLOW)
C=======================================================================
C
C     WRITE INPUT PARAMETERS FOR PLOTTAB.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 ZAHOLI,ZAHOLT,ZAHOLP
      CHARACTER*4 SYSHOL
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/PARMS/NK,NI,NE,IE,ND,NA,NL,LIP,LTP,NMU,NEP,LIDP,
     1 IMU,LANG,LEP,LAW,LCT,LCTIN,IPI,IPO
      COMMON/HOLLY1/ZAHOLI(10),ZAHOLT(12),ZAHOLP(10)
      COMMON/PLOTR/NPLOT,KPLOT,IPLOT
      DIMENSION SYSHOL(3),XYLIM(2,2),NXYPLT(2),IXYLOG(2)
c-----------------------------------------------------------------------
C
C     DEFINE PLOTTAB OPTIONS.
C
c-----------------------------------------------------------------------
      DATA XYLIM/  0.0D+00,  13.5D+00,  0.0D+00, 10.0D+00/
      DATA NXYPLT/ 2, 2/
      DATA HTMULT/1.2d0/
      DATA IMZERO/0/
      DATA IXYLOG/1,2/
      DATA YLOWOK/1.0d-05/
C-----DEFINE IDENTIFICATION FOR SYSTEM - LAB OR C.M.
      DATA SYSHOL/'Lab ','c.m.','????'/
C-----NOTHING TO DO IF NPLOT IS NOT SET.
      IF(NPLOT.LE.0) RETURN
C-----IDENTIFY SYSTEM.
      ISYS=LCT
      IF(ISYS.LT.1.OR.ISYS.GT.2) ISYS=3
c-----------------------------------------------------------------------
C
C     LOOP OVER UP TO 30 CURVES PER PLOT.
C
c-----------------------------------------------------------------------
      DO 30 KCURVE=1,NCURVE,30
C-----DEFINE NUMBER OF CURVES ON NEXT PLOT - UP TO 30
      KK=KCURVE+29
      IF(KK.GT.NCURVE) KK=NCURVE
      MCURVE=(KK-KCURVE)+1
c-----------------------------------------------------------------------
C
C     PLOT LAYOUT - SAME FOR ALL.
C
c-----------------------------------------------------------------------
      WRITE(KPLOT,50) XYLIM,NXYPLT,HTMULT
c-----------------------------------------------------------------------
C
C     X AND Y LABELS BASED ON TYPE OF DATA OUTPUT.
C
c-----------------------------------------------------------------------
C-----ANGULAR DISTRIBUTIONS.
      IF(NPLOT.EQ.1)
     1 WRITE(KPLOT,80)
     2 MCURVE,(IMZERO,I=1,5),MCURVE,SYSHOL(ISYS),
     3 ZAHOLT,MATH,MTH
C-----SPECTRA.
      IF(NPLOT.EQ.2)
     1 WRITE(KPLOT,90)
     2 MCURVE,(IMZERO,I=1,5),MCURVE,SYSHOL(ISYS),
     3 ZAHOLT,MATH,MTH
C-----LEGENDRE COEFFICIENTS.
      IF(NPLOT.EQ.3)
     1 WRITE(KPLOT,100)
     2 MCURVE,(IMZERO,I=1,5),MCURVE,SYSHOL(ISYS),
     3 ZAHOLT,MATH,MTH
C-----SPECTRA AT COS=-1, 0, +1, FROM LEGENDRE COEFFICIENTS.
      IF(NPLOT.EQ.4)
     1 WRITE(KPLOT,110)
     2 MCURVE,(IMZERO,I=1,5),SYSHOL(ISYS),
     3 ZAHOLT,MATH,MTH
c-----------------------------------------------------------------------
C
C     X AND Y OPTIONS.
C
c-----------------------------------------------------------------------
C-----X OPTIONS - SAME FOR ALL - EXCEPT LOG SCALING FOR EVERYTHING
C-----EXCEPT ANGULAR DISTRIBUTIONS.
      NXYLOG=2
      IF(NPLOT.EQ.1) NXYLOG=1
      WRITE(KPLOT,60) IMZERO,IXYLOG(NXYLOG),IMZERO,IMZERO
C-----Y OPTIONS - SAME FOR ALL - EITHER WITH OR WITHOUT LOWER LIMIT
      IF(YLOW.LE.0.0d0.OR.YLOW.GE.YLOWOK) GO TO 10
      WRITE(KPLOT,70) YLOWOK,IMZERO,IXYLOG(2),IMZERO,IMZERO
      GO TO 20
   10 WRITE(KPLOT,60) IMZERO,IXYLOG(2),IMZERO,IMZERO
c-----------------------------------------------------------------------
C
C     END OF PLOT LOOP.
C
c-----------------------------------------------------------------------
C-----BLANK INPUT BETWEEN PARAMETERS FOR EACH PLOT.
   20 WRITE(KPLOT,40)
   30 CONTINUE
      RETURN
   40 FORMAT('                               ')
   50 FORMAT(4F11.4,2I11,F4.1)
   60 FORMAT(22X,4I11)
   70 FORMAT(1PE11.4,11X,4I11)
   80 FORMAT(6I11,I4/' Cosine',1X,A4/
     1 ' Angular Distribution'/12A1,' MAT=',I5,' MT=',I4/
     2 ' Angular Distribution vs. EP and Averaged Over EP')
   90 FORMAT(6I11,I4/' Secondary Energy',1X,A4,' (MeV)'/
     1 ' Spectra (per MeV)'/12A1,' MAT=',I5,' MT=',I4/
     2 ' Spectra at Fixed Cosines and Averaged over Cosine')
  100 FORMAT(6I11,I4/' Legendre Order',1X,A4/
     1 ' Legendre Coefficients'/12A1,' MAT=',I5,' MT=',I4/
     2 ' Spectra at Fixed Cosines and Averaged over Cosine')
  110 FORMAT(6I11/' Secondary Energy',1X,A4,' (MeV)'/
     1 ' Spectra (per MeV)'/12A1,' MAT=',I5,' MT=',I4/
     2 ' Spectra from Legendre Coefficients')
      END
      SUBROUTINE SORTD(X,Y,NP)
C=======================================================================
C
C     SORT AN ARRAY INTO ASCENDING DOUBLE PRECISION ORDER.
C
C     ARGUMENTS
C     ---------
C     X      = ARRAY TO SORT (DIMENSION NP)
C     Y      = ARRAY TO COPY (DIMENSION NP)
C     NP     = NUMBER OF ELEMENTS TO SORT
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 SWITCH
      DIMENSION X(*),Y(*)
C-----IF LESS THAN TWO (2) ELEMENTS NO SORT IS REQUIRED.
      IF(NP.LT.2) RETURN
C-----SET INNER LOOP INDICES
      LTOP=NP+1
C-----SET UP OUTER LOOP
      DO 30 IN=2,NP
C-----INITIALIZE EXCHANGE SWITCH OFF.
      SWITCH=0
C-----SET UPPER INDEX TO INNER LOOP
      LTOP=LTOP-1
C-----SET LARGEST ELEMENT INDICATOR TO FIRST ELEMENT
      LBIG=1
C-----SET UP INNER LOOP
      DO 20 J=2,LTOP
C-----COMPARE ELEMENTS
      IF(X(LBIG).GT.X(J)) GO TO 10
C-----ELEMENTS ARE IN NUMERICAL ORDER. RESET INDEX TO LARGER ELEMENT.
      LBIG=J
      GO TO 20
C-----ELEMENTS ARE NOT IN NUMERICAL ORDER. SET INTERCHANGE SWITCH.
   10 SWITCH=1
C-----END OF INNER LOOP
   20 CONTINUE
C-----ARE ALL ELEMENTS ALREADY IN ORDER......
      IF(SWITCH.LE.0) RETURN
C-----NO. MOVE LARGEST ELEMENT TO TOP OF REMAINING TABLE
      DUMMX=X(LBIG)
      DUMMY=Y(LBIG)
      X(LBIG)=X(LTOP)
      Y(LBIG)=Y(LTOP)
      X(LTOP)=DUMMX
      Y(LTOP)=DUMMY
   30 CONTINUE
      RETURN
      END
      SUBROUTINE FILIO1
C=======================================================================
C
C     DEFINE I/O UNITS AND OPTIONALLY DEFINE FILE NAMES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*72 NAMEIN
      INTEGER*4 OUTP,OTAPE,OTAPE4,OTAPE5,OTAPE12,OTAPE14,OTAPE15,OTAPE9,
     1 OTAPE3,OTAPE13
      COMMON/NAMEX/NAMEIN
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/IOSTATUS/ISTAT1,ISTAT2
      COMMON/UNITS/OTAPE3,OTAPE4,OTAPE5,OTAPE9,OTAPE12,OTAPE13,OTAPE14,
     1 OTAPE15
      COMMON/PLOTR/NPLOT,KPLOT,IPLOT
C=======================================================================
C
C     WARNING...DO NOT CHANGE THIS SECTION. IT IS INTENDED ONLY FOR
C               USE BY THE AUTHOR TO CHECK THE CODE.
C
C     DEFINE PLOTTAB OUTPUT
C     NPLOT = 0 - NO OUTPUT
C           = 1 - ANGULAR DISTRIBUTIONS
C           = 2 - SPECTRA
C           = 3 - LEGENDRE COEFFICIENTS
C           = 4 - SPECTRA AT COS=-1,0,+1 FROM LEGENDRE COEFFICIENTS.
C
C=======================================================================
      NPLOT=0
      KPLOT=15
      IPLOT=16
C-----DEFINE ALL UNIT NUMBERS.
      INP=2
      OUTP=3
      ITAPE=10
      OTAPE=0
      OTAPE4=11
      OTAPE5=12
      OTAPE15=14
      OTAPE12=17
      OTAPE14=18
      OTAPE9 =19
      OTAPE3 =20
C-----DEFINE ALL FILE NAMES.
      OPEN(OUTP,FILE='SIXPAK.LST',STATUS='UNKNOWN')
      OPEN(OTAPE4,FILE='ENDFB.MF4',STATUS='UNKNOWN')
      OPEN(OTAPE5,FILE='ENDFB.MF5',STATUS='UNKNOWN')
      OPEN(OTAPE15,FILE='ENDFB.M15',STATUS='UNKNOWN')
      OPEN(OTAPE12,FILE='ENDFB.M12',STATUS='UNKNOWN')
      OPEN(OTAPE14,FILE='ENDFB.M14',STATUS='UNKNOWN')
      OPEN(OTAPE9 ,FILE='ENDFB.MF9',STATUS='UNKNOWN')
c-----Aded MF=3 Output for MT=5 Charged Particles
      OPEN(OTAPE3 ,FILE='ENDFB.MF3',STATUS='UNKNOWN')
      IF(NPLOT.GT.0)
     1 OPEN(KPLOT,FILE='PLOTTAB.INP',STATUS='UNKNOWN')
      IF(NPLOT.GT.0)
     1 OPEN(IPLOT,FILE='PLOTTAB.CUR',STATUS='UNKNOWN')
      OPEN(INP,FILE='SIXPAK.INP',STATUS='OLD',ERR=10)
      ISTAT1 = 0
      RETURN
   10 ISTAT1 = 1
      RETURN
      ENTRY FILIO2
C=======================================================================
C
C     DEFINE ENDF/B INPUT DATA FILENAME.
C
C=======================================================================
      OPEN(ITAPE,FILE=NAMEIN,STATUS='OLD',ERR=20)
      ISTAT2 = 0
      RETURN
   20 ISTAT2 = 1
      RETURN
      END
