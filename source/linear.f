C This file is part of PREPRO.
C
C    Author: Dermott (Red) Cullen
C Copyright: (C) International Atomic Energy Agency
C
C PREPRO is free software; you can redistribute it and/or modify it
C under the terms of the MIT License; see LICENSE file for more details.


C=======================================================================
C
C     PROGRAM LINEAR
C     ==============
C     VERSION 74-1 (MAY 1974)
C     VERSION 75-1 (APRIL 1975)
C     VERSION 76-2 (OCTOBER 1976)
C     VERSION 77-1 (JANUARY 1977)
C     VERSION 78-1 (JULY 1978)
C     VERSION 79-1 (JULY 1979) CDC-7600 AND CRAY-1 VERSION.
C     VERSION 80-1 (MAY 1980) IBM, CDC AND CRAY VERSION.
C     VERSION 80-2 (DECEMBER 1980)
C     VERSION 81-1 (MARCH 1981)
C     VERSION 82-1 (JANUARY 1982) IMPROVED COMPUTER COMPATIBILITY.
C     VERSION 83-1 (JANUARY 1983) *MAJOR RE-DESIGN.
C                                 *PAGE SIZE INCREASED - 1002 TO 3006.
C                                 *ELIMINATED COMPUTER DEPENDENT CODING.
C                                 *NEW, MORE COMPATIBLE I/O UNIT NUMBER.
C                                 *ADDED OPTION TO KEEP ALL ORIGINAL
C                                  ENERGY POINTS FROM EVALUATION.
C                                 *ADDED STANDARD ALLOWABLE ERROR OPTION
C                                  (CURRENTLY 0.1 PER-CENT).
C     VERSION 83-2 (OCTOBER 1983) IMPROVED BASED ON USER COMMENTS.
C     VERSION 84-1 (APRIL 1984)   IMPROVED BASED ON USER COMMENTS.
C     VERSION 84-2 (JUNE 1984)   *UPDATED FOR ENDF/B-6 FORMATS.
C                                *SPECIAL I/O ROUTINES TO GUARANTEE
C                                 ACCURACY OF ENERGY.
C                                *DOUBLE PRECISION TREATMENT OF ENERGY
C                                 (REQUIRED FOR NARROW RESONANCES).
C     VERSION 85-1 (AUGUST 1985) *FORTRAN-77/H VERSION
C     VERSION 86-1 (JANUARY 1986)*ENDF/B-6 FORMAT
C     VERSION 87-1 (JANUARY 1987)*DOUBLE PRECISION TREATMENT OF CROSS
C                                 SECTION
C     VERSION 88-1 (JULY 1988)   *OPTION...INTERNALLY DEFINE ALL I/O
C                                 FILE NAMES (SEE, SUBROUTINE FILEIO
C                                 FOR DETAILS).
C                                *IMPROVED BASED ON USER COMMENTS.
C     VERSION 89-1 (JANUARY 1989)*PSYCHOANALYZED BY PROGRAM FREUD TO
C                                 INSURE PROGRAM WILL NOT DO ANYTHING
C                                 CRAZY.
C                                *UPDATED TO USE NEW PROGRAM CONVERT
C                                 KEYWORDS.
C                                *ADDED LIVERMORE CIVIC COMPILER
C                                 CONVENTIONS.
C     VERSION 90-1 (JUNE 1990)   *EXTENDED TO LINEARIZE PHOTON
C                                 INTERACTION DATA, MF=23 AND 27
C                                *ADDED FORTRAN SAVE OPTION
C                                *UPDATED BASED ON USER COMMENTS.
C                                *NEW MORE CONSISTENT ENERGY OUTPUT
C                                 ROUTINE.
C                                *WARNING...INPUT PARAMETER FORMAT
C                                 HAS BEEN CHANGED...SEE DESCRIPTION
C                                 BELOW.
C     VERSION 91-1 (JULY 1991)   *ADDED INTERPOLATION LAW 6 - ONLY USED
C                                 FOR CHARGED PARTICLE CROSS SECTIONS
C                                 FOR COULOMB PENETRABILITIES.
C     VERSION 92-1 (JANUARY 1992)*ADDED NU-BAR (TOTAL, DELAYED, PROMPT)
C                                 POLYNOMIAL OR TABULATED ALL CONVERTED
C                                 TO LINEARLY INTERPOLABLE
C                                *INCREASED PAGE SIZE FROM 3006 TO 5010
C                                 POINTS.
C                                *ALL ENERGIES INTERNALLY ROUNDED PRIOR
C                                 TO CALCULATIONS.
C                                *COMPLETELY CONSISTENT I/O AND ROUNDING
C                                 ROUTINES - TO MINIMIZE COMPUTER
C                                 DEPENDENCE.
C     VERSION 92-2 (JULY 1992)   *CORRECTED CONVERSION OF NU-BAR FROM
C                                 POLYNOMIAL TO TABULATED - COPY
C                                 SPONTANEOUS NU-BAR (BY DEFINITION
C                                 THE SPONTANEOUS NU-BAR IS NOT AN
C                                 ENERGY DEPENDENT QUANTITY).
C     VERSION 93-1 (MARCH 1993)  *UPDATED FOR USE WITH LAHEY COMPILER
C                                 ON IBM-PCS.
C                                *INCREASED PAGE SIZE FROM 5010 TO
C                                 30000 POINTS
C     VERSION 94-1 (JANUARY 1994)*VARIABLE ENDF/B DATA FILENAMES
C                                 TO ALLOW ACCESS TO FILE STRUCTURES
C                                 (WARNING - INPUT PARAMETER FORMAT
C                                 HAS BEEN CHANGED)
C                                *CLOSE ALL FILES BEFORE TERMINATING
C                                 (SEE, SUBROUTINE ENDIT)
C     VERSION 96-1 (JANUARY 1996) *COMPLETE RE-WRITE
C                                 *IMPROVED COMPUTER INDEPENDENCE
C                                 *ALL DOUBLE PRECISION
C                                 *ON SCREEN OUTPUT
C                                 *UNIFORM TREATMENT OF ENDF/B I/O
C                                 *IMPROVED OUTPUT PRECISION
C                                 *DEFINED SCRATCH FILE NAMES
C                                 *ALWAYS INCLUDE THERMAL VALUE
C                                 *INCREASED PAGE SIZE FROM 30000 TO
C                                  60000 POINTS
C     VERSION 99-1 (MARCH 1999)   *CORRECTED CHARACTER TO FLOATING
C                                  POINT READ FOR MORE DIGITS
C                                 *UPDATED TEST FOR ENDF/B FORMAT
C                                  VERSION BASED ON RECENT FORMAT CHANGE
C                                 *GENERAL IMPROVEMENTS BASED ON
C                                  USER FEEDBACK
C     VERSION 99-2 (JUNE 1999)    *ASSUME ENDF/B-VI, NOT V, IF MISSING
C                                  MF=1, MT-451.
C     VERS. 2000-1 (FEBRUARY 2000)*ADDED MF = 9 AND 10 LINEARIZATION
C                                 *GENERAL IMPROVEMENTS BASED ON
C                                  USER FEEDBACK
C     VERS. 2002-1 (MAY 2002)     *OPTIONAL INPUT PARAMETERS
C     VERS. 2004-1 (JAN. 2004)    *GENERAL UPDATE BASED ON USER FEEDBACK
C     VERS. 2005-1 (JAN. 2005)    *ALWAYS KEEP ORIGINAL TABULATED
C                                  NU-BAR POINTS.
C     VERS. 2006-1 (FEB. 2006)    *CORRECTED INT=6 NEAR THRESHOLD
C                                 *NO SUBDIVIDE BELOW MINIMUM XCLOW
C     VERS. 2007-1 (JAN. 2007)    *CHECKED AGAINST ALL ENDF/B-VII.
C                                 *INCREASED PAGE SIZE FROM 60,000 TO
C                                  600,000 POINTS
C     VERS. 2007-2 (DEC. 2007)    *72 CHARACTER FILE NAMES.
C     VERS. 2010-1 (Apr. 2010)    *Skipped leading cross section = 0
C                                  up to effective start, unless keeping
C                                  ALL original energy points.
C                                 *Replaced ETHRES by ESTART - it is
C                                  not a threshold - just a minimum
C                                  energy - if a section starts above
C                                  this energy with a positive cross
C                                  section, an additional point will
C                                  inserted with cross section = 0.
C     VERS. 2012-1 (Aug. 2012)    *Minor Updates based on User Feedback.
C                                 *Added CODENAME
C                                 *32 and 64 bit Compatible
C                                 *Added ERROR stops.
C     VERS. 2012-2 (Nov. 2012)    *Never thin nu-bar.
C     VERS. 2013-1 (Nov. 2013)    *Extended OUT9.
C     VERS. 2015-1 (Jan. 2015)    *Allow Imaginary Anomolous Scattering
C                                  Factor to be Negative (MF/MT=27/506).
C                                 *Replaced ALL 3 way IF Statements.
C     VERS. 2016-1 (June 2016)    *Cosmetic changes based on FREUD
C                                  psychoanalysis.
C     VERS. 2017-1 (May  2017)    *Updated based on user feedback.
C                                 *Inceased page size to 3,000,000.
C                                 *All floating input parameters changed
C                                  to character input + IN9 conversion.
C     VERS. 2018-1 (Dec. 2018)    *Updated based on user feedback.
C                                 *Added on-line output for ALL ENDERROR
C     VERS. 2019-1 (June 2019)    *Additional Interpolation Law Tests
C                                 *Checked Maximum Tabulated Energy to
C                                  insure it is the same for all MTs -
C                                  if not, print WARNING messages.
C                                 *Corrected END Histogram linearized -
C                                  Previously assumed Y = 0 and deleted
C                                  now whatever the value it is included
C     VERS. 2020-1 (Dec. 2020)    *Major Re-write of Convergence
C                                 *Replaced INCORE9 by INCORE10.
C                                 *Added Target Isomer Flag
C                                 *Keep iterating toward MAX & MIN
C     VERS. 2021-1 (Mar. 2021)    *Complete re-write of convergence.
C                                 *Optionlly add MF/MT=1/451 comments
C                                 *Updated from FORTRAN 2018
C                                 *Minimum Cross Section is no longer
C                                  an input option = set to 1.0d-30.
C
C     OWNED, MAINTAINED AND DISTRIBUTED BY
C     ------------------------------------
C     THE NUCLEAR DATA SECTION
C     INTERNATIONAL ATOMIC ENERGY AGENCY
C     P.O. BOX 100
C     A-1400, VIENNA, AUSTRIA
C     EUROPE
C
C     ORIGINALLY WRITTEN BY
C     ------------------------------------
C     Dermott E. Cullen
C
C     PRESENT CONTACT INFORMATION
C     ---------------------------
C     Dermott E. Cullen
C     1466 Hudson Way
C     Livermore, CA 94550
C     U.S.A.
C     Telephone  925-443-1911
C     E. Mail    RedCullen1@Comcast.net
C     Website    RedCullen1.net/HOMEPAGE.NEW
C
C     AUTHORS MESSAGE
C     ---------------
C     THE REPORT DESCRIBED ABOVE IS THE LATEST PUBLISHED DOCUMENTATION
C     FOR THIS PROGRAM. HOWEVER, THE COMMENTS BELOW SHOULD BE CONSIDERED
C     THE LATEST DOCUMENTATION INCLUDING ALL RECENT IMPROVEMENTS. PLEASE
C     READ ALL OF THESE COMMENTS BEFORE IMPLEMENTATION.
C
C     AT THE PRESENT TIME WE ARE ATTEMPTING TO DEVELOP A SET OF COMPUTER
C     INDEPENDENT PROGRAMS THAT CAN EASILY BE IMPLEMENTED ON ANY ONE
C     OF A WIDE VARIETY OF COMPUTERS. IN ORDER TO ASSIST IN THIS PROJECT
C     IT WOULD BE APPECIATED IF YOU WOULD NOTIFY THE AUTHOR OF ANY
C     COMPILER DIAGNOSTICS, OPERATING PROBLEMS OR SUGGESTIONS ON HOW TO
C     IMPROVE THIS PROGRAM. HOPEFULLY, IN THIS WAY FUTURE VERSIONS OF
C     THIS PROGRAM WILL BE COMPLETELY COMPATIBLE FOR USE ON YOUR
C     COMPUTER.
C
C     PURPOSE
C     -------
C     THIS PROGRAM IS DESIGNED TO CONVERT ENDF/B FILE 3, 23 AND 27 DATA
C     TO LINEAR-LINEAR INTERPOLABLE FORM. ANY SECTION THAT IS ALREADY
C     LINEAR-LINEAR INTERPOLABLE WILL BE THINNED.
C
C     IN THE FOLLOWING DISCUSSION FOR SIMPLICITY THE ENDF/B TERMINOLOGY
C     ---ENDF/B TAPE---WILL BE USED. IN FACT THE ACTUAL MEDIUM MAY BE
C     TAPE, CARDS, DISK OR ANY OTHER MEDIUM.
C
C     ENDF/B FORMAT
C     -------------
C     THIS PROGRAM ONLY USES THE ENDF/B BCD OR CARD IMAGE FORMAT (AS
C     OPPOSED TO THE BINARY FORMAT) AND CAN HANDLE DATA IN ANY VERSION
C     OF THE ENDF/B FORMAT (I.E., ENDF/B-1, 2, 3, 4, 5, 6 FORMAT).
C
C     IT IS ASSUMED THAT THE DATA IS CORRECTLY CODED IN THE ENDF/B
C     FORMAT AND NO ERROR CHECKING IS PERFORMED. IN PARTICULAR IT IS
C     ASSUMED THAT THE MAT, MF AND MT ON EACH LINE IS CORRECT. SEQUENCE
C     NUMBERS (COLUMNS 76-80) ARE IGNORED ON INPUT, BUT WILL BE
C     CORRECTLY OUTPUT ON ALL LINES. THE FORMAT OF SECTION MF=1, MT=451
C     AND ALL SECTIONS OF MF=3 MUST BE CORRECT. THE PROGRAM COPIES ALL
C     OTHER SECTION OF DATA AS HOLLERITH AND AS SUCH IS INSENSITIVE TO
C     THE CORRECTNESS OR INCORRECTNESS OF ALL OTHER SECTIONS.
C
C     OUTPUT FORMAT
C     -------------
C     IN THIS VERSION OF LINEAR ALL ENERGIES WILL BE OUTPUT IN
C     F (INSTEAD OF E) FORMAT IN ORDER TO ALLOW ENERGIES TO BE WRITTEN
C     WITH UP TO 9 DIGITS OF ACCURACY. IN PREVIOUS VERSIONS THIS WAS AN
C     OUTPUT OPTION. HOWEVER USE OF THIS OPTION TO COMPARE THE RESULTS
C     OF ENERGIES WRITTEN IN THE NORMAL ENDF/B CONVENTION OF 6 DIGITS
C     TO THE 9 DIGIT OUTPUT FROM THIS PROGRAM DEMONSTRATED THAT FAILURE
C     TO USE THE 9 DIGIT OUTPUT CAN LEAD TO LARGE ERRORS IN THE DATA
C     DUE TO TRUNCATION OF ENERGIES TO 6 DIGITS DURING OUTPUT.
C
C     CONTENTS OF OUTPUT
C     ------------------
C     ENTIRE EVALUATIONS ARE OUTPUT, NOT JUST THE LINEARIZED DATA
C     CROSS SECTIONS, E.G. ANGULAR AND ENERGY DISTRIBUTIONS ARE ALSO
C     INCLUDED.
C
C     DOCUMENTATION
C     -------------
C     THE FACT THAT THIS PROGRAM HAS OPERATED ON THE DATA IS DOCUMENTED
C     BY THE ADDITION OF 3 COMMENT LINES AT THE END OF EACH HOLLERITH
C     SECTION IN THE FORM
C
C     ***************** PROGRAM LINEAR (2021-1) ****************
C     FOR ALL DATA GREATER THAN 1.00000-30 IN ABSOLUTE VALUE
C     DATA LINEARIZED TO WITHIN AN ACCURACY OF  0.1  PER-CENT
C
C     THE ORDER OF SIMILAR COMMENTS (FROM RECENT, SIGMA1 AND GROUPIE)
C     REPRESENTS A COMPLETE HISTORY OF ALL OPERATIONS PERFORMED ON
C     THE DATA BY THESE PROGRAMS.
C
C     THESE COMMENT LINES ARE ONLY ADDED TO EXISTING HOLLERITH SECTIONS,
C     I.E., THIS PROGRAM WILL NOT CREATE A HOLLERITH SECTION. THE FORMAT
C     OF THE HOLLERITH SECTION IN ENDF/B-V DIFFERS FROM THE THAT OF
C     EARLIER VERSIONS OF ENDF/B. BY READING AN EXISTING MF=1, MT=451
C     IT IS POSSIBLE FOR THIS PROGRAM TO DETERMINE WHICH VERSION OF
C     THE ENDF/B FORMAT THE DATA IS IN. WITHOUT HAVING A SECTION OF
C     MF=1, MT=451 PRESENT IT IS IMPOSSIBLE FOR THIS PROGRAM TO
C     DETERMINE WHICH VERSION OF THE ENDF/B FORMAT THE DATA IS IN, AND
C     AS SUCH IT IS IMPOSSIBLE FOR THE PROGRAM TO DETERMINE WHAT FORMAT
C     SHOULD BE USED TO CREATE A HOLLERITH SECTION.
C
C     REACTION INDEX
C     --------------
C     THIS PROGRAM DOES NOT USE THE REACTION INDEX WHICH IS GIVEN IN
C     SECTION MF=1, MT=451 OF EACH EVALUATION.
C
C     THIS PROGRAM DOES NOT UPDATE THE REACTION INDEX IN MF=1, MT=451.
C     THIS CONVENTION HAS BEEN ADOPTED BECAUSE MOST USERS DO NOT
C     REQUIRE A CORRECT REACTION INDEX FOR THEIR APPLICATIONS AND IT WAS
C     NOT CONSIDERED WORTHWHILE TO INCLUDE THE OVERHEAD OF CONSTRUCTING
C     A CORRECT REACTION INDEX IN THIS PROGRAM. HOWEVER, IF YOU REQUIRE
C     A REACTION INDEX FOR YOUR APPLICATIONS, AFTER RUNNING THIS PROGRAM
C     YOU MAY USE PROGRAM DICTIN TO CREATE A CORRECT REACTION INDEX.
C
C     SECTION SIZE
C     ------------
C     SINCE THIS PROGRAM USES A LOGICAL PAGING SYSTEM THERE IS NO LIMIT
C     TO THE NUMBER OF POINTS IN ANY SECTION, E.G., THE TOTAL CROSS
C     SECTION MAY BE REPRESENTED BY 200,000 DATA POINTS.
C
C     FOR ANY LINEARIZED SECTION THAT CONTAINS 60000 OR FEWER POINTS
C     THE ENTIRE OPERATION WILL BE PERFORMED IN CORE AND THE LINEARIZED
C     DATA WILL BE OUTPUT DIRECTLY TO THE ENDF/B FORMAT. FOR ANY SECTION
C     THAT CONTAINS MORE POINTS THE DATA WILL BE LINEARIZED A PAGE AT A
C     TIME (1 PAGE = 60000 POINTS) AND OUTPUT TO SCRATCH. AFTER THE
C     ENTIRE SECTION HAS BEEN LINEARIZED THE DATA WILL BE READ BACK FROM
C     SCRATCH AND OUTPUT TO THE ENDF/B FORMAT.
C
C     SELECTION OF DATA
C     -----------------
C     THE PROGRAM SELECTS DATA TO BE LINEARIZED BASED EITHER ON EITHER
C     MAT (ENDF/B MAT NO.) OR ZA AS WELL AS MF AND MT NUMBERS. THIS
C     PROGRAM ALLOWS UP TO 100 MAT/MF/MT OR ZA/MF/MT RANGES TO BE
C     SPECIFIED BY INPUT PARAMETERS. THE PROGRAM WILL ASSUME THAT THE
C     ENDF/B TAPE IS IN MAT ORDER, REGARDLESS OF THE CRITERIA USED
C     TO RETRIEVE MATERIALS. IF RETRIEVAL IS BY MAT RANGE THE PROGRAM
C     WILL TERMINATE WHEN A MAT IS FOUND THAT IS ABOVE ALL REQUESTED
C     MAT RANGES. IF RETRIEVAL IS BY ZA RANGE THE PROGRAM WILL SEARCH
C     THE ENTIRE ENDF/B TAPE.
C
C     PROGRAM OPERATION
C     -----------------
C     EACH SECTION OF DATA IS CONSIDERED SEPARATELY. EACH SECTION OF
C     ENDF/B DATA TO LINEARIZE IS REPRESENTED BY A TABLE OF ENERGY
C     VS. CROSS SECTION AND ANY ONE OF FIVE ALLOWABLE INTERPOLATION LAWS
C     BETWEEN ANY TWO TABULATED POINTS. THIS PROGRAM WILL REPLACE EACH
C     SECTION OF DATA CROSS SECTIONS BY A NEW TABLE OF ENERGY VS.
C     CROSS SECTION IN WHICH THE INTERPOLATION LAW IS ALWAYS LINEAR IN
C     ENERGY AND CROSS SECTION BETWEEN ANY TWO TABULATED POINTS.
C
C     DATA IS READ AND LINEARIZED A PAGE AT A TIME (ONE PAGE CONTAINS
C     60000 DATA POINTS). IF THE FINAL LINEARIZED SECTION CONTAINS TWO
C     PAGES OR LESS, DATA POINTS IT WILL BE ENTIRELY CORE RESIDENT
C     AFTER IT HAS BEEN LINEARIZED AND WILL BE WRITTEN DIRECTLY FROM
C     CORE TO THE OUTPUT TAPE. IF THE LINEARIZED SECTION IS LARGER THAN
C     TWO PAGES, AFTER EACH PAGE IS LINEARIZED IT WILL BE WRITTEN TO
C     SCRATCH. AFTER THE ENTIRE SECTION HAS BEEN LINEARIZED IT WILL
C     BE READ BACK FROM SCRATCH, TWO PAGES AT A TIME, AND WRITTEN TO
C     THE OUTPUT TAPE.
C
C     KEEP EVALUATED DATA POINTS
C     --------------------------
C     SOMETIMES IT IS CONVENIENT TO KEEP ALL ENERGY POINTS WHICH WERE
C     PRESENT IN THE ORIGINAL EVALUATION AND TO MERELY SUPPLEMENT THESE
C     POINTS WITH ADDITIONAL ENERGY POINTS IN ORDER TO LINEARIZE THE
C     CROSS SECTIONS. FOR EXAMPLE, IT IS OFTEN CONVENIENT TO KEEP THE
C     THERMAL VALUE (AT 0.0253 EV) OR THE VALUE AT 14.1 MEV.
C
C     THE CURRENT VERSION OF THIS PROGRAM WILL ALLOW THE USER TO KEEP
C     ALL ORIGINAL EVALUATED DATA POINTS BY SPECIFYING 1 IN COLUMNS
C     34-44 OF THE FIRST INPUT LINE. THIS WILL TURN OFF THE BACKWARD
C     THINNING (SEE UCRL-50400, VOL. 17, PART A FOR EXPLANATION) AND
C     RESULT IN ALL ORIGINAL ENERGY POINTS BEING KEPT. CAUTION SHOULD
C     BE EXERCISED IN USING THIS OPTION SINCE IT CAN RESULT IN A
C     CONSIDERABLE INCREASE IN THE NUMBER OF DATA POINTS OUTPUT BY
C     THIS CODE.
C
C     FOR ALL USERS WHO ARE NOT INTERESTED IN THIS OPTIONS NO CHANGES
C     ARE REQUIRED IN THE INPUT TO THIS PROGRAM, I. E. IF COLUMNS
C     34-44 ARE BLANK (AS FOR ALL PREVIOUS VERSIONS OF THIS CODE) THE
C     PROGRAM WILL OPERATE EXACTLY AS IT DID BEFORE.
C
C     ALLOWABLE ERROR
C     ---------------
C     ALLOWABLE ERROR MUST ALWAYS BE SPECIFIED IN THE INPUT TO THIS
C     PROGRAM AS A FRACTION, NOT A PER-CENT. FOR EXAMPLE, INPUT THE
C     ALLOWABLE FRACTIONAL ERROR 0.001 IN ORDER TO OBTAIN DATA THAT IS
C     ACCURATE TO WITHIN 0.1 PER-CENT.
C
C     THE CONVERSION OF THE DATA FROM THE GENERAL INTERPOLATION FORM TO
C     LINARLY INTERPOLABLE FORM CANNOT BE PERFORMED EXACTLY. HOWEVER, IT
C     CAN BE PERFORMED TO VIRTUALLY ANY REQUIRED ACCURACY AND MOST
C     IMPORTANTLY CAN BE PERFORMED TO A TOLERANCE THAT IS SMALL COMPARED
C     TO THE UNCERTAINTY IN THE CROSS SECTIONS THEMSELVES. AS SUCH THE
C     CONVERSION OF CROSS SECTIONS TO LINEARLY INTERPOLABLE FORM CAN BE
C     PERFORMED WITH ESSENTIALLY NO LOSE OF INFORMATION.
C
C     THE ALLOWABLE ERROR MAY BE ENERGY INDEPENDENT (CONSTANT) OR ENERGY
C     DEPENDENT. THE ALLOWABLE ERROR IS DESCRIBED BY A TABULATED
C     FUNCTION OF UP TO 20 (ENERGY,ERROR) PAIRS AND LINEAR INTERPOLATION
C     BETWEEN TABULATED POINTS. IF ONLY ONE TABULATED POINT IS GIVEN THE
C     ERROR WILL BE CONSIDERED CONSTANT OVER THE ENTIRE ENERGY RANGE.
C     WITH THIS ENERGY DEPENDENT ERROR ONE MAY OPTIMIZE THE OUTPUT FOR
C     ANY GIVEN APPLICATION BY USING A SMALL ERROR IN THE ENERGY RANGE
C     OF INTEREST AND A LESS STRINGENT ERROR IN OTHER ENERGY RANGES.
C
C     DEFAULT ALLOWABLE ERROR
C     -----------------------
C     IN ORDER TO INSURE CONVERGENCE OF THE LINEARIZING ALGORITHM THE
C     ALLOWABLE ERROR MUST BE POSITIVE. IF THE USER INPUTS AN ERROR
C     THAT IS NOT POSITIVE IT WILL AUTOMATICALLY BE SET TO THE DEFAULT
C     VALUE (CURRENTLY 0.001, CORRESPONDING TO 0.1 PER-CENT) AND
C     INDICATED AS SUCH IN THE OUTPUT LISTING.
C
C     COULOMB PENETRABILITY (INTERPOLATION LAW = 6)
C     --------------------------------------------
C     INTRODUCED FOR ENDF/B-VI. THIS IS DEFINED AS,
C
C     SIG(E) = C1*EXP(-C2/SQRT(E - T))
C
C     THIS PROGRAM ONLY CONSIDERS EXOTHERMIC REACTIONS - T = 0
C
C     SIG(E) = C1*EXP(-C2/SQRT(E))
C
C     WARNING...THIS INTERPOLATION LAW SHOULD ONLY BE USED FOR REACTIONS
C               WHICH HAVE A POSITIVE Q-VALUE (EXOTHERMIC REACTIONS),
C               SINCE HERE WE ONLY CONSIDER T = 0.0 IN THE FORMALISM.
C               IN ALL OTHER CASES A WARNING MESSAGE WILL BE PRINTED.
C
C     INPUT FILES
C     -----------
C     UNIT  DESCRIPTION
C     ----  -----------
C        2  INPUT LINES (BCD - 80 CHARACTERS/RECORD)
C       10  ORIGINAL ENDF/B DATA (BCD - 80 CHARACTERS/RECORD)
C
C     OUTPUT FILES
C     ------------
C     UNIT  DESCRIPTION
C     ----  -----------
C        3  OUTPUT REPORT (BCD - 120 CHARACTERS/RECORD)
C       11  FINAL ENDF/B DATA (BCD - 80 CHARACTERS/RECORD)
C
C     SCRATCH FILES
C     -------------
C     UNIT  DESCRIPTION
C     ----  -----------
C       12  SCRATCH FILE (BINARY - 180000 WORDS/RECORD
C
C     OPTIONAL STANDARD FILE NAMES (SEE SUBROUTINE FILEIO)
C     ----------------------------------------------------
C     UNIT  FILE NAME
C     ----  ----------
C       2   LINEAR.INP
C       3   LINEAR.LST
C      10   ENDFB.IN
C      11   ENDFB.OUT
C      12   (SCRATCH)
C
C
C     INPUT PARAMETERS
C     ----------------
C     FOR VERSIONS EARLIER THAN 90-1 THIS PROGRAM ONLY ALLOWED THE USER
C     TO SPECIFY BY INPUT PARAMETERS WHICH MATERIALS (MAT) TO PROCESS.
C     FOR EACH REQUESTED MATERIAL NEUTRON INTERACTION CROSS SECTIONS
C     (MF=3) WOULD BE LINEARIZED AND THE REMAINDER OF THE MATERIAL
C     WOULD BE COPIED.
C
C     FOR VERSIONS 90-1 AND LATER THIS PROGRAM WILL ALLOW THE USER TO
C     TO SPECIFY BY INPUT PARAMETERS EXACTLY WHAT SECTIONS OF DATA
C     TO PROCESS. FOR EACH SECTION OF DATA, SPECIFIED BY MAT, MF, MT
C     RANGES, SECTIONS OF MF=3, 23 AND 27 WILL BE LINEARIZED AND ALL
C     OTHER REQUESTED SECTIONS WILL BE COPIED. ALL SECTIONS WHICH ARE
C     NOT EXPLICITLY REQUESTED WILL BE SKIPPED AND WILL NOT APPEAR ON
C     ENDF/B FILE OUTPUT BY THIS PROGRAM.
C
C     WITH THIS NEW PROCEDURE YOU CAN MINIMIZE THE SIZE OF THE ENDF/B
C     FILE OUTPUT BY THIS PROGRAM, E.G., IF YOU ONLY WANT NEUTRON
C     CROSS SECTIONS FOR SUBSEQUENT PROCESSING YOU NEED ONLY REQUEST
C     ONLY MF=3 DATA.
C
C     HOWEVER, YOU MUST UNDERSTAND THAT ONLY THOSE SECTIONS WHICH YOU
C     EXPLICITLY REQUEST WILL APPEAR ON THE ENDF/B FILE OUTPUT BY
C     THIS PROGRAM. FOR EXAMPLE, IF YOU WISH TO DOCUMENT EXACTLY
C     HOW YOU LINEARIZED THE DATA BY INCLUDING COMMENTS IN MF=1, MT=451
C     THEN YOU MUST EXPLICITLY REQUEST THAT MF=1, MT=451 BE PROCESSED
C     FOR EACH MATERIAL THAT YOU REQUEST. SIMILAR IF YOU WANT THE
C     ENTIRE EVALUATION YOU MUST REQUEST ALL MF AND MT TO BE OUTPUT.
C
C     LINE  COLS.  DESCRIPTION
C     ----  -----  -----------
C        1   1-11  SELECTION CRITERIA (0=MAT, 1=ZA)
C           12-22  MONITOR MODE SELECTOR
C                  = 0 - NORMAL OPERATION
C                  = 1 - MONITOR PROGRESS OF LINEARIZING OF THE DATA.
C                        EACH TIME A PAGE OF DATA POINTS IS WRITTEN TO
C                        THE SCRATCH FILE PRINT OUT THE TOTAL NUMBER OF
C                        POINTS ON SCRATCH AND THE LOWER AND UPPER
C                        ENERGY LIMITS OF THE PAGE (THIS OPTION MAY BE
C                        USED IN ORDER TO MONITOR THE EXECUTION SPEED
C                        OF LONG RUNNING JOBS).
C           23-33  MINIMUM CROSS SECTION OF INTEREST (BARNS).
C                  (IF 0.0 OR LESS IS INPUT THE PROGRAM WILL
C                  USE 1.0E-10). ENERGY INTERVALS WILL NOT BE
C                  SUB-DIVIDED IF THE ABSOLUTE VALUE OF THE CROSS
C                  SECTION WITHIN THE INTERVAL IS LESS THAN THIS VALUE.
C                  AN EXCEPTION TO THIS RULE IS NEAR THRESHOLDS ENERGY
C                  INTERVALS WILL BE SUB-DIVIDED UNTIL CONVERGENCE
C                  REGARDLESS OF THE MAGNITUDE OF THE CROSS SECTION.
C           34-44  KEEP ORIGINAL EVALUATED DATA POINTS.
C                  = 0 - NO.
C                  = 1 - YES - ADDITIONAL POINTS MAY BE ADDED IN ORDER
C                              TO LINEARIZE DATA, BUT ALL ORIGINAL
C                              DATA POINTS WILL BE INCLUDED IN THE
C                              RESULTS.
C        2   1-72  ENDF/B INPUT DATA FILENAME
C                  (STANDARD OPTION = ENDFB.IN)
C        3   1-72  ENDF/B OUTPUT DATA FILENAME
C                  (STANDARD OPTION = ENDFB.OUT)
C      4-N   1- 6  LOWER MAT OR ZA LIMIT
C            7- 8  LOWER MF LIMIT
C            9-11  LOWER MT LIMIT
C           12-17  UPPER MAT OR ZA LIMIT
C           18-19  UPPER MF LIMIT
C           20-22  UPPER MT LIMIT
C                  UP TO 100 RANGES MAY BE SPECIFIED, ONLY ONE RANGE
C                  PER LINE. THE LIST OF RANGES IS TERMINATED BY A
C                  BLANK LINE. IF THE UPPER MAT LIMIT OF ANY REQUEST
C                  IS LESS THAN THE LOW LIMIT IT WILL BE SET EQUAL TO
C                  THE LOWER LIMIT. IF THE UPPER LIMIT IS STILL ZERO
C                  IT WILL BE SET EQUAL TO 999999. IF THE UPPER MF OR
C                  MT LIMIT IS ZERO IT WILL BE SET TO 99 OR 999
C                  RESPECTIVELY.
C      VARY  1-11  ENERGY FOR ERROR LAW
C           12-22  ALLOWABLE FRACTIONAL ERROR FOR ERROR LAW.
C                  THE ACCEPTABLE LINEARIZING ERROR MAY BE SPECIFIED TO
C                  BE EITHER ENERGY INDEPENDENT (DEFINED BY A SINGLE
C                  ERROR), OR ENERGY DEPENDENT (DEFINED BY UP TO 20
C                  ENERGY, ERROR PAIRS). FOR THE ENERGY DEPENDENT CASE
C                  LINEAR INTERPOLATION WILL BE USED TO DEFINE THE ERROR
C                  AT ENERGIES BETWEEN THOSE AT WHICH IT IS TABULATED.
C                  IN ALL CASES THE ERROR LAW IS TERMINATED BY A BLANK
C                  LINE. IF ONLY ONE ENERGY, ERROR PAIR IS GIVEN THE
C                  THE LAW WILL BE CONSIDERED TO BE ENERGY INDEPENDENT.
C                  IF MORE THAN ONE PAIR IS GIVEN IT WILL BE CONSIDERED
C                  TO BE ENERGY DEPENDENT (NOTE, ENERGY INDEPENDENT
C                  FORM WILL RUN FASTER THAN THE EQUIVALENT ENERGY
C                  DEPENDENT FORM). FOR AN ENERGY DEPENDENT ERROR LAW
C                  ALL ENERGIES MUST BE ASCENDING ENERGY ORDER. FOR
C                  CONVERGENCE OF THE LINEARIZING ALGORITHM ALL ERRORS
C                  MUST BE POSITIVE. IF AN ALLOWABLE ERROR IS NOT
C                  POSITIVE IT WILL BE SET EQUAL TO THE STANDARD OPTION
C                  (CURRENTLY 0.001, CORRESPONDING TO 0.1 PER-CENT).
C                  IF THE FIRST ERROR LINE IS BLANK IT WILL TERMINATE
C                  THE ERROR LAW AND THE ERROR WILL BE TREATED AS
C                  ENERGY INDEPENDENT, EQUAL TO THE STANDARD OPTION
C                  (CURRENTLY 0.1 PER-CENT). (SEE EXAMPLE INPUT 4).
C
C     EXAMPLE INPUT NO. 1
C     -------------------
C     RETRIEVE DATA BY ZA IN ORDER TO FIND ALL URANIUM ISOTOPES AND
C     THORIUM 232. RETRIEVE ALL NEUTRON INTERACTION CROSS SECTIONS
C     (MF=3). ALL ENERGY INTERVALS IN WHICH THE CROSS SECTION IS
C     AT LEAST 1 MICRO-BARN (1.0E-06 BARNS) WILL BE SUBDIVIDED.
C     BACKWARD THINNING WILL BE PERFORMED. FROM 0 TO 100 EV LINEARIZE
C     TO WITHIN 0.1 PER-CENT ACCURACY. FROM 100 EV TO 1 KEV VARY
C     ACCURACY BETWEEN 0.1 AND 1.0 PER-CENT. ABOVE 1 KEV USE 1
C     PER-CENT ACCURACY.
C
C     EXPLICITLY SPECIFY THE STANDARD FILENAMES.
C
C     IN THIS CASE THE FOLLOWING 11 INPUT LINES ARE REQUIRED
C
C          1          0 1.00000- 6          0
C ENDFB.IN
C ENDFB.OUT
C 92000 3  0 92999 3999
C 90232 3  0     0 3  0    (UPPER LIMIT AUTOMATICALLY SET TO 90232 3999)
C                          (END OF REQUEST LIST)
C 0.00000+ 0 1.00000-03
C 1.00000+ 2 1.00000-03
C 1.00000+ 3 1.00000-02
C 1.00000+ 9 1.00000-02
C                          (END OF ERROR LAW)
C
C     EXAMPLE INPUT NO. 2
C     -------------------
C     SAME AS THE ABOVE CASE, EXCEPT LINEARIZE ALL DATA TO WITHIN THE
C     STANDARD ACCURACY (CURRENTLY 0.1 PER-CENT). IN ORDER TO USE THE
C     STANDARD ACCURACY YOU NEED NOT SPECIFY ANY ERROR LAW AT ALL. IN
C     THIS CASE INCLUDE THE HOLLERITH SECTION, MF=1, MT=451, FOR EACH
C     MATERIAL.
C
C     LEAVE THE DEFINITION OF THE FILENAMES BLANK - THE PROGRAM WILL
C     THEN USE STANDARD FILENAMES.
C
C     IN THIS CASE THE FOLLOWING 9 INPUT LINES ARE REQUIRED
C
C          1          0 1.00000- 6          0
C                          (USE DEFAULT FILENAME = ENDFB.IN)
C                          (USE DEFAULT FILENAME = ENDFB.OUT)
C 92000 1451 92999 1451
C 92000 3  0 92999 3999
C 90232 1451     0 1451
C 90232 3  0     0 3  0    (UPPER LIMIT AUTOMATICALLY SET TO 90232 3999)
C                          (END OF REQUEST LIST)
C                          (0.1 PER-CENT ERROR, END OF ERROR LAW)
C
C     EXAMPLE INPUT NO. 3
C     -------------------
C     LINEARIZE ALL MATERIALS ON AN ENDF/B TAPE TO WITHIN AN ACCURACY
C     OF 0.5 PER-CENT (0.005 AS A FRACTION). IN THIS CASE YOU NEED NOT
C     SPECIFY THE MAT, MF, MT RANGES.
C
C     READ THE ENDF/B DATA FROM \ENDFB6\ZA092238 AND WRITE THE ENDF/B
C     DATA TO \ENDFB6\LINEAR\ZA092238.
C
C     IN THIS CASE THE FOLLOWING 6 INPUT LINES ARE REQUIRED
C
C                                             (MAT, 1.0E-10 BARNS, THIN)
C \ENDFB6\ZA092238
C \ENDFB6\LINEAR\ZA092238
C                          (RETRIEVE ALL DATA, END REQUEST LIST)
C            5.00000-03
C                          (END OF ERROR LAW)
C
C     NOTE THAT IN THIS CASE IF THE INPUT HAD SPECIFIED AN EQUIVALENT
C     ENERGY DEPENDENT ERROR LAW BY GIVING A NUMBER OF ENERGY POINTS
C     AT EACH OF WHICH THE ERROR IS 0.5 PER-CENT THE PROGRAM WOULD TAKE
C     LONGER TO RUN (I.E., ONLY USE AN ENERGY DEPENDENT ERROR LAW WHEN
C     IT IS NECESSARY).
C
C     EXAMPLE INPUT NO. 4
C     -------------------
C     IN ORDER TO LINEARIZE ALL MATERIALS ON AN ENDF/B TAPE TO THE
C     STANDARD OPTION OF 0.1 PER-CENT IT IS ADEQUATE TO INPUT A SET
C     OF COMPLETELY BLANK LINES WHICH WILL AUTOMATICALLY INVOKE ALL
C     OF THE STANDARD OPTIONS.
C
C     LEAVE THE DEFINITION OF THE FILENAMES BLANK - THE PROGRAM WILL
C     THEN USE STANDARD FILENAMES.
C
C     IN THIS CASE THE FOLLOWING THREE INPUT LINES ARE REQUIRED
C
C                                             (MAT, 1.0E-10 BARNS, THIN)
C                          (USE DEFAULT FILENAME = ENDFB.IN)
C                          (USE DEFAULT FILENAME = ENDFB.OUT)
C                          (RETRIEVE ALL DATA, END REQUEST LIST)
C                          (0.1 PER-CENT ERROR, END OF ERROR LAW)
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
C-----08/08/2012 DEFINE CODE NAME
      CHARACTER*8 CODENAME
      COMMON/NAMECODE/CODENAME
      CHARACTER*4 CARD
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/COPC/CARD(17)
      COMMON/COPI/MFIELD(3)
      COMMON/COUNTS/MATNOW,MFNOW,MATIN,MATOUT,N2TOTI,N2TOTO
      COMMON/PAGER/NPAGE,NPAGE2,NP1P1,NP2M1
      COMMON/STARTE/ESTART
c-----11/30/2012 - added /SLIM/ for NOTHIN
      COMMON/SLIM/ISTART,NOTHIN,ITHIN1,ITHIN2,ITHIN3,MTEND
      INCLUDE 'linear.h'
C-----08/08/2012 DEFINE CODE NAME
      CODENAME = 'LINEAR  '
C-----INITIALIZE TIMER
      CALL TIMER
c-----------------------------------------------------------------------
C
C     DEFINE ALL I/O UNITS AND OPTIONAL DEFINE FILE NAMES.
C
c-----------------------------------------------------------------------
      CALL FILEIO
C-----DEFINE ALL PAGE SIZE DEPENDENT PARAMETERS.
      NPAGE =MAXPAGE
      NPAGE2=MAXPAGE+MAXPAGE
      NP1P1 =NPAGE+1
      NP2M1 =NPAGE2-1
C-----IF A REACTION STARTS ABOVE ESTART (1 eV) IT WILL BE CONSIDERED
C-----TO BE INCOMPLETE OR THRESHOLD REACTION AND WILL ALWAYS START WITH
C-----A ZERO CROSS SECTION (IF IT DOESN'T A POINT WILL BE INSERTED).
      ESTART=1.0d9
C-----WRITE OUTPUT TITLE.
      WRITE(OUTP,120)
      WRITE(*   ,120)
c-----------------------------------------------------------------------
C
C     READ AND CHECK ALL INPUT PARAMETERS.
C
c-----------------------------------------------------------------------
      CALL READIN
c-----------------------------------------------------------------------
C
C     PROCESS REQUESTED SECTION OF ENDF/B DATA SEPARATELY. ADD COMMENTS
C     TO FILE 1, LINEARIZE FILES 3, 23 AND 27. COPY ALL OTHER SECTIONS.
C
c-----------------------------------------------------------------------
C-----COPY TAPE LABEL RECORD TO LINEARIZED FILE.
      CALL COPYL
C-----LIST TAPE LABEL.
      WRITE(OUTP,100) CARD,MFIELD(1)
      WRITE(*   ,100) CARD,MFIELD(1)
C-----INITIALIZE TOTAL POINTS READ AND WRITTEN.
      N2TOTI=0
      N2TOTO=0
C-----INITIALIZE LAST MAT AND MF READ.
      MATNOW=0
      MFNOW=0
c-----------------------------------------------------------------------
C
C     LOOP OVER SECTIONS.
C
c-----------------------------------------------------------------------
C-----FIND NEXT REQUESTED SECTION.
   10 CALL NEXTMT
c-----------------------------------------------------------------------
C
C     PROCESS NU-BAR - TOTAL, DELAYED OR PROMPT - MUST BE DONE HERE TO
C     ALLOW FIRST LINE OF SECTION TO BE CHANGED - LNU = 1 - POLYNOMIAL
C     TO LNU = 2 - TABULATED.
C
c-----------------------------------------------------------------------
      IF(MFH.NE.1) GO TO 20
c-----------------------------------------------------------------------
C
C     IN ENDF/B-V USE  MT=452, 455, 456 AND 465, 466 (SPONTANEOUS)
C     IN ENDF/B-6 USE MT=452, 455, 456
C     THE SPONTANEOUS DATA BY DEFINITION IS NOT ENERGY DEPENDENT -
C     SO IT SHOULD ONLY BE COPIED - NEED ONLY PROCESS MT=452, 455,
C     456 HERE (MT=465, 466 WILL BE COPIED).
C
c-----------------------------------------------------------------------
      IF(MTH.NE.452.AND.MTH.NE.455.AND.MTH.NE.456) GO TO 20
      CALL NUBAR
      GO TO 10
C-----OUTPUT FIRST LINE OF EVALUATION OR TAPE END (TEND) LINE.
   20 CALL CONTO
C-----CHECK FOR END OF RUN.
      IF(MATH.LE.0) GO TO 80
c-----------------------------------------------------------------------
C
C     NU-BAR IS DONE ABOVE. ALL OTHER SECTIONS ARE DONE HERE.
C
c-----------------------------------------------------------------------
C-----FIND FILE 1, SECTION 451 AND ADD COMMENTS TO INDICATE THAT
C-----THIS MATERIAL HAS BEEN PROCESSED.
      IF(MFH.lt.1) go to 50
      IF(MFH.gt.1) go to 30
      IF(MTH.lt.451) go to 50
      IF(MTH.gt.451) go to 30
C-----2020/12/11 - Optionally Add Comments.
      CALL FILE1
      GO TO 10
C-----NEUTRON INTERACTION CROSS SECTIONS?
   30 IF(MFH.lt.3) go to 50
      IF(MFH.eq.3) go to 40
C-----02/14/00 - ADDED MF = 9 AND 10
C-----MULTIPLICTIES FOR ACTIVATION PRODUCTION
      IF(MFH.lt.9) go to 50
      IF(MFH.eq.9) go to 60
C-----CROSS SECTIONS FOR ACTIVATION PRODUCTION
      IF(MFH.lt.10) go to 50
      IF(MFH.eq.10) go to 60
C-----PHOTON INTERACTION CROSS SECTIONS?
      IF(MFH.lt.23) go to 50
      IF(MFH.eq.23) go to 40
C-----FORM FACTORS, SCATTERING FUNCTIONS, AND ANOMALOUS SCATTERING.
      IF(MFH.ne.27) go to 50
C-----2014/10/10 KEEP ALL Imaginary Anomalous Scattering Factor Points.
      NOTHINX = NOTHIN
      IF(MTH.eq.506) NOTHIN  = 1
      CALL FILEX
C-----2014/10/10 - RESTORE THINNING OPTION
      NOTHIN     = NOTHINX
      GO TO 10
c-----------------------------------------------------------------------
C
C     SECTION SECTION FOUND. LINEARIZE, THIN AND OUTPUT SECTION.
C
c-----------------------------------------------------------------------
   40 CALL FILEX
      GO TO 10
C-----COPY SECTION.
   50 CALL COPYS
      GO TO 10
c-----------------------------------------------------------------------
C
C     MF =9 AND 10 HAVE MULTIPLE SECTIONS
C
c-----------------------------------------------------------------------
   60 NS = N1H
      DO 70 IS=1,NS
      CALL FILEX
   70 CONTINUE
C-----ADD SEND LINE.
      CALL OUTS(MATH,MFH)
      GO TO 10
c-----------------------------------------------------------------------
C
C     END OF RUN.
C
c-----------------------------------------------------------------------
C-----PRINT WARNING MESSAGE IS NO DATA WAS FOUND TO SATISFY RETRIEVAL
C-----CRITERIA.
   80 IF(MATNOW.GT.0) GO TO 90
      WRITE(OUTP,130)
      WRITE(*   ,130)
C-----END OF RUN - ERROR
      CALL ENDERROR
C-----WRITE POINT TOTALS FOR TAPE.
   90 WRITE(OUTP,110) N2TOTI,N2TOTO
      WRITE(*   ,110) N2TOTI,N2TOTO
c-----Print final WARNING if data not tabulated to same Maximum Energy
      CALL MAXIE4(1)
C-----END OF RUN - NORMAL
      CALL ENDIT
      GO TO 90   ! CANNOT GET TO HERE.
  100 FORMAT(2X,78('-')/
     1 '  ENDF/B Tape Label'/2X,78('-')/2X,16A4,A2,I4/2X,78('-')/
     2 '    Material    MAT  MF  MT  ENDF/B',6X,'Kelvin',5X,'Q-Value',
     3 '   Points   Points'/28X,' Format',22X,'eV',
     4'       In      Out'/2X,78('-'))
  110 FORMAT(2X,78('-')/48X,'Tape Totals',2I9/2X,78('-'))
  120 FORMAT('  Linearize ENDF/B Cross Sections',
     1 ' (LINEAR 2021-1)'/2X,78('-'))
  130 FORMAT('  WARNING - No Data Found That Satisfied Retrieval',
     1 ' Criteria.'/12X,
     2 ' Therefore No Data was Linearized or Written to Output File.'/
     1 2X,78('-'))
      END
      SUBROUTINE FILE1
C=======================================================================
C
C     ADD COMMENTS AT THE END OF FILE 1, SECTION 451 TO INDICATE
C     THAT THIS MATERIAL HAS BEEN PROCESSED BY PROGRAM LINEAR AND
C     TO SPECIFY THE ALLOWABLE ERROR.
C
C     DEFINE FORMAT TO BE ENDF/B-IV, V OR VI.
C
C     THE ENDF/B FORMAT CAN BE DETERMINED FROM THE SECOND LINE.
C     ENDF/B-4  = N1 > 0, N2 = 0,LINE COUNT (POSITIVE)
C     ENDF/B-5  = N1 = N2 = 0
C     ENDF/B-6  =      N2 = VERSION NUMBER (6 OR MORE)
C
C     First line has already been read.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 PROGDOC1
      CHARACTER*4 FMTTAB,FMTHOL
      CHARACTER*66 PROGDOC
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      COMMON/OKERR3/ENER3(21),ER3(21),KERR3,MAXER3
      COMMON/ERRORCOM/ERRXC3,ERMINMAX,ERMT2,ERMT102,ERSOFT,XCLOW
      COMMON/HOLFMT/FMTHOL
      COMMON/LISCOM/LISO
      COMMON/COMCOM/NOCOMENT
      COMMON/TEMPO/TEMP3,IVERSE
      DIMENSION FMTTAB(3),PROGDOC(8),PROGDOC1(66,8)
      EQUIVALENCE (PROGDOC(1),PROGDOC1(1,1))
C-----ENDF/B VERSION
      DATA FMTTAB/'4   ','5   ','6   '/
c-----------------------------------------------------------------------
c
C     DOCUMENTATION TO ADD TO ENDF/B OUTPUT - EACH LINE IS 66
C     CHARACTERS LONG - FIELDS 12345678901 ARE FILLED IN WITH
C     11 CHARACTERS DURING EXECUTION.
c
c-----------------------------------------------------------------------
C               1         2         3         4         5         6
C       12345678901234567890123456789012345678901234567890123456789012
C       3456
      DATA PROGDOC/
     1 ' ***************** Program LINEAR (VERSION 2021-1) ***********',
     2 ' For All Data Greater than12345678901 barns in Absolute Value ',
     3 ' Data Linearized to Within an Accuracy of12345678901 per-cent ',
     4 ' Data Linearized Using Energy Dependent Uncertainty           ',
     5 '      Energy    Accuracy                                      ',
     6 '        (eV)  (per-cent)                                      ',
     7 ' ----------- -----------                                      ',
     8 ' 12345678901 12345678901                                      '/
C-----FILL IN REMAINDER OF FIRST LINE.
      PROGDOC1(63,1) = '*'
      PROGDOC1(64,1) = '*'
      PROGDOC1(65,1) = '*'
      PROGDOC1(66,1) = '*'
c
c     Read Second Line
c
C-----HEAD LINE OF SECTION HAS BEEN READ AND WRITTEN. READ NEXT LINE
C-----AND DETERMINE IF THIS IS THE ENDF/B-4, 5, 6 FORMAT.
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      IVERSE=4
      LISOX =L2            ! Save potential target isomer number
C-----CHECK FOR ENDF/B-IV.
C-----4: N1 > 0, N2 = 0
      IF(N1.GT.0.AND.N2.EQ.0) GO TO 10
C-----NOT ENDF/B-IV. READ THIRD LINE.
      N2X=N2
      CALL CARDO(C1,C2,L1,L2,N1,N2)
c
c     Read Third Line
c
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      IVERSE=5
C-----CHECK FOR ENDF/B-V FORMAT.
      IF(N2X.LE.0) GO TO 10
C-----ENDF/B-6 FORMAT. READ FOURTH LINE.
      CALL CARDO(C1,C2,L1,L2,N1,N2)
c
c     Read Fourth Line
c
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      IVERSE=6
      LISO   = LISOX
C-----DEFINE TEMPERATURE OF FILE 3 CROSS SECTIONS.
      TEMP3=C1
C-----SET DERIVED MATERIAL FLAG.
      L1=1
C-----DEFINE ENDF/B FORMAT NUMBER.
   10 FMTHOL=FMTTAB(IVERSE-3)
c-----------------------------------------------------------------------
C
C     2020/12/11 - Optionally Add Comments
C
c-----------------------------------------------------------------------
C-----INCREASE COMMENT LINE COUNT AND COPY TO END OF HOLLERITH.
C-----ALWAYS OUTPUT 1) PROGRAM I.D., 2) MINIMUM CROSS SECTION
C-----FOR CONSTANT ACCURACY, 3) ACCURACY
C-----FOR VARIABLE ACCURACY, 4 LINE TITLE + ERROR LAW
      N1OUT = N1
      if(NOCOMENT.eq.0) then
      IF(MAXER3.LE.1) N1OUT=N1+3
      IF(MAXER3.GT.1) N1OUT=N1+6+MAXER3
      endif
      CALL CARDO(C1,C2,L1,L2,N1OUT,N2)
      DO 20 N=1,N1
      CALL COPY1
   20 CONTINUE
      if(NOCOMENT.ne.0) go to 50
c-----------------------------------------------------------------------
C
C     ADD COMMENTS TO DOCUMENT WHAT WAS DONE TO DATA.
C
c-----------------------------------------------------------------------
C-----OUTPUT PROGRAM NAME AND VERSION I.D.
      CALL HOLLYO(PROGDOC1(1,1))
C-----OUTPUT MINIMUM DATA OF INTEREST.
      CALL OUT9(XCLOW,PROGDOC1(27,2))
      CALL HOLLYO(PROGDOC1(1,2))
C-----CONSTANT OR ENERGY DEPENDENT ERROR LAW
      IF(MAXER3.GT.1) GO TO 30
C-----OUTPUT PER-CENT ACCURACY FOR ENERGY INDEPENDENT ERROR.
      PERCNT=100.0d0*ER3(1)
      CALL OUT9(PERCNT,PROGDOC1(42,3))
      CALL HOLLYO(PROGDOC1(1,3))
      GO TO 50
C-----WRITE FOUR COMMENT LINES PLUS ENERGY DEPENDENT ERROR LAW.
   30 CALL HOLLYO(PROGDOC1(1,4))
      CALL HOLLYO(PROGDOC1(1,5))
      CALL HOLLYO(PROGDOC1(1,6))
      CALL HOLLYO(PROGDOC1(1,7))
      DO 40 I=1,MAXER3
      PERCNT=100.0d0*ER3(I)
      CALL OUT9(ENER3(I),PROGDOC1( 2,8))
      CALL OUT9(PERCNT  ,PROGDOC1(14,8))
      CALL HOLLYO(PROGDOC1(1,8))
   40 CONTINUE
C-----COPY TO END OF SECTION.
   50 CALL COPYS
      RETURN
      END
      SUBROUTINE NUBAR
C=======================================================================
C
C     PROCESS NU-BAR
C     MT = 452 - TOTAL
C        = 455 - DELAYED
C        = 456 - PROMPT
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 ZABCD,LAMBDA
      CHARACTER*4 FMTHOL
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,C2,L1,L2,N1,N2,MAT,MF,MT
      COMMON/NEWTAB/N2CORE,N2SCR,N2TOT,N2P1,N2P2
      COMMON/OKERR3/ENER3(21),ER3(21),KERR3,MAXER3
      COMMON/ERRORCOM/ERRXC3,ERMINMAX,ERMT2,ERMT102,ERSOFT,XCLOW
      COMMON/TEMPO/TEMP3,IVERSE
      COMMON/PAGER/NPAGE,NPAGE2,NP1P1,NP2M1
      COMMON/WHATZA/IZA
      COMMON/HOLFMT/FMTHOL
      COMMON/LISCOM/LISO
c-----11/30/2012 - added /SLIM/ for NOTHIN
      COMMON/SLIM/ISTART,NOTHIN,ITHIN1,ITHIN2,ITHIN3,MTEND
      INCLUDE 'linear.h'
      DIMENSION ZABCD(12),LAMBDA(66,50)
      DATA EMIN/1.0D-05/
      DATA EMAX/2.0D+07/
      DATA HALF/5.0D-01/
      DATA TEN /1.0D+01/
c-----------------------------------------------------------------------
C
C     IS DATA IN TABULATED OR POLYNOMIAL FORM.
C
c-----------------------------------------------------------------------
      IF(L2H.NE.2) GO TO 30
c-----------------------------------------------------------------------
C
C     DATA IS ALREADY TABULATED - USE FILEX TO LINEARIZE IT.
C
c-----------------------------------------------------------------------
C-----OUTPUT FIRST LINE UNCHANGED.
      CALL CONTO
C-----FOR DELAYED NU-BAR COPY LIST RECORD WITH DECAY CONSTANTS.
      IF(MTH.NE.455) GO TO 20
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      CALL CARDO(C1,C2,L1,L2,N1,N2)
      DO 10 I=1,N1,6
      CALL COPY1
   10 CONTINUE
c-----------------------------------------------------------------------
C
C     PROCESS TABULATED DATA.
C
c-----------------------------------------------------------------------
C-----05/01/19 - ALWAYS KEEP ORIGINAL POINTS
   20 NOTHINX = NOTHIN
      NOTHIN     = 1
      CALL FILEX
C-----05/01/19 - RESTORE THINNING OPTION
      NOTHIN     = NOTHINX
      RETURN
c-----------------------------------------------------------------------
C
C     EITHER CONVERT TO TABULATED FORM OR COPY SPONTANEOUS NU-BAR
C
c-----------------------------------------------------------------------
C-----FOR DELAYED NU-BAR SAVE LIST RECORD WITH DECAY CONSTANTS.
   30 IF(MTH.NE.455) GO TO 50
      CALL CARDI(C1L,C2L,L1L,L2L,N1L,N2L)
C-----STORAGE ALLOWS UP TO 300 DECAY CONSTANTS (50 LINES).
      IF(N1L.GT.300) GO TO 170
      II=0
      DO 40 I=1,N1L,6
      II=II+1
      CALL HOLLYI(LAMBDA(1,II))
   40 CONTINUE
C-----IN ENDF/B-6 FORMAT AND LATER CHECK FOR SPONTANEOUS NU-BAR.
   50 CALL CARDI(C1,C2,L1,L2,N1,N2)
      IF(IVERSE.LT.6.OR.N1.NE.1) GO TO 80
c-----------------------------------------------------------------------
C
C     COPY SPONTANEOUS NU-BAR (DEFINED BY ONLY 1 POLYNOMIAL COEFFICIENT)
C
c-----------------------------------------------------------------------
      CALL CONTO
C-----FOR DELAYED NU-BAR OUTPUT LIST RECORD WITH DECAY CONSTANTS.
      IF(MTH.NE.455) GO TO 70
      CALL CARDO(C1L,C2L,L1L,L2L,N1L,N2L)
      II=0
      DO 60 I=1,N1L,6
      II=II+1
      CALL HOLLYO(LAMBDA(1,II))
   60 CONTINUE
C-----OUTPUT LIST RECORD WITH 1 POLYNOMIAL COEFFICIENT (1 LINE).
   70 CALL CARDO(C1,C2,L1,L2,N1,N2)
      CALL COPY1
C-----COPY TO END OF SECTION.
      CALL COPYS
C-----IDENTIFY DATA AS SPONTANEOUS.
c-----2020/3/21` - Added Target isomer flag
      CALL ZAHOLM(IZA,LISO,ZABCD)
      WRITE(OUTP,200) ZABCD,MATH,MFH,MTH,FMTHOL
      WRITE(*   ,200) ZABCD,MATH,MFH,MTH,FMTHOL
      RETURN
c-----------------------------------------------------------------------
C
C     CONVERT POLYNOMIAL REPRESENTATION TO A LINEARLY INTERPOLABLE
C     TABLE
C
c-----------------------------------------------------------------------
C-----CHANGE LNU TO 2 = TABULATED AND OUTPUT HEAD CARD.
   80 L2H=2
      CALL CONTO
C-----FOR DELAYED NU-BAR OUTPUT LIST RECORD WITH DECAY CONSTANTS.
      IF(MTH.NE.455) GO TO 100
      CALL CARDO(C1L,C2L,L1L,L2L,N1L,N2L)
      II=0
      DO 90 I=1,N1L,6
      II=II+1
      CALL HOLLYO(LAMBDA(1,II))
   90 CONTINUE
C-----READ POLYNOMIAL COEFFICIENTS - NOTE, FIRST LINE OF LIST RECORD
C-----HAS ALREADY BEEN READ (TO DETERMINE WHETHER OR NOT DATA IS FOR
C-----SPONTANEOUS FISSION).
  100 CALL LISTI(XIN,N1)
c-----------------------------------------------------------------------
C
C     IF ONLY 1 OR 2 COEFFICIENTS NU-BAR IS EITHER CONSTANT OR LINEAR -
C     EITHER CAN BE REPRESENTED BY ONLY 2 ENERGY POINTS.
C
c-----------------------------------------------------------------------
      N2SCR=0
      IF(N1.GT.2) GO TO 110
      N2TOT=2
      XOUT(1)=EMIN
      XOUT(2)=EMAX
      YOUT(1)=POLYNU(XOUT(1),XIN,N1)
      YOUT(2)=POLYNU(XOUT(2),XIN,N1)
      GO TO 180
c-----------------------------------------------------------------------
C
C     GENERAL CASE REQUIRES ENERGY DEPENDENT TABLE.
C
C     START WITH A GRID OF ENERGY POINTS AT EACH DECADE OF ENERGY
C     AND THEN USE INTERVAL HALVING TO INSERT POINTS TO CONVERGNCE.
C
c-----------------------------------------------------------------------
C-----DEFINE FIRST POINT AT LOWER ENERGY LIMIT.
  110 N2TOT=1
      XOUT(1)=EMIN
      YOUT(1)=POLYNU(EMIN,XIN,N1)
      EBASE=EMIN
C-----DEFINE END OF ENERGY DECADE - OR UPPER ENERGY LIMIT.
  120 EBASE=EBASE*TEN
      IF(EBASE.GT.EMAX) EBASE=EMAX
      YBASE=POLYNU(EBASE,XIN,N1)
C-----TEST FOR MEMORY OVERFLOW.
  130 IF(N2TOT.GE.NPAGE2) GO TO 170
C-----START FROM END OF ENERGY DECADE.
      N2M1=N2TOT
      N2TOT=N2TOT+1
      XOUT(N2TOT)=EBASE
      YOUT(N2TOT)=YBASE
C-----INTERVAL HALF TO CONVERGENCE.
  140 XMID=HALF*(XOUT(N2M1)+XOUT(N2TOT))
      CALL INCORE10(XMID)
      YMID=POLYNU(XMID,XIN,N1)
c-----------------------------------------------------------------------
c
c     Convergence Test
c
c-----------------------------------------------------------------------
      IF(KERR3.NE.0) CALL ERROK3(XMID)
C
C     Do not sub-divide beyond 10 digits
C
      if(XMID.le.XOUT(N2M1).or.
     1   XMID.ge.XOUT(N2TOT)) go to 160
C
C     DO NOT SUB-DIVIDE INTERVALS WITHIN WHICH THE ABSOLUTE VALUE OF
C     THE CROSS SECTION IS LESS THAN THE MINIMUM CROSS SECTION OF
C     INTEREST.
C
      if(DABS(YOUT(N2M1)) .le.XCLOW.and.
     1   DABS(YOUT(N2TOT)).le.XCLOW) go to 160
c
c     Toward min or max
c
c-----Keep iterating toward MAXIMUM
      IF(YMID.gt.YOUT(N2M1).and.YMID.gt.YOUT(N2TOT)) then
      IF(DABS(YMID-YLIN).LE.DABS(YMID*ERMINMAX)) GO TO 160
      go to 150
      endif
c-----Keep iterating toward MINIMUM
      IF(YMID.lt.YOUT(N2M1).and.YMID.lt.YOUT(N2TOT)) then
      IF(DABS(YMID-YLIN).LE.DABS(YMID*ERMINMAX)) GO TO 160
      go to 150
      endif
c
c     Linearly Interpolate
c
      YLIN=HALF*(YOUT(N2M1)+YOUT(N2TOT))
      IF(DABS(YMID-YLIN).LE.DABS(YMID*ERRXC3)) GO TO 160
c
C     NO CONVERGENCE.
c
  150 XOUT(N2TOT)=XMID
      YOUT(N2TOT)=YMID
      GO TO 140
c
C     CONVERGENCE. IF NOT END OF DECADE CONTINUE IN SAME DECADE.
c
  160 IF(XOUT(N2TOT).LT.EBASE) GO TO 130
C-----END OF DECADE. CONTINUE UP TO MAXIMUM ENERGY (20 MEV).
      IF(XOUT(N2TOT).LT.EMAX) GO TO 120
      GO TO 180
c-----------------------------------------------------------------------
C
C     TABLE OVERFLOW - PRINT ERROR MESSAGE AND TERMINATE.
C
c-----------------------------------------------------------------------
c-----2020/3/21` - Added Target isomer flag
  170 CALL ZAHOLM(IZA,LISO,ZABCD)
      WRITE(OUTP,190) ZABCD,MATH,MFH,MTH,FMTHOL
      WRITE(*   ,190) ZABCD,MATH,MFH,MTH,FMTHOL
      CALL ENDERROR
c-----------------------------------------------------------------------
C
C     OUTPUT LINEARLY INTERPOLABLE TABLE.
C
c-----------------------------------------------------------------------
  180 CALL COPOUT
      RETURN
  190 FORMAT(2X,12A1,I5,I4,I4,3X,A2,3X,' Table Overflow - Execution',
     1 ' Terminated')
  200 FORMAT(2X,12A1,I5,I4,I4,3X,A2,3X,24X,'Spontaneous')
      END
      REAL*8 FUNCTION POLYNU(E,CN,N)
C=======================================================================
C
C     CALCULATE NU-BAR FROM POLYNOMIAL COEFFICIENTS
C
C     NU(E) = SUM (I=1 TO N)* CN(I)*E**(I-1)
C
C=======================================================================
      INCLUDE 'implicit.h'
      DIMENSION CN(N)
      DATA ZEROD/0.0D+00/
      DATA ONED /1.0D+00/
      SUM=ZEROD
      EPOWER=ONED
      DO 10 I=1,N
      SUM=SUM+CN(I)*EPOWER
      EPOWER=EPOWER*E
   10 CONTINUE
      POLYNU=SUM
      RETURN
      END
      SUBROUTINE FILEX
C=======================================================================
C
C     CONVERT DATA TO LINEAR-LINEAR FORM. IF LESS THAN MAXP1 POINTS
C     ARE GENERATED THEY WILL BE CORE RESIDENT. OTHERWISE THEY WILL
C     BE ON SCRATCH FILE (ISCR)
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,Q,L1,L2,N1,N2IN,MAT,MF,MT
      COMMON/OLDTAB/IXYLOW,IXYHI,LEFT
      COMMON/STARTE/ESTART
      COMMON/WHATZA/IZA
      COMMON/NEWTAB/N2CORE,N2SCR,N2TOT,N2P1,N2P2
      COMMON/OKERR3/ENER3(21),ER3(21),KERR3,MAXER3
      COMMON/ERRORCOM/ERRXC3,ERMINMAX,ERMT2,ERMT102,ERSOFT,XCLOW
      COMMON/LASTE/ELAST
      COMMON/PAGER/NPAGE,NPAGE2,NP1P1,NP2M1
      COMMON/SLIM/ISTART,NOTHIN,ITHIN1,ITHIN2,ITHIN3,MTEND
      INCLUDE 'linear.h'
      DATA ZERO/0.0D+00/
      DATA HALF/5.0D-01/
C-----THERMAL ENERGY - ALWAYS KEEP
      DATA ETHERMAL/2.53D-02/
c-----------------------------------------------------------------------
C
C     READ AND CHECK SECTION LEADER LINE AND INTERPOLATION LAW. IF
C     INTERPOLATION LAW IS ILLEGAL (BAD INTERPOLATION TYPE OR IMPROPER
C     INTERPOLATION BOUNDARY) TERMINATE EXECUTION.
C
c-----------------------------------------------------------------------
C-----READ SECTION HEAD LINE AND INTERPOLATION LAW.
      CALL CARDI(C1,Q,L1,L2,N1,N2IN)
      CALL TERPI(NBT,INT,N1)
c-----2019/1/3 - Additional Interpolation Law Tests
      CALL TERPTEST(NBT,INT,N1,N2IN,1)
c-----Check for INT=6, Charged Particle Threshold
      IM6=0
      do IR=1,N1
      IF(INT(IR).EQ.6) IM6=1
      enddo
c-----------------------------------------------------------------------
C
C     INITIALIZE ALL PARAMETERS FOR THIS SECTION.
C
c-----------------------------------------------------------------------
c-----Save MAT/MF/MT
      CALL MAXIE1(MATH,MFH,MTH)
C-----INITIALIZE FLAG TO INDICATE BEGINNING OF SECTION.
      ISTART=1
      KSTART=1   ! 10/5/18 - ADDED TO SKIP = 0 NEAR START
C-----INITIALIZE PAGING SYSTEM INDICES.
      IXYLOW=0
      IXYHI=0
      LEFT=N2IN
C-----INITIALIZE LAST ENERGY USED (FOR ASCENDING ENERGY ORDER TEST).
      ELAST=ZERO
C-----INITIALIZE END OF SECTION FLAG OFF.
      MTEND=0
C-----INITIALIZE THINNING INDICES.
      ITHIN1=1
      ITHIN2=2
      ITHIN3=2
C-----INITIALIZE COUNT OF POINTS IN CORE AND ON SCRATCH.
      N2CORE=1
      N2P1=2
      N2P2=3
      N2SCR=0
C-----DEFINE FIRST POINT IN TABLE.
      CALL XYPAGE(XOUT(1),YOUT(1),1)
C-----DO NOT CONSIDER THRESHOLD FOR PHOTON DATA OR IF KEEPING ALL
C-----ORIGINAL ENERGY POINTS.
      IF(MFH.NE.3.OR.NOTHIN.GT.0) GO TO 40
c-----SKIP LEADING CROSS SECTION = 0 POINTS - WARNING < 0 O.K.
      IF(YOUT(1).NE.0.0d0) GO TO 30
   10 KSTART = KSTART + 1
C-----CHECK FOR ALL = 0 - IF SO, COPY ENTIRE TABLE
      IF(KSTART.GT.N2IN) THEN
      CALL XYPAGE(XOUT(1),YOUT(1),1)
      KSTART = 1
      GO TO 40
      ENDIF
      CALL XYPAGE(XOUT(2),YOUT(2),KSTART)
      IF(YOUT(2).NE.0.0d0) GO TO 20
      XOUT(1) = XOUT(2)
      YOUT(1) = YOUT(2)
      GO TO 10
   20 N2CORE = 2
      N2P1   = 3
      N2P2   = 4
C-----IF THIS A THRESHOLD REACTION INSERT POINT AT THRESHOLD WITH ZERO
C-----CROSS SECTION IF THERE IS NOT ONE THERE ALREADY.
   30 IF(XOUT(1).LE.ESTART.OR.YOUT(1).EQ.0.0d0) GO TO 40
      XOUT(2)=XOUT(1)
      YOUT(2)=YOUT(1)
      YOUT(1)=0.0d0
      N2CORE=2
      N2P1=3
      N2P2=4
c-----------------------------------------------------------------------
C
C     LINEARIZE DATA CONSIDERING EACH INTERPOLATION LAW REGION
C     SEPARATELY.
C
c-----------------------------------------------------------------------
C-----SET UP LOOP OVER INTERPOLATION RANGES.
   40 NR2=KSTART   ! 10/05/18 - CHANGED TO SKIP = 0 NEAR START
      DO 220 IR=1,N1
C-----DEFINE POINTS IN INTERPOLATION RANGE AND TYPE OF INTERPOLATION.
      NR1=NR2+1
      NR2=NBT(IR)
C-----IF START IS ABOVE THIS RANGE, SKIP RANGE.
      IF(KSTART.GT.NR2) THEN
      NR2 = KSTART
      GO TO 220
      ENDIF
      INTYPE=INT(IR)
C-----HISTOGRAM OR LINEAR-LINEAR DOES NOT REQUIRE FURTHER SUBDIVISION.
      IF(INTYPE.eq.2) go to 70
      IF(INTYPE.gt.2) go to 100
c-----------------------------------------------------------------------
C
C     FOR HISTOGRAM REPLACE EACH ENERGY POINT THAT IS INTERNAL TO THE
C     INTERPOLATION ENERGY RANGE BY TWO ENERGY POINTS AND REPLACE EACH
C     END POINT OF THE INTERPOLATION ENERGY RANGE BY A SINGLE ENERGY
C     POINT (START OF INTERVAL HAS ALREADY BEEN STORED).
C
c-----------------------------------------------------------------------
      DO 60 NPT=NR1,NR2
C-----CORE SPACE FOR TWO MORE POINTS REQUIRED. IF NO ROOM IN CORE, THIN
C-----AND UNLOAD ONE PAGE OF POINTS TO SCRATCH.
      IF(N2CORE.GE.NP2M1) CALL THINIT
      N2CORE=N2CORE+2
      N2P1=N2CORE+1
      N2P2=N2P1+1
      CALL XYPAGE(XOUT(N2CORE),YOUT(N2CORE),NPT)
C-----ELIMINATE DUPLICATE POINTS.
      IF(XOUT(N2CORE).NE.XOUT(N2CORE-2)) GO TO 50
      XOUT(N2CORE-1)=XOUT(N2CORE)
      YOUT(N2CORE-1)=YOUT(N2CORE)
      N2CORE=N2CORE-1
      N2P1=N2CORE+1
      N2P2=N2P1+1
      GO TO 60
   50 XOUT(N2CORE-1)=XOUT(N2CORE)
      YOUT(N2CORE-1)=YOUT(N2CORE-2)
   60 CONTINUE
c-----2019/6/30 - Keep last point of Histogram - previoudly ERROR to
c-----            assume Y = 0 - now whatever it is is output.
      GO TO 220
c-----------------------------------------------------------------------
C
C     FOR LINEAR-LINEAR INTERPOLATION JUST COPY POINTS TO OUTPUT ARRAY.
C
c-----------------------------------------------------------------------
   70 DO 90 NPT=NR1,NR2
C-----DEFINE UPPER ENERGY LIMIT OF INTERVAL.
      CALL XYPAGE(XEND,YEND,NPT)
c-----------------------------------------------------------------------
C
C     IF NECESSARY INSERT THERMAL POINT
C
c-----------------------------------------------------------------------
C-----NOT FOR MF = 9 AND 10
      IF(MFH.EQ.9.OR.MFH.EQ.10) GO TO 80
      IF(XEND        .LE.ETHERMAL.OR.
     1   XOUT(N2CORE).GE.ETHERMAL) GO TO 80
      YTHERMAL=TERPIT(ETHERMAL,XEND,XOUT(N2CORE),
     1                         YEND,YOUT(N2CORE),INTYPE)
C-----CORE SPACE FOR ONE MORE POINT REQUIRED. IF NO ROOM IN CORE, THIN
C-----AND UNLOAD ONE PAGE OF POINTS TO SCRATCH.
      IF(N2CORE.GE.NPAGE2) CALL THINIT
C-----INSERT THERMAL VALUE
      N2CORE=N2CORE+1
      XOUT(N2CORE)=ETHERMAL
      YOUT(N2CORE)=YTHERMAL
C-----CORE SPACE FOR ONE MORE POINT REQUIRED. IF NO ROOM IN CORE, THIN
C-----AND UNLOAD ONE PAGE OF POINTS TO SCRATCH.
   80 IF(N2CORE.GE.NPAGE2) CALL THINIT
      N2CORE=N2CORE+1
      N2P1=N2CORE+1
      N2P2=N2P1+1
      XOUT(N2CORE)=XEND
      YOUT(N2CORE)=YEND
   90 CONTINUE
      GO TO 220
c-----------------------------------------------------------------------
C
C     NON-LINEAR INTERPOLATION LAW REQUIRES SUB-DIVISION. SET UP LOOP
C     OVER POINTS IN CURRENT INTERPOLATION REGION.
C
c-----------------------------------------------------------------------
  100 DO 210 NPT=NR1,NR2
C-----INITIALIZE TO RANGE NOT SAVED
      IMSAVED=0
C-----DEFINE UPPER ENERGY LIMIT OF INTERVAL.
      CALL XYPAGE(XEND,YEND,NPT)
c-----------------------------------------------------------------------
C
C     IF NECESSARY INSERT MAX. ENERGY OR THERMAL POINT
C
c-----------------------------------------------------------------------
  110 XTOP=XEND
C-----NO THERMAL FOR MF = 9 OR 10
      IF(MFH.EQ.9.OR.MFH.EQ.10) GO TO 120
      IF(XTOP.GT.ETHERMAL.AND.XOUT(N2CORE).LT.ETHERMAL)
     1 XTOP=ETHERMAL
  120 IF(XTOP.GT.2.0d0*XOUT(N2CORE)) XTOP=2.0d0*XOUT(N2CORE)
      IF(XTOP.GE.XEND) GO TO 130
C-----INTERPOLATE CROSS SECTION TO NEW END
      YTOP=TERPIT(XTOP,XEND,XOUT(N2CORE),
     1                 YEND,YOUT(N2CORE),INTYPE)
C-----SAVE END AND SET RANGE SAVED FLAG
      IMSAVED=1
      XSAVE=XEND
      YSAVE=YEND
C-----DEFINE END OF INTERVAL AT THERMAL
      XEND=XTOP
      YEND=YTOP
C-----DEFINE ENERGY AND CROSS SECTION AT TWO ENDS OF INTERVAL.
  130 XN2P2=XEND
      YN2P2=YEND
      XN2=XOUT(N2CORE)
      YN2=YOUT(N2CORE)
C-----DO NOT SUBDIVIDE IF CROSS SECTION IS CONSTANT.
      IF(YN2.EQ.YN2P2) GO TO 190
c-----------------------------------------------------------------------
C
C     DO NOT SUB-DIVIDE INTERVALS WITHIN WHICH THE ABSOLUTE VALUE OF
C     THE CROSS SECTION IS LESS THAN THE MINIMUM CROSS SECTION OF
C     INTEREST.
C
c-----------------------------------------------------------------------
      IF(DABS(YN2)  .LE.XCLOW.and.
     1   DABS(YN2P2).LE.XCLOW) GO TO 190
c-----------------------------------------------------------------------
C
C     DEFINE ENERGY AT MIDDLE OF INTERVAL.
C
c-----------------------------------------------------------------------
C-----INTYPE IS NOW 3, 4, 5 OR 6.
  140 IF(INTYPE.ne.4) go to 150
C-----LINEAR ENERGY.
      XN2P1=HALF*(XN2+XN2P2)
      GO TO 160
C-----LOG ENERGY.
  150 XN2P1=DSQRT(XN2*XN2P2)
C-----ROUND MIDPOINT.
  160 CALL INCORE10(XN2P1)
c-----------------------------------------------------------------------
C
C     SMALL ENERGY INTERVAL CONVERGENCE TESTS.
C
c-----------------------------------------------------------------------
C-----IF ENERGY AT MIDDLE OF INTERVAL IS LESS THAN ALLOWABLE ENERGY
C-----SPACING ONLY KEEP THE TWO ENDS OF THE INTERVAL.
      IF(XN2P1.LE.XN2.OR.XN2P1.GE.XN2P2) GO TO 190
c-----------------------------------------------------------------------
C
C     SMALL CROSS SECTION CONVERGENCE TESTS.
C
c-----------------------------------------------------------------------
C-----IF CROSS SECTION AT BOTH ENDS IS LESS THAN XCLOW ONLY KEEP
C-----KEEP THE TWO ENDS OF THE INTERVAL.
      IF(DABS(YN2)  .LT.XCLOW.and.
     1   DABS(YN2P2).LT.XCLOW) GO TO 190
c-----------------------------------------------------------------------
C
C     DEFINE CROSS SECTION AT MIDDLE OF INTERVAL BY INTERPOLATION LAW
C     AND LINEAR-LINEAR INTERPOLATION.
C
c     2020/12/9 - Keep midpoint if iterating toward MIN or MAX
c
c-----------------------------------------------------------------------
      YN2P1 =TERPIT(XN2P1,XN2,XN2P2,YN2,YN2P2,INTYPE)
C-----DEFINE ALLOWABLE ERROR.
      IF(KERR3.NE.0) CALL ERROK3(XN2P1)
c-----------------------------------------------------------------------
c
c     Converegence Test
c
c-----------------------------------------------------------------------
c-----220/12/9
c
c     Toward min or max
c
c-----Keep iterating toward MAXIMUM
      IF(YN2P1.gt.YN2.and.YN2P1.gt.YN2P2) then
      IF(DABS(YN2P1-YAPROX).LE.DABS(YN2P1*ERRXC3)) GO TO 180
      go to 170
      endif
c-----Keep iterating toward MINIMUM
      IF(YN2P1.lt.YN2.and.YN2P1.lt.YN2P2) then
      IF(DABS(YN2P1-YAPROX).LE.DABS(YN2P1*ERRXC3)) GO TO 180
      go to 170
      endif
c
c     Linearly Interpolate
c
C-----TEST FOR CONVERGENCE. IF CONVERGENCE KEEP MIDPOINT OF INTERVAL
C-----IN ORDER TO ALLOW ACCURATE BACKWARD THINNING BEFORE OUTPUT.
      YAPROX=TERPIT(XN2P1,XN2,XN2P2,YN2,YN2P2,2)
      IF(DABS(YN2P1-YAPROX).LE.DABS(YN2P1*ERRXC3)) GO TO 180
c-----------------------------------------------------------------------
C
C     NO CONVERGENCE. SHORTEN INTERVAL.
C
c-----------------------------------------------------------------------
  170 XN2P2=XN2P1
      YN2P2=YN2P1
      GO TO 140
c-----------------------------------------------------------------------
C
C     CONVERGENCE. KEEP INTERVAL MIDPOINT IF BACKWARD THINNING WILL BE
C     PERFORMED. OTHERWISE ONLY KEEP ENDS OF INTERVAL.
C
c-----------------------------------------------------------------------
  180 IF(NOTHIN.GT.0) GO TO 190
C-----CORE SPACE FOR TWO MORE POINTS REQUIRED. IF NO ROOM IN CORE, THIN
C-----AND UNLOAD ONE PAGE OF POINTS TO SCRATCH.
      IF(N2CORE.GE.NP2M1) CALL THINIT
C-----KEEP INTERVAL MIDPOINT AND ENDPOINT.
      XOUT(N2P1)=XN2P1
      YOUT(N2P1)=YN2P1
      XOUT(N2P2)=XN2P2
      YOUT(N2P2)=YN2P2
      N2CORE=N2P2
      N2P1=N2CORE+1
      N2P2=N2P1+1
      GO TO 200
C-----CORE SPACE FOR ONE MORE POINT REQUIRED. IF NO ROOM IN CORE, THIN
C-----AND UNLOAD ONE PAGE OF POINTS TO SCRATCH.
  190 IF(N2CORE.GE.NPAGE2) CALL THINIT
C-----MIDPOINT OF INTERVAL IS NOT REQUIRED. ONLY KEEP ENDPOINT OF
C-----INTERVAL.
      XOUT(N2P1)=XN2P2
      YOUT(N2P1)=YN2P2
      N2CORE=N2P1
      N2P1=N2CORE+1
      N2P2=N2P1+1
C-----IF NOT END OF CURRENT INTERVAL CONTINUE. OTHERWISE
C-----MOVE TO NEXT INTERVAL.
  200 IF(XOUT(N2CORE).LT.XEND) GO TO 130
C-----IF RANGE SAVED, RESTORE POINT AND RESET FLAG
      IF(IMSAVED.LE.0) GO TO 210
      IMSAVED=0
      XEND=XSAVE
      YEND=YSAVE
      GO TO 110
  210 CONTINUE
  220 CONTINUE
C-----EACH OF SECTION. SET END OF SECTION FLAG AND SET UP LINEARIZED,
C-----THINNED SECTION TO READ.
      MTEND=1
      CALL THINIT
C-----OUTPUT SECTION TO LINEARIZED FILE.
      CALL COPOUT
C-----PRINT ERROR MESSAGE IF INTERPOLATION LAW = 6 IS USED WITH A
C-----REACTION WITH A NEGATIVE Q-VALUE.
      IF(IM6.GT.0.AND.Q.LT.0.0d0) then
      WRITE(OUTP,230)
c-----2018/12/30 - Added online output.
      WRITE(*   ,230)
      ENDIF
      RETURN
  230 FORMAT(
     1 ' WARNING - the Above Section Uses Interpolation Law 6'/
     2 ' but, Has a Negative Q-Value? Results Will be Unreliable.')
      END
      SUBROUTINE THINIT
C=======================================================================
C
C     THIN LINEARIZED DATA AND IF NECESSARY OUTPUT ONE PAGE TO
C     SCRATCH.
C
C     FOUR INDICES TO IN CORE ARRAYS ARE USED IN THIS ROUTINE
C
C     N2CORE = NUMBER OF LINEARIZED POINTS (TO BE THINNED).
C     ITHIN1 = NUMBER OF THINNED POINTS
C     ITHIN2 = INDEX TO NEXT POINT TO CONSIDER FOR THINNING
C     ITHIN3 = INDEX TO FIRST POINT OF CURRENT INTERVAL TO BE THINNED
C              (ITHIN3 IS ONLY USED TO DECIDE WHEN TO INITIALIZE THE
C               LIMITS OF THE SLOPE).
C
C     IN ADDITION TO NORMAL CHANGES DUE TO THINNING ALL OF THESE
C     INDICES WILL BE UPDATED IF A PAGE OF DATA IS TRANSFERRED TO
C     SCRATCH.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*1 FIELD
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/ISCR
      COMMON/NEWTAB/N2CORE,N2SCR,N2TOT,N2P1,N2P2
      COMMON/OKERR3/ENER3(21),ER3(21),KERR3,MAXER3
      COMMON/ERRORCOM/ERRXC3,ERMINMAX,ERMT2,ERMT102,ERSOFT,XCLOW
      COMMON/SLIM/ISTART,NOTHIN,ITHIN1,ITHIN2,ITHIN3,MTEND
      COMMON/PAGER/NPAGE,NPAGE2,NP1P1,NP2M1
      COMMON/IWATCH/MONITR
      COMMON/FIELDC/FIELD(11,6)
      INCLUDE 'linear.h'
C-----INITIALIZE FLAG TO INDICATE SCRATCH FILE HAS NOT BEEN WRITTEN
C-----ON YET.
      DATA IMUSED/0/
C-----THERMAL ENERGY - ALWAYS KEEP
      DATA ETHERMAL/2.53D-02/
C-----SHOULD POINTS BE THINNED.
      IF(NOTHIN.EQ.0) GO TO 10
c-----------------------------------------------------------------------
C
C     POINTS WILL NOT BE THINNED. SET INDEX TO KEEP ALL POINTS.
C
c-----------------------------------------------------------------------
      ITHIN1=N2CORE
      ITHIN3=N2CORE+1
      GO TO 160
c-----------------------------------------------------------------------
C
C     POINTS WILL BE THINNED.
C
c-----------------------------------------------------------------------
C-----IF NO POINTS FOR THINNING SKIP TO END OF THINNING SECTION.
   10 IF(ITHIN2.GT.N2CORE) GO TO 160
c-----------------------------------------------------------------------
C
C     INITIALIZE SIGN OF DERIVATIVE AT BEGINNING OF SECTION.
C
c-----------------------------------------------------------------------
      IF(ISTART.le.0) go to 20
      ISTART=0
      DSIGN=1.0d0
      IF(YOUT(1).GT.YOUT(2)) DSIGN=-1.0d0
c-----------------------------------------------------------------------
C
C     SET UP LOOP TO THIN DATA.
C
c-----------------------------------------------------------------------
C-----SET UP LOOP OVER POINTS TO THIN.
   20 DO 150 M=ITHIN2,N2CORE
      MM1=M-1
      DXC=YOUT(M)-YOUT(MM1)
c-----------------------------------------------------------------------
C
C     KEEP ALL MAXIMA AND MINIMA.
C
c-----------------------------------------------------------------------
C-----PRECEDING POINT WAS MAXIMUM OR MINIMUM IF SIGN OF CHANGE IN
C-----CROSS SECTION HAS REVERSED.
      IF(DXC*DSIGN.ge.0.0d0) go to 30
      DSIGN=-DSIGN
C-----IF ENERGIES OF TWO POINTS ARE THE SAME TREAT AS DISCONTINUITY.
      IF(XOUT(M).LE.XOUT(MM1)) GO TO 50
C-----ENERGY NOT THE SAME. SAVE MAXIMUM OR MINIMUM IF IT HAS NOT
C-----ALREADY BEEN SAVED.
      IF(M.gt.ITHIN3) go to 110
C-----MAXIMUM OR MINIMUM ALREADY SAVED.
c-----------------------------------------------------------------------
C
C     KEEP PRECEDING AND PRESENT POINTS IF SIGN OF CROSS SECTION HAS
C     CHANGED.
C
c-----------------------------------------------------------------------
   30 IF(YOUT(M)*YOUT(MM1).ge.0.0d0) go to 40
C-----IF PRECEDING POINT HAS NOT BEEN KEPT KEEP PRECEDING AND CURRENT
C-----POINTS, OTHERWISE KEEP ONLY CURRENT POINT.
      IF(M.le.ITHIN3) go to 130
      go to 120
c-----------------------------------------------------------------------
C
C     KEEP DISCONTINUITY.
C
c-----------------------------------------------------------------------
C-----IS ENERGY OF TWO POINTS THE SAME.
   40 IF(XOUT(M).GT.XOUT(MM1)) GO TO 80
C-----YES. CHECK FOR SAME CROSS SECTION.
   50 DXC=DABS(DXC)
C-----CHECK FOR BEGINNING OF THINNING INTERVAL.
      IF(M.NE.ITHIN3) GO TO 60
C-----BEGINNING OF INTERVAL (M-1 ALREADY SAVED). IF CROSS SECTIONS ARE,
C-----(1) SAME -SKIP M AND UPDATE INDEX DEFINING M+1 BEGINNING INTERVAL.
C-----(2) DIFFERENT -KEEP POINT M.
      IF(DXC.le.0.0d0) go to 140
      go to 70
C-----NOT BEGINNING OF INTERVAL (M-1 NOT SAVED). IF CROSS SECTIONS ARE,
C-----(1) SAME -KEEP M, SKIP M-1.
C-----(2) DIFFERENT -KEEP POINTS M-1 AND M.
   60 IF(DXC.gt.0.0d0) go to 120
   70 IF(M.le.ITHIN3) go to 130
      go to 120
c-----------------------------------------------------------------------
C
C     KEEP THERMAL POINT AND PRECEDING POINT, IF NOT ALREADY KEPT.
C
c-----------------------------------------------------------------------
C-----NOT FOR MF = 9 OR 10
   80 IF(MFH.EQ.9.OR.MFH.EQ.10) GO TO 90
      IF(XOUT(M).NE.ETHERMAL) GO TO 90
      IF(M.le.ITHIN3) go to 130
      go to 120
c-----------------------------------------------------------------------
C
C     KEEP POINTS THAT CANNOT BE ACCURATELY INTERPOLATED.
C
c-----------------------------------------------------------------------
C-----DEFINE ENERGY INTERVAL BETWEEN CURRENT POINT AND LAST CONVERGED
C-----POINT.
   90 DXN=XOUT(M)-XOUT(ITHIN1)
c-----------------------------------------------------------------------
C
C     DEFINE SLOPE OF STRAIGHT LINE THAT WILL PASS WITHIN THE ALLOWABLE
C     ERROR OF EACH POINT. KEEP ELIMINATING POINTS UNTIL ONE OR MORE
C     POINTS CANNOT BE APPROXIMATED TO WITHIN THE ALLOWABLE ERROR. AT
C     THAT POINT KEEP THE LAST PRECEDING POINT (I.E., KEEP THE LAST
C     POINT THAT PASSED THE TEST).
C
c-----------------------------------------------------------------------
      SLOPE=(YOUT(M)-YOUT(ITHIN1))/DXN
C-----INITIALIZE MAXIMUM AND MINIMUM ALLOWABLE SLOPE AT FIRST POINT OF
C-----INTERVAL.
      IF(M.NE.ITHIN3) GO TO 100
      IF(KERR3.NE.0) CALL ERROK3(XOUT(M))
      DSLOPE=ERRXC3*YOUT(M)/DXN
      SLPMAX=SLOPE+DSLOPE
      SLPMIN=SLOPE-DSLOPE
      GO TO 150
C-----AFTER FIRST POINT OF INTERVAL SEE IF SLOPE TO CURRENT POINT PASSES
C-----WITHIN THE ALLOWABLE ERROR OF ALL PRECEDING POINTS IN CURRENT
C-----INTERVAL.
  100 IF(SLOPE.GT.SLPMAX.OR.SLOPE.LT.SLPMIN) GO TO 110
C-----CAN ELIMINATE CURRENT POINT. UPDATE SLOPE LIMITS.
      IF(KERR3.NE.0) CALL ERROK3(XOUT(M))
      DSLOPE=ERRXC3*YOUT(M)/DXN
      SLP1=SLOPE+DSLOPE
      IF(SLP1.LT.SLPMAX) SLPMAX=SLP1
      SLP2=SLOPE-DSLOPE
      IF(SLP2.GT.SLPMIN) SLPMIN=SLP2
      GO TO 150
C-----NEED TO KEEP LAST PRECEDING POINT (LAST ONE TO PASS TEST).
  110 ITHIN1=ITHIN1+1
      XOUT(ITHIN1)=XOUT(MM1)
      YOUT(ITHIN1)=YOUT(MM1)
C-----RE-DEFINE INDEX TO BEGINNING OF NEXT INTERVAL.
      ITHIN3=M
      GO TO 80
C-----NEED TO KEEP LAST PRECEDING AND CURRENT POINTS.
  120 ITHIN1=ITHIN1+1
      XOUT(ITHIN1)=XOUT(MM1)
      YOUT(ITHIN1)=YOUT(MM1)
C-----NEED TO KEEP CURRENT POINT.
  130 ITHIN1=ITHIN1+1
      XOUT(ITHIN1)=XOUT(M)
      YOUT(ITHIN1)=YOUT(M)
C-----RE-DEFINE INDEX TO BEGINNING OF NEXT INTERVAL.
  140 ITHIN3=M+1
C-----END OF THINNING LOOP.
  150 CONTINUE
C-----TEST FOR END OF SECTION.
  160 IF(MTEND.GT.0) GO TO 230
c-----------------------------------------------------------------------
C
C     NOT THE END OF SECTION. IF CONVERGED POINTS FILL ENTIRE FIRST
C     PAGE PLUS AT LEAST TWO POINTS IN SECOND PAGE (FOR HISTOGRAM
C     LOOK BACK) UNLOAD ONE PAGE TO SCRATCH AND SHIFT ALL INCORE
C     INDICES. OTHERWISE NOTHING TO DO.
C
c-----------------------------------------------------------------------
C-----ELIMINATE ALL POINTS THAT ARE NOT REQUIRED FOR FURTHER THINNING.
      N2OLD=N2CORE
      N2CORE=ITHIN1
      N2P1=N2CORE+1
      N2P2=N2P1+1
C-----IF LAST POINT WAS NOT SAVED, ADD IT TO THE END OF THE ARRAY.
      IF(ITHIN3.GT.N2OLD) GO TO 170
      N2P=ITHIN1+1
      XOUT(N2P)=XOUT(N2OLD)
      YOUT(N2P)=YOUT(N2OLD)
      N2CORE=N2P
      N2P1=N2CORE+1
      N2P2=N2P1+1
C-----TEST FOR FULL PAGE + 2.
  170 IF(ITHIN1.LE.NP1P1) GO TO 200
C-----OUTPUT PAGE TO SCRATCH. REWIND SCRATCH BEFORE FIRST WRITE
      IF(N2SCR.LE.0.AND.IMUSED.GT.0) REWIND ISCR
C-----OUTPUT ONE PAGE OF LINEARIZED DATA AND INCREASE POINT COUNT
      WRITE(ISCR) XPAGE1,YPAGE1
      IMUSED=1
      N2SCR=N2SCR+NPAGE
      IF(MONITR.LE.0) GO TO 180
      ES1=XOUT(1)
      ES2=XOUT(NPAGE)
      CALL OUT9(ES1,FIELD(1,1))
      CALL OUT9(ES2,FIELD(1,2))
      WRITE(OUTP,280) N2SCR,((FIELD(M,KK),M=1,11),KK=1,2)
      WRITE(*   ,280) N2SCR,((FIELD(M,KK),M=1,11),KK=1,2)
C-----MOVE REMAINING CONVERGED POINTS FORWARD IN CORE AND RE-DEFINE
C-----ALL INDICES.
  180 LL=0
      DO 190 LLL=NP1P1,N2CORE
      LL=LL+1
      XOUT(LL)=XOUT(LLL)
      YOUT(LL)=YOUT(LLL)
  190 CONTINUE
      ITHIN1=ITHIN1-NPAGE
      N2CORE=N2CORE-NPAGE
      N2P1=N2CORE+1
      N2P2=N2CORE+2
C-----DEFINE INDICES TO ENERGY INTERVAL TO BE USED THE NEXT TIME THAT
C-----THIS ROUTINE IS CALLED (ITHIN2 ALWAYS REFERS TO THE NEXT POINT
C-----THAT WILL BE LINEARIZED. ITHIN3 SHOULD REFER TO THIS POINT TOO
C-----IF LAST POINT WAS SAVED. IF NOT SET ITHIN3 TO PREVENT INITIALIZING
C-----SLOPES THE NEXT TIME THAT THIS ROUTINE IS CALLED).
  200 ITHIN2=N2CORE+1
      IF(ITHIN3.GT.N2OLD) GO TO 210
      ITHIN3=0
      GO TO 220
  210 ITHIN3=ITHIN2
  220 RETURN
c-----------------------------------------------------------------------
C
C     END OF SECTION. SAVE LAST POINT. IF ALL DATA IS CORE RESIDENT
C     LEAVE IT THERE. OTHERWISE MOVE DATA TO SCRATCH AND POSITION
C     SCRATCH TO BE READ.
C
c-----------------------------------------------------------------------
C-----IF LAST POINT WAS NOT SAVED, SAVE IT NOW.
  230 IF(ITHIN3.GT.N2CORE) GO TO 240
      ITHIN1=ITHIN1+1
      XOUT(ITHIN1)=XOUT(N2CORE)
      YOUT(ITHIN1)=YOUT(N2CORE)
C-----IF DATA ALREADY ON SCRATCH COPY REMAINING DATA TO SCRATCH (IF
C-----THERE ARE LESS THAN TWO PAGES OF DATA, SECTION WILL BE IN CORE)
  240 IF(N2SCR.LE.0) GO TO 270
      WRITE(ISCR) XPAGE1,YPAGE1
      IF(MONITR.LE.0) GO TO 250
      NPOUT=NPAGE
      IF(ITHIN1.LT.NPAGE) NPOUT=ITHIN1
      ES1=XOUT(1)
      ES2=XOUT(NPOUT)
      N2SCRP=N2SCR+NPOUT
      CALL OUT9(ES1,FIELD(1,1))
      CALL OUT9(ES2,FIELD(1,2))
      WRITE(OUTP,280) N2SCRP,((FIELD(M,KK),M=1,11),KK=1,2)
      WRITE(*   ,280) N2SCRP,((FIELD(M,KK),M=1,11),KK=1,2)
  250 IF(ITHIN1.LE.NPAGE) GO TO 260
      WRITE(ISCR) XPAGE2,YPAGE2
      IF(MONITR.LE.0) GO TO 260
      ES1=XOUT(NP1P1)
      ES2=XOUT(ITHIN1)
      N2SCRP=N2SCR+ITHIN1
      CALL OUT9(ES1,FIELD(1,1))
      CALL OUT9(ES2,FIELD(1,2))
      WRITE(OUTP,280) N2SCRP,((FIELD(M,KK),M=1,11),KK=1,2)
      WRITE(*   ,280) N2SCRP,((FIELD(M,KK),M=1,11),KK=1,2)
C-----DEFINE NUMBER OF POINTS ON SCRATCH AND INDICATE THAT NO POINTS
C-----REMAIN IN CORE.
  260 N2SCR=N2SCR+ITHIN1
      ITHIN1=0
C-----END FILE AND POSITION SCRATCH TO BE READ
      END FILE ISCR
      REWIND ISCR
C-----DEFINE FINAL POINT TOTAL FOR SECTION
  270 N2TOT=N2SCR+ITHIN1
      RETURN
  280 FORMAT(34X,I8,11A1,' to',11A1,' eV Finished')
      END
      SUBROUTINE XYPAGE(X,Y,N)
C=======================================================================
C
C     LOGICAL PAGING SYSTEM FOR X AND Y ARRAYS. NOTE THAT THIS ROUTINE
C     CAN ONLY BE USED TO ADVANCE FORWARD THROUGH AN ENDF/B
C     SECTION, SINCE IT READS THE DATA DIRECTLY FROM THE ENDF/B
C     DATA FILE A PAGE AT A TIME AND DOES NOT SAVE PAST PAGES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,Q,L1,L2,N1,N2IN,MAT,MF,MT
      COMMON/OLDTAB/IXYLOW,IXYHI,LEFT
      COMMON/PAGER/NPAGE,NPAGE2,NP1P1,NP2M1
      INCLUDE 'linear.h'
C-----INSURE THAT INDEX IS IN LEGAL RANGE.
      IF(N.le.IXYLOW) go to 10
      IF(N.le.N2IN) go to 20
C-----INDEX ERROR.
   10 WRITE(OUTP,40) N,MATH,MFH,MTH
      X=0.0d0
      Y=0.0d0
      RETURN
C-----DETERMINE IF REQUIRED POINT IS IN CORE YET.
   20 IF(N.le.IXYHI) go to 30
C-----NO. READ NEXT PAGE INTO CORE.
      NN=NPAGE
      IF(LEFT.LT.NN) NN=LEFT
      LEFT=LEFT-NN
      IXYLOW=IXYHI
      IXYHI=IXYHI+NN
      CALL POINTI(XIN,YIN,NN)
c-----Save Upper energy and value
      CALL MAXIE2(XIN(NN),YIN(NN))
C-----DEFINE INDEX RELATIVE TO BEGINNING OF IN CORE TABLE AND
C-----RETURN VALUE
   30 INDEX=N-IXYLOW
      X=XIN(INDEX)
      Y=YIN(INDEX)
      RETURN
   40 FORMAT(' Paging Index Error...Index=',I5,'MAT/MF/MT=',I5,I3,I4)
      END
      SUBROUTINE COPOUT
C=======================================================================
C
C     COPY LINEARIZED SECTION TO OUTPUT FILE IN ENDF/B FORMAT. IF
C     LESS THAN MAXP1 POINTS IN SECTION THEY ARE CORE RESIDENT.
C     OTHERWISE THEY ARE READ FROM SCRATCH FILE (ISCR) A PAGE AT
C     A TIME AND WRITTEN OUT.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*1 ZABCD,FIELD
      CHARACTER*4 FMTHOL
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/UNITS/ISCR
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,Q,L1,L2,N1,N2IN,MAT,MF,MT
      COMMON/NEWTAB/N2CORE,N2SCR,N2TOT,N2P1,N2P2
      COMMON/COUNTS/MATNOW,MFNOW,MATIN,MATOUT,N2TOTI,N2TOTO
      COMMON/WHATZA/IZA
      COMMON/PAGER/NPAGE,NPAGE2,NP1P1,NP2M1
      COMMON/FLAGS/MINUS3,IMPLUS
      COMMON/TEMPO/TEMP3,IVERSE
      COMMON/HOLFMT/FMTHOL
      COMMON/LISCOM/LISO
      COMMON/FIELDC/FIELD(11,6)
      INCLUDE 'linear.h'
      DIMENSION NBTO(1),INTO(1),ZABCD(12)
      DATA INTO/2/
c-----------------------------------------------------------------------
C
C     OUTPUT TAB1 LEADER LINE AND INTERPOLATION LAW (LINEAR-LINEAR).
C
c-----------------------------------------------------------------------
C-----OUTPUT TAB1 LEAD LINE (SECTION HEAD LINE OUTPUT IN MAIN)
      N1XX=1
      CALL CARDO(C1,Q,L1,L2,N1XX,N2TOT)
C-----OUTPUT INTERPOLATION LAW.
      NBTO(1)=N2TOT
      CALL TERPO(NBTO,INTO,1)
c-----2020/3/20 - Added Target Isomer Flag
      CALL ZAHOLM(IZA,LISO,ZABCD)
c-----------------------------------------------------------------------
C
C     DEFINE TEMPERATURE. FOR ENDF/B-V AND EARLIER VERSIONS C1 OF THE
C     TAB1 LEAD LINE IS EITHER THE TEMPERATURE (L2=0) OR THE Q-VALUE
C     CORRESPONDING TO THE REACTION WITH MT=L2. IN THE LATTER CASE
C     ASSUME THE SAME TEMPERATURE AS FOR THE TOTAL. FOR THE ENDF/B-6
C     FORMAT THE TEMPERATURE OF THE FILE 3 CROSS SECTIONS HAS ALREADY
C     BEEN DEFINE FROM FILE 1 (TEMP3).
C
c-----------------------------------------------------------------------
C-----FOR PHOTON DATA OMIT TEMPERATURE AND Q FROM OUTPUT REPORT
      IF(MFH.EQ.3) GO TO 10
      WRITE(OUTP,110) ZABCD,MATH,MFH,MTH,FMTHOL,N2IN,N2TOT
      WRITE(*   ,110) ZABCD,MATH,MFH,MTH,FMTHOL,N2IN,N2TOT
      GO TO 50
C-----TEST FOR ENDF/B-6 FORMAT.
   10 IF(IVERSE.LT.6) GO TO 20
C-----ENDF/B-6 FORMAT. USE TEMPERATURE FROM FILE 1.
      TEMP=TEMP3
      GO TO 40
C-----NOT ENDF/B-VI. USE C1 FIELD OR TEMPERATURE FROM TOTAL CROSS
C-----SECTION.
   20 IF(L2.LE.0)  GO TO 30
      TEMP=TEMP3
      GO TO 40
   30 TEMP=C1
      IF(MTH.EQ.1) TEMP3=TEMP
   40 CALL OUT9(TEMP,FIELD(1,1))
      CALL OUT9(Q   ,FIELD(1,2))
      WRITE(OUTP,100) ZABCD,MATH,MFH,MTH,FMTHOL,
     1 ((FIELD(M,L),M=1,11),L=1,2),N2IN,N2TOT
      WRITE(*   ,100) ZABCD,MATH,MFH,MTH,FMTHOL,
     1 ((FIELD(M,L),M=1,11),L=1,2),N2IN,N2TOT
C-----INCREMENT TOTAL POINTS READ AND WRITTEN.
   50 MATIN=MATIN+N2IN
      MATOUT=MATOUT+N2TOT
c-----------------------------------------------------------------------
C
C     OUTPUT DATA EITHER DIRECTLY FROM CORE OR FROM SCRATCH TWO PAGES
C     AT A TIME.
C
c-----------------------------------------------------------------------
C-----INITIALIZE NEGATIVE CROSS SECTION FLAG OFF.
      MINUS3=0
      IMPLUS=0
C-----IS DATA CORE RESIDENT OR ON SCRATCH.
      IF(N2SCR.GT.0) GO TO 60
C-----CORE RESIDENT. OUTPUT ALL OF IT.
      CALL POINTO(XOUT,YOUT,N2TOT)
      GO TO 90
C-----ON SCRATCH. SET UP LOOP TO COPY FROM SCRATCH TO CORE TO OUTPUT
C-----FILE TWO PAGES AT A TIME.
   60 ITHINX=NPAGE2
      LOOP=1
C-----POSITION UP TO TWO PAGES OF DATA IN CORE.
   70 READ(ISCR) XPAGE1,YPAGE1
      IF(N2SCR.LE.NPAGE) GO TO 80
      READ(ISCR) XPAGE2,YPAGE2
C-----DEFINE NUMBER OF POINTS IN CORE AND REMAINING ON SCRATCH.
   80 IF(ITHINX.GT.N2SCR) ITHINX=N2SCR
      N2SCR=N2SCR-NPAGE2
C-----OUTPUT POINTS.
      CALL POINTO(XOUT,YOUT,ITHINX)
      LOOP=LOOP+NPAGE2
      IF(LOOP.LE.N2TOT) GO TO 70
C-----ADD SEND LINE - NOT FOR MF = 9 OR 10.
   90 IF(MFH.NE.9.AND.MFH.NE.10) CALL OUTS(MATH,MFH)
C-----IF ANY OUTPUT CROSS SECTIONS ARE NEGATIVE PRINT WARNING MESSAGE.
      IF(MINUS3.GT.0) WRITE(OUTP,120) MINUS3
      IF(MINUS3.GT.0) WRITE(*   ,120) MINUS3
C-----PRINT WARNING IF CROSS SECTION IS NOT POSITIVE AT ANY ENERGY.
      IF(IMPLUS.LE.0) WRITE(OUTP,130)
      IF(IMPLUS.LE.0) WRITE(*   ,130)
      RETURN
  100 FORMAT(2X,12A1,I5,I4,I4,3X,A2,3X,2(1X,11A1),2I9)
  110 FORMAT(2X,12A1,I5,I4,I4,3X,A2,3X,24X,2I9)
  120 FORMAT(21X,'WARNING - Above Cross Section Negative at',I6,
     1 ' Energies')
  130 FORMAT(21X,'WARNING - Above Cross Sections NOT',
     1 ' Positive at Any Energy')
      END
      SUBROUTINE READIN
C=======================================================================
C
C     READ AND CHECK ALL INPUT PARAMETERS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*1 FIELD
      CHARACTER*4 MESS1,MESS2
      CHARACTER*72 NAMEIN,NAMEOUT
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/IOSTATUS/ISTAT1,ISTAT2
      COMMON/MATZA/MODGET,NMATZA,MATMIN(101),MFMIN(101),MTMIN(101),
     1 MATMAX(101),MFMAX(101),MTMAX(101)
      COMMON/OKERR3/ENER3(21),ER3(21),KERR3,MAXER3
      COMMON/ERRORCOM/ERRXC3,ERMINMAX,ERMT2,ERMT102,ERSOFT,XCLOW
      COMMON/IWATCH/MONITR
      COMMON/COMCOM/NOCOMENT
      COMMON/SLIM/ISTART,NOTHIN,ITHIN1,ITHIN2,ITHIN3,MTEND
      COMMON/FIELDC/FIELD(11,6)
      COMMON/NAMEX/NAMEIN,NAMEOUT
      DIMENSION MESS1(2),MESS2(2)
C-----DEFINE DEFAULT OPTION FOR ALLOWABLE ERROR (CURRENTLY 0.1 PERCENT)
      DATA ERRMIN/1.0D-03/
C-----2021/3/22 - Minimum Cross Sectiom is no longer an input option.
      DATA XCINP /1.0D-30/
C-----DEFINE LABELS TO INDICATE RETRIEVAL BY ZA OR MAT.
      DATA MESS1/' MAT','  ZA'/
C-----DEFINE LABELS TO INDICATE WHETHER MONITOR MODE IS OFF OR ON.
      DATA MESS2/' Off','  On'/
C-----DEFINE MINIMUM ENERGY SPACING FOR 9 DIGIT CALCULATIONS AND OUTPUT.
c-----------------------------------------------------------------------
C
C     READ, TEST AND LIST
C     (1) MAT OR ZA SELECTOR
C     (2) 6/9 DIGIT OUTPUT SELECTOR (NO LONGER AN OPTION. ALWAYS 9)
C     (3) MINIMUM CROSS SECTION OF INTEREST
C     (4) KEEP ORIGINAL POINTS OPTION
C
c-----------------------------------------------------------------------
      IF(ISTAT1.EQ.1) GO TO 20
      READ(INP,10,END=20,ERR=20)
     1 MODGET,MONITR,(FIELD(KK,1),KK=1,11),NOTHIN,NOCOMENT
   10 FORMAT(2I11,11A1,2I11)
      GO TO 30
C-----DEFINE DEFAULT VALUES
   20 ISTAT1   = 1
      MODGET   = 0
      MONITR   = 0
c-----2020/12/26 - Changed from 0.
      XCLOW    = XCINP
      NOTHIN   = 1
      NOCOMENT = 0
      GO TO 40
C-----CONVERT MINIMUM CROSS SECTION FROM CHARACTER TO FLOATING POINT.
   30 CALL IN9(XCLOW,FIELD(1,1))
c-----2021/3/22 - No longer an input option
      XCLOW = XCINP
   40 IF(MODGET.LE.0) MODGET=0
      IF(MODGET.GT.0) MODGET=1
      IF(MONITR.LE.0) MONITR=0
      IF(MONITR.GT.0) MONITR=1
      IF(NOTHIN.LE.0) NOTHIN=0
      IF(NOTHIN.GT.0) NOTHIN=1
      WRITE(OUTP,310) MESS1(MODGET+1),MESS2(MONITR+1)
      WRITE(*   ,310) MESS1(MODGET+1),MESS2(MONITR+1)
c-----Minimum Cross Section (no longer an input option)
      CALL OUT9(XCLOW,FIELD(1,1))
      WRITE(OUTP,320) (FIELD(M,1),M=1,11)
      WRITE(*   ,320) (FIELD(M,1),M=1,11)
      IF(NOTHIN.EQ.0) WRITE(OUTP,330)
      IF(NOTHIN.GT.0) WRITE(OUTP,340)
      IF(NOTHIN.EQ.0) WRITE(*   ,330)
      IF(NOTHIN.GT.0) WRITE(*   ,340)
      IF(NOCOMENT.NE.0) WRITE(OUTP,350)
      IF(NOCOMENT.NE.0) WRITE(*   ,350)
c-----------------------------------------------------------------------
C
C     READ FILENAMES - IF BLANK USE STANDARD FILENAMES
C
c-----------------------------------------------------------------------
C-----INPUT DATA.
      IF(ISTAT1.EQ.1) GO TO 60
      READ(INP,50,END=60,ERR=60) NAMEIN
   50 FORMAT(A72)
      IF(NAMEIN.EQ.' ') NAMEIN = 'ENDFB.IN'
C-----OUTPUT DATA.
      READ(INP,50,END=70,ERR=70) NAMEOUT
      IF(NAMEOUT.EQ.' ') NAMEOUT = 'ENDFB.OUT'
      GO TO 80
C-----USE DEFAULT FILENAMES
   60 NAMEIN  = 'ENDFB.IN'
   70 NAMEOUT = 'ENDFB.OUT'
      ISTAT1 = 1
C-----PRINT FINAL FILENAMES
   80 WRITE(OUTP,90) NAMEIN,NAMEOUT
      WRITE(*   ,90) NAMEIN,NAMEOUT
   90 FORMAT(2X,78('-')/
     1 '  ENDF/B Input and Output Data Filenames'/2X,A72/
     2 2X,A72)
c-----------------------------------------------------------------------
C
C     OPEN ENDF/B DATA FILES
C
c-----------------------------------------------------------------------
      CALL FILIO2
c-----------------------------------------------------------------------
C
C     TERMINATE IF ERROR OPENING ENDF/B DATA FILE
C
c-----------------------------------------------------------------------
      IF(ISTAT2.EQ.1) THEN
      WRITE(OUTP,100) NAMEIN
      WRITE(   *,100) NAMEIN
  100 FORMAT(//' ERROR - Opening ENDF/B data file'/1X,A72//)
      CALL ENDERROR
      ENDIF
c-----------------------------------------------------------------------
C
C     READ SELECTION RANGES (EITHER MAT OR ZA). IF MINIMUM AND MAXIMUM
C     OF FIRST REQUEST ARE BOTH ZERO SET LIMITS TO RETRIEVE ALL DATA.
C     IF MAXIMUM OF REQUEST IS LESS THAN MINIMUM SET MAXIMUM EQUAL TO
C     MINIMUM (I.E., ONLY RETRIEVE ONE MAT OR ZA FOR THIS REQUEST,
C     NAMELY THAT CORRESPONDING TO THE MAT OR ZA SPECIFIED FOR THE
C     LOWER LIMIT).
C
c-----------------------------------------------------------------------
      IF(MODGET.EQ.0) WRITE(OUTP,360)
      IF(MODGET.EQ.1) WRITE(OUTP,370)
      IF(MODGET.EQ.0) WRITE(*   ,360)
      IF(MODGET.EQ.1) WRITE(*   ,370)
      IF(ISTAT1.EQ.1) GO TO 120
      READ(INP,110,END=120,ERR=120)
     1 MATMIN(1),MFMIN(1),MTMIN(1),MATMAX(1),MFMAX(1),MTMAX(1)
  110 FORMAT(I6,I2,I3,I6,I2,I3)
      GO TO 130
C-----DEFINE DEFAULT VALUES
  120 ISTAT1    = 1
      MATMIN(1) = 0
      MFMIN(1)  = 0
      MTMIN(1)  = 0
      MATMAX(1) = 0
      MFMAX(1)  = 0
      MTMAX(1)  = 0
c-----Test and define defaults.
  130 IF(MATMIN(1).LE.0) MATMIN(1)=0
      IF(MFMIN (1).LE.0) MFMIN (1)=0
      IF(MTMIN (1).LE.0) MTMIN (1)=0
      IF(MATMIN(1).GT.0.OR.MFMIN(1).GT.0.OR.MTMIN(1).GT.0.OR.
     1   MATMAX(1).GT.0.OR.MFMAX(1).GT.0.OR.MTMAX(1).GT.0) GO TO 140
      MATMAX(1)=9999
      MFMAX (1)=99
      MTMAX (1)=999
      MODGET=0
      WRITE(OUTP,390) MATMIN(1),MFMIN(1),MTMIN(1),MATMAX(1),MFMAX(1),
     1 MTMAX(1)
      WRITE(*   ,390) MATMIN(1),MFMIN(1),MTMIN(1),MATMAX(1),MFMAX(1),
     1 MTMAX(1)
      NMATZA=2
      GO TO 170
  140 IF(MATMAX(1).LT.MATMIN(1)) MATMAX(1)=MATMIN(1)
      IF(MATMAX(1).LE.0.AND.MODGET.EQ.0) MATMAX(1)=9999
      IF(MATMAX(1).LE.0.AND.MODGET.NE.0) MATMAX(1)=999999
      IF(MFMAX(1).LE.0) MFMAX(1)=99
      IF(MTMAX(1).LE.0) MTMAX(1)=999
      WRITE(OUTP,380) MATMIN(1),MFMIN(1),MTMIN(1),MATMAX(1),MFMAX(1),
     1 MTMAX(1)
      WRITE(*   ,380) MATMIN(1),MFMIN(1),MTMIN(1),MATMAX(1),MFMAX(1),
     1 MTMAX(1)
      DO 150 NMATZA=2,101
      IF(ISTAT1.EQ.1) GO TO 170
      READ(INP,110,END=160,ERR=160)
     1 MATMIN(NMATZA),MFMIN(NMATZA),MTMIN(NMATZA),
     2 MATMAX(NMATZA),MFMAX(NMATZA),MTMAX(NMATZA)
      IF(MATMIN(NMATZA).LE.0.AND.MFMIN (NMATZA).LE.0.AND.
     1    MTMIN(NMATZA).LE.0.AND.MATMAX(NMATZA).LE.0.AND.
     2    MFMAX(NMATZA).LE.0.AND.MTMAX (NMATZA).LE.0) GO TO 170
c-----Test and define defaults.
      IF(MATMIN(NMATZA).LE.0) MATMIN(NMATZA)=0
      IF(MFMIN (NMATZA).LE.0) MFMIN (NMATZA)=0
      IF(MTMIN (NMATZA).LE.0) MTMIN (NMATZA)=0
      IF(MATMAX(NMATZA).LT.MATMIN(NMATZA)) MATMAX(NMATZA)=MATMIN(NMATZA)
      IF(MATMAX(NMATZA).LE.0.AND.MODGET.EQ.0) MATMAX(NMATZA)=9999
      IF(MATMAX(NMATZA).LE.0.AND.MODGET.NE.0) MATMAX(NMATZA)=999999
      IF(MFMAX(NMATZA).LE.0) MFMAX(NMATZA)=99
      IF(MTMAX(NMATZA).LE.0) MTMAX(NMATZA)=999
      WRITE(OUTP,380) MATMIN(NMATZA),MFMIN(NMATZA),MTMIN(NMATZA),
     1 MATMAX(NMATZA),MFMAX(NMATZA),MTMAX(NMATZA)
      WRITE(*   ,380) MATMIN(NMATZA),MFMIN(NMATZA),MTMIN(NMATZA),
     1 MATMAX(NMATZA),MFMAX(NMATZA),MTMAX(NMATZA)
  150 CONTINUE
      GO TO 270
  160 ISTAT1 = 1
  170 NMATZA=NMATZA-1
c-----------------------------------------------------------------------
C
C     READ AND LIST DATA ERROR LAW. ENERGIES MUST BE IN ASCENDING
C     ORDER. IF ENERGY AND ERROR OF FIRST POINT ARE ZERO ASSUME
C     ENERGY INDEPENDENT ERROR LAW USING STANDARD ERROR OPTION
C     (CURRENTLY 0.1 PER-CENT). ENERGIES MUST BE IN ASCENDING ENERGY
C     ORDER. IF ANY ERROR IS NOT POSITIVE USE STANDARD OPTION.
C
c-----------------------------------------------------------------------
      IF(ISTAT1.EQ.1) GO TO 190
c-----2017/5/6 - Changed all floating point to character
      READ(INP,180,END=190,ERR=190) ((FIELD(j,k),j=1,11),k=1,2)
  180 FORMAT(22A1)
      CALL IN9(ENER3(1),FIELD(1,1))
      CALL IN9(ER3  (1),FIELD(1,2))
c-----2017/5/6 - Changed all floating point to character
      GO TO 200
  190 ISTAT1   = 1
      ENER3(1) = 0.0d0
      ER3(1)   = 0.0d0
  200 CALL OUT9(ENER3(1),FIELD(1,1))
      IF(ER3(1).LE.0.0d0) GO TO 210
      PERCNT=100.0d0*ER3(1)
      CALL OUT9(ER3(1),FIELD(1,2))
      WRITE(OUTP,440) ((FIELD(M,I),M=1,11),I=1,2),PERCNT
      WRITE(*   ,440) ((FIELD(M,I),M=1,11),I=1,2),PERCNT
      GO TO 220
  210 ER3(1)=ERRMIN
      PERCNT=100.0d0*ERRMIN
      CALL OUT9(ER3(1),FIELD(1,2))
      WRITE(OUTP,450) ((FIELD(M,I),M=1,11),I=1,2),PERCNT
      WRITE(*   ,450) ((FIELD(M,I),M=1,11),I=1,2),PERCNT
      IF(ENER3(1).GT.0.0d0) GO TO 220
      MAXER3=2
      GO TO 260
  220 DO 250 MAXER3=2,21
      IF(ISTAT1.EQ.1) GO TO 260
c-----2017/5/6 - Changed all floating point to character
      READ(INP,180,END=190,ERR=190) ((FIELD(j,k),j=1,11),k=1,2)
      CALL IN9(ENER3(MAXER3),FIELD(1,1))
      CALL IN9(ER3  (MAXER3),FIELD(1,2))
c-----2017/5/6 - Changed all floating point to character
      IF(ENER3(MAXER3).LE.0.0d0.AND.ER3(MAXER3).LE.0.0d0) GO TO 260
      CALL OUT9(ENER3(MAXER3),FIELD(1,1))
      IF(ER3(MAXER3).LE.0.0d0) GO TO 230
      PERCNT=100.0d0*ER3(MAXER3)
      CALL OUT9(ER3(MAXER3),FIELD(1,2))
      WRITE(OUTP,410) ((FIELD(M,I),M=1,11),I=1,2),PERCNT
      WRITE(*   ,410) ((FIELD(M,I),M=1,11),I=1,2),PERCNT
      GO TO 240
  230 ER3(MAXER3)=ERRMIN
      PERCNT=100.0d0*ERRMIN
      CALL OUT9(ER3(MAXER3),FIELD(1,2))
      WRITE(OUTP,420) ((FIELD(M,I),M=1,11),I=1,2),PERCNT
      WRITE(*   ,420) ((FIELD(M,I),M=1,11),I=1,2),PERCNT
  240 IF(ENER3(MAXER3).LT.ENER3(MAXER3-1)) GO TO 300
  250 CONTINUE
      GO TO 280
C-----DEFINE SIZE OF ERROR LAW (MAXER3), TYPE OF ERROR LAW (KERR3=0 -
C-----CONSTANT, =1 - ENERGY DEPENDENT). INITIALIZE ERROR LAW INDICES
C-----AND CONSTANT VALUE.
  260 MAXER3=MAXER3-1
      KERR3=0
      IF(MAXER3.GT.1) KERR3=1
c-----2020/12/29 - changed (1) to MAXER3
      ERRXC3=ER3(MAXER3)
c-----2020/12/31 - ALL uncertainty parameters
      CALL SETERROR(1) ! 1 = LINEAR
      RETURN
c-----------------------------------------------------------------------
C
C     ERROR MESSAGE SECTION. PRINT ERROR IN INPUT MESSAGE AND TERMINATE.
C
c-----------------------------------------------------------------------
C-----OVER 100 MAT OR ZA RANGES.
  270 WRITE(OUTP,400)
      WRITE(*   ,400)
      CALL ENDERROR
C-----OVER 20 ENTRIES IN ERROR LAW.
  280 WRITE(OUTP,430)
      WRITE(*   ,430)
  290 CALL ENDERROR
C-----ERROR LAW ENERGIES NOT IN ASCENDING ORDER.
  300 WRITE(OUTP,460)
      WRITE(*   ,460)
      GO TO 290
  310 FORMAT(
     1 '  Retrieval Criteria-----------',7X,A4/
     1 '  Monitor Mode-----------------',7X,A4)
  320 FORMAT('  Minimum Cross Section--------',11A1,
     1 ' (No longer an Input Option)')
  330 FORMAT('  Keep Evaluated Data Points---         No')
  340 FORMAT('  Keep Evaluated Data Points---        Yes')
  350 FORMAT('  Add Comments to MF/MT=1/451--         No')
  360 FORMAT(2X,78('-')/'  Requested Ranges'/2X,78('-')/
     1 '       Minimum       Maximum   '/
     2 '     MAT MF  MT    MAT MF  MT'/2X,78('-'))
  370 FORMAT(2X,78('-')/'  Requested Ranges'/2X,78('-')/
     1 '       Minimum       Maximum   '/
     2 '      ZA MF  MT     ZA MF  MT'/2X,78('-'))
  380 FORMAT(2X,I6,I3,I4,I7,I3,I4)
  390 FORMAT(2X,I6,I3,I4,I7,I3,I4,' (Default Option)')
  400 FORMAT('  Over 100 Ranges----Execution Terminated')
  410 FORMAT(1X,11A1,1X,11A1,F11.4)
  420 FORMAT(1X,11A1,1X,11A1,F11.4,' (Default Option)')
  430 FORMAT('  Over 20 Ranges----Execution Terminated')
  440 FORMAT(2X,78('-')/'  Allowable Uncertainty'/2X,78('-')/
     1 6X,'Energy',1X,'Uncertainty',3X,'per-cent'/2X,78('-')/
     2 1X,11A1,1X,11A1,F11.4)
  450 FORMAT(2X,78('-')/'  Allowable Uncertainty'/2X,78('-')/
     1 6X,'Energy',1X,'Uncertainty',3X,'per-cent'/2X,78('-')/
     2 1X,11A1,1X,11A1,F11.4,' (Default Option)')
  460 FORMAT('  Energies MUST be in Ascending Order----',
     1 'Execution Terminated')
      END
      SUBROUTINE NEXTMT
C=======================================================================
C
C     FIND NEXT REQUESTED MATERIAL BASED EITHER ON ZA OR MAT.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*4 FMTHOL
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/MATZA/MODGET,NMATZA,MATMIN(101),MFMIN(101),MTMIN(101),
     1 MATMAX(101),MFMAX(101),MTMAX(101)
      COMMON/COUNTS/MATNOW,MFNOW,MATIN,MATOUT,N2TOTI,N2TOTO
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/WHATZA/IZA
      COMMON/HOLFMT/FMTHOL
      COMMON/TEMPO/TEMP3,IVERSE
      DIMENSION IZAMIN(101),IZAMAX(101)
      EQUIVALENCE (MATMIN(1),IZAMIN(1)),(MATMAX(1),IZAMAX(1))
C-----READ NEXT LINE AND CHECK FOR END OF ENDF/B TAPE.
   10 CALL CONTI
      IF(MTH.gt.0) go to 20
      IF(MATH.lt.0) go to 90
      go to 10
C-----DEFINE FIXED POINT ZA.
   20 IZA=C1H
C-----COMPARE MAT OR ZA TO SELECTION CRITERIA.
      LOW=0
      IF(MODGET.NE.0) LOW=1
C-----INITIALIZE TO SKIP MAT.
      IWAY=1
      DO 80 IMATZA=1,NMATZA
      IF(MODGET.NE.0) GO TO 30
C-----TEST MAT RANGE.
      IF(MATH.lt.MATMIN(IMATZA)) go to 70
      IF(MATH.eq.MATMIN(IMATZA)) go to 40
      IF(MATH.le.MATMAX(IMATZA)) go to 40
      go to 80
C-----TEST ZA RANGE.
   30 IF(IZA.lt.IZAMIN(IMATZA)) go to 80
      IF(IZA.eq.IZAMIN(IMATZA)) go to 50
      IF(IZA.le.IZAMAX(IMATZA)) go to 50
      go to 80
C-----INDICATE IN REQUESTED MAT RANGE.
   40 LOW=1
C-----MAT OR ZA REQUESTED. RESET TO SKIP MF (ONLY IF NOT ALREADY RESET
C-----TO ONLY SKIP SECTION).
   50 IF(IWAY.LT.2) IWAY=2
C-----TEST MF RANGE.
      IF(MFH.lt.MFMIN(IMATZA)) go to 80
      IF(MFH.eq.MFMIN(IMATZA)) go to 60
      IF(MFH.gt.MFMAX(IMATZA)) go to 80
C-----MAT/MF OR ZA/MF REQUESTED. RESET TO SKIP MT.
   60 IWAY=3
C-----TEST MT RANGE.
      IF(MTH.lt.MTMIN(IMATZA)) go to 80
      IF(MTH.eq.MTMIN(IMATZA)) go to 110
      IF(MTH.le.MTMAX(IMATZA)) go to 110
      go to 80
C-----INDICATE BELOW REQUESTED MAT RANGE. MORE DATA TO READ.
   70 LOW=1
   80 CONTINUE
C-----THIS SECTION HAS NOT BEEN REQUESTED. IF BEYOND RANGE OF ALL MAT
C-----REQUESTS RUN IS COMPLETED. IF NOT SKIP TO NEXT SECTION.
      IF(LOW.LE.0) GO TO 90
C-----SKIP MAT, MF OR MT.
      IF(IWAY.EQ.1) CALL SKIPM
      IF(IWAY.EQ.2) CALL SKIPF
      IF(IWAY.EQ.3) CALL SKIPS
      GO TO 10
c-----------------------------------------------------------------------
C
C     END OF RUN. IF ANY DATA OUTPUT ADD FEND AND MEND.
C
c-----------------------------------------------------------------------
   90 IF(MATNOW.LE.0) GO TO 100
C-----ADD FEND AND MEND LINES
      CALL OUTF(MATNOW)
      CALL OUTM
C-----WRITE POINT TOTAL FOR LAST MAT AND ADD TO TAPE TOTALS.
      IF(MATIN.LE.0.AND.MATOUT.LE.0) GO TO 100
      WRITE(OUTP,140) MATIN,MATOUT
      WRITE(*   ,140) MATIN,MATOUT
c-----Check MT table for MAT
      CALL MAXIE3(1)
C-----PRINT TIME
      CALL TIMEMAT
      N2TOTI=N2TOTI+MATIN
      N2TOTO=N2TOTO+MATOUT
C-----RETURN NEGATIVE MATH AS END OF RUN INDICATOR.
  100 MATH=-1
      MFH=0
      MTH=0
      NOSEQ=0
      MATIN=0
      MATOUT=0
      RETURN
c-----------------------------------------------------------------------
C
C     THIS SECTION REQUESTED. IF NEW MF OR MAT ADD FEND AND MEND LINES
C     AS REQUIRED.
C
c-----------------------------------------------------------------------
  110 IF(MATNOW.LE.0) GO TO 120
      IF(MATNOW.EQ.MATH.AND.MFNOW.EQ.MFH) GO TO 130
C-----ADD FEND LINE.
      CALL OUTF(MATNOW)
      IF(MATNOW.EQ.MATH) GO TO 130
C-----ADD MEND LINE.
      CALL OUTM
C-----WRITE POINT TOTAL FOR LAST MAT AND ADD TO TAPE TOTALS.
      IF(MATIN.LE.0.AND.MATOUT.LE.0) GO TO 120
      WRITE(OUTP,140) MATIN,MATOUT
      WRITE(*   ,140) MATIN,MATOUT
c-----Check MT table for MAT
      CALL MAXIE3(1)
C-----PRINT TIME
      CALL TIMEMAT
      N2TOTI=N2TOTI+MATIN
      N2TOTO=N2TOTO+MATOUT
c-----------------------------------------------------------------------
C
C     START OF NEW MAT.
C
c-----------------------------------------------------------------------
C-----INITIALIZE SEQUENCE NUMBER AND POINT COUNTS FOR NEW MAT.
  120 NOSEQ=1
      MATIN=0
      MATOUT=0
C-----BLANK OUTPUT ENDF/B FORMAT I.D., INITIALIZE TO ENDF/B-V FORMAT AND
C-----FILE 3 TEMPERATURE TO ZERO.
      FMTHOL='6   '
      IVERSE=6
      TEMP3=0.0d0
c-----Initialize MT table for new MAT
      CALL MAXIE0
C-----SAVE CURRENT MAT, MF AND MT.
  130 MATNOW=MATH
      MFNOW=MFH
      RETURN
  140 FORMAT(2X,78('-')/48X,' MAT Totals',2I9/2X,78('-'))
      END
      SUBROUTINE ERROK3(E)
C=======================================================================
C
C     DEFINE ALLOWABLE ERROR FOR LINEARIZED CROSS SECTIONS.
C     THE ERROR LAW CAN BE ENERGY INDEPENDENT (CONSTANT) OR ENERGY
C     DEPENDENT (GIVEN BY A LINEARLY INTERPOLABLE TABLE IN ENERGY
C     VS. ERROR).
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/OKERR3/ENER3(21),ER3(21),KERR3,MAXER3
      COMMON/ERRORCOM/ERRXC3,ERMINMAX,ERMT2,ERMT102,ERSOFT,XCLOW
C-----INITIALIZE INDEX TO INTERPOLATION TABLE.
      DATA MINER3/2/
C-----ENERGY DEPENDENT. WITHIN ENERGY RANGE OF ERROR LAW USE LINEAR
C-----INTERPOLATION. OUTSIDE RANGE EXTEND ERROR AS CONSTANT FROM
C-----CLOSEST END OF TABLE.
      IF(E.le.ENER3(1)) go to 80
      DO 10 NOWER3=MINER3,MAXER3
      IF(E.lt.ENER3(NOWER3)) go to 20
      IF(E.eq.ENER3(NOWER3)) go to 70
   10 CONTINUE
C-----EXTEND TO HIGHER ENERGIES AS CONSTANT.
      GO TO 90
   20 NM1=NOWER3-1
      IF(E.eq.ENER3(NM1)) go to 60
      IF(E.gt.ENER3(NM1)) go to 50
      DO 30 NOWER3=2,MAXER3
      IF(E.lt.ENER3(NOWER3)) go to 40
      IF(E.eq.ENER3(NOWER3)) go to 70
   30 CONTINUE
      GO TO 90
C-----INTERPOLATE BETWEEN ENERGIES.
   40 NM1=NOWER3-1
   50 MINER3=NOWER3
      ERRXC3=((ENER3(NOWER3)-E)*ER3(NM1)+(E-ENER3(NM1))*ER3(NOWER3))/
     1 (ENER3(NOWER3)-ENER3(NM1))
      RETURN
C-----EXACT ENERGY MATCH.
   60 MINER3=NM1
      IF(MINER3.LE.1) MINER3=2
      ERRXC3=ER3(NM1)
      RETURN
C-----EXACT ENERGY MATCH.
   70 MINER3=NOWER3
      ERRXC3=ER3(NOWER3)
      RETURN
C-----EXTEND TO LOWER ENERGIES AS CONSTANT.
   80 MINER3=2
      ERRXC3=ER3(1)
      RETURN
C-----EXTEND TO HIGHER ENERGIES AS CONSTANT.
   90 MINER3=MAXER3
      ERRXC3=ER3(MAXER3)
      RETURN
      END
      SUBROUTINE FILEIO
C=======================================================================
C
C     DEFINE ALL I/O UNITS AND OPTIONAL DEFINE FILE NAMES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*72 NAMEIN,NAMEOUT
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/IOSTATUS/ISTAT1,ISTAT2
      COMMON/UNITS/ISCR
      COMMON/NAMEX/NAMEIN,NAMEOUT
C-----DEFINE ALL UNIT NUMBERS.
      INP=2
      OUTP=3
      ITAPE=10
      OTAPE=11
      ISCR=12
C-----DEFINE ALL FILE NAMES.
      OPEN(OUTP,FILE='LINEAR.LST',STATUS='UNKNOWN')
      CALL SCRATCH1(ISCR,'LINEAR.001  ')
      OPEN(INP,FILE='LINEAR.INP',STATUS='OLD',ERR=10)
      ISTAT1 = 0
      RETURN
   10 ISTAT1 = 1
      RETURN
      ENTRY FILIO2
C=======================================================================
C
C     DEFINE ENDF/B DATA FILE NAMES.
C
C=======================================================================
      OPEN(OTAPE,FILE=NAMEOUT,STATUS='UNKNOWN')
      OPEN(ITAPE,FILE=NAMEIN,STATUS='OLD',ERR=20)
      ISTAT2 = 0
      RETURN
   20 ISTAT2 = 1
      RETURN
      END
