C This file is part of PREPRO.
C
C    Author: Dermott (Red) Cullen
C Copyright: (C) International Atomic Energy Agency
C
C PREPRO is free software; you can redistribute it and/or modify it
C under the terms of the MIT License; see LICENSE file for more details.


C=======================================================================
C
C     PROGRAM EVALPLOT
C     ================
C     VERSION 75-1 (AUGUST 1975)
C     VERSION 76-1 (JULY 1976)
C     VERSION 77-1 (APRIL 1977)
C     VERSION 78-1 (JULY 1978)
C     VERSION 79-1 (FEBRUARY 1979)
C     VERSION 80-1 (JULY 1980)    *IBM VERSION
C     VERSION 80-2 (DECEMBER 1980)
C     VERSION 81-1 (MARCH 1981)
C     VERSION 81-2 (AUGUST 1981)  *IMPROVED ZOOM CAPABILITY
C     VERSION 82-1 (JANUARY 1982) *IMPROVED COMPUTER COMPATIBILITY
C     VERSION 83-1 (JANUARY 1983) *ELIMINATED COMPUTER DEPENDENT CODING.
C     VERSION 83-2 (OCTOBER 1983) *ADDED PLOTTING OF HISTOGRAM DATA.
C     VERSION 84-1 (DECEMBER 1984)*ADDED PLOTS OF LEGENDRE COEFFICENTS
C                                  AS A FUNCTION OF ENERGY.
C                                 *ADDED SMALL PLOTTING MODE.
C     VERSION 85-1 (AUGUST 1985)  *FORTRAN-77/H VERSION
C     VERSION 86-1 (JANUARY 1986) *ENDF/B-VI FORMAT
C     VERSION 88-1 (JULY 1988)    *MAJOR REVISION TO MAKE CODE EASILY
C                                  INTERFACEABLE TO ALMOST ANY PLOTTER.
C                                 *WARNING...INPUT PARAMETERS FROM BEEN
C                                  CHANGED (SEE, DESCRIPTION BELOW)
C                                 *COMPUTER INDEPENDENT SOFTWARE
C                                  CHARACTERS.
C                                 *COLOR PLOTS.
C                                 *MT NUMBER DEFINITIONS FROM DATA FILE
C                                  READ BY PROGRAM
C                                 *FORTRAN-77 REQUIRED (FORTRAN-H NO
C                                  SUPPORTED BY THIS PROGRAM).
C                                 *OPTION...INTERNALLY DEFINE ALL I/O
C                                  FILE NAMES (SEE, SUBROUTINE FILEIO
C                                  FOR DETAILS).
C                                 *IMPROVED BASED ON USER COMMENTS.
C     VERSION 89-1 (JANUARY 1989) *PSYCHOANALYZED BY PROGRAM FREUD TO
C                                  INSURE PROGRAM WILL NOT DO ANYTHING
C                                  CRAZY.
C                                 *UPDATED TO USE NEW PROGRAM CONVERT
C                                  KEYWORDS.
C                                 *ADDED LIVERMORE CIVIC COMPILER
C                                  CONVENTIONS.
C                                 *FORTRAN-77/FORTRAN-H COMPATIBLE
C                                 *SPECIAL ENDF/B MATERIAL DEFINITIONS
C                                  (ZA.LT.1000) FROM DATA FILE READ
C                                  BY PROGRAM.
C     VERSION 89-2 (MARCH 1989)   *ADDED ENDF/B-V AND VI MT
C                                  DEFINITIONS. PROGRAM WILL DETERMINE
C                                  ENDF/B FORMAT BASED ON MF=1,
C                                  MT=451 AND USE ASPPROPRIATE MT
C                                  DEFINITIONS. IF NO MF=1, MT=451
C                                  PROGRAM WILL USE ENDF/B-V
C                                  MT DEFINITIONS.
C     VERSION 89-3 (JUNE 1989)    *3 CHARACTER FONTS
C     VERSION 92-1 (JANUARY 1992) *COMPLETE REWRITE OF CODE
C                                 *ADDED PHOTON DATA, MF=23 AND 27
C                                 *ADDED INCIDENT CHARGED PARTICLES
C                                  (IDENTIFIED IN PLOT TITLES)
C                                 *ADDED FORTRAN SAVE OPTION.
C                                 *UPDATED BASED ON USER COMMENTS
C                                 *ADDED RETRIEVAL BY UP TO 100
C                                  MAT/MF/MT OR ZA/MF/MT RANGES
C                                 *WARNING...INPUT PARAMETER FORMAT
C                                  HAS BEEN CHANGED...SEE DESCRIPTION
C                                  BELOW.
C     VERSION 92-2 (FEBRUARY 1992)*ADDED PHOTON SPECTRA, MF=15.
C                                 *ADDED MULTIPLICATION OF DISTRIBUTIONS
C                                  IN MF=5 AND 15 BY PROBABILITY=YIELD.
C                                 *INCREASED PAGE SIZE TO 12000 POINTS
C     VERSION 92-3 (MAY 1992)     *CORRECTED DESCRIPTION OF INPUT
C                                  PARAMETERS AND EXAMPLE PROBLEMS.
C                                 *CORRECTED FOR ENDF/B-VI DEFINITION OF
C                                  TEMPERATURE FROM MF=1/MT=451.
C                                 *CORRECTED LOGIC SO THAT EACH REQUEST
C                                  IS TREATED SEPARATELY TO CREATE A
C                                  PLOT, UNLESS REQUESTS ARE CHAINED
C                                  TOGETHER.
C                                 *ADDED VARIABLE CHARACTER SIZE INPUT.
C     VERSION 93-1 (MARCH 1993)   *INCREASED PAGE SIZE FROM 12000
C                                  TO 210000
C                                 *INCREASED THE NUMBER OF ENERGIES
C                                  VS. LEGENDRE COEFFICIENTS FROM
C                                  167 TO 7000
C                                 *UPDATED FOR ON SCREEN GRAPHICS
C                                  USING THE LAHEY FORTRAN COMPILER.
C     VERSION 94-1 (JANUARY 1994) *VARIABLE ENDF/B DATA FILENAMES
C                                  TO ALLOW ACCESS TO FILE STRUCTURES
C                                  (WARNING - INPUT PARAMETER FORMAT
C                                  HAS BEEN CHANGED)
C                                 *CLOSE ALL FILES BEFORE TERMINATING
C                                  (SEE, SUBROUTINE ENDIT)
C     VERSION 96-1 (JANUARY 1996) *COMPLETE RE-WRITE
C                                 *IMPROVED COMPUTER INDEPENDENCE
C                                 *ALL DOUBLE PRECISION
C                                 *UNIFORM TREATMENT OF ENDF/B I/O
C                                 *IMPROVED OUTPUT PRECISION
C                                 *DEFINED SCRATCH FILE NAMES
C                                 *ALL DOUBLE PRECISION
C     VERSION 97-1 (APRIL 1997)   *INCREASED PAGE SIZE FROM 210000
C                                  TO 480,000
C     VERSION 99-1 (MARCH 1999)   *CORRECTED CHARACTER TO FLOATING
C                                  POINT READ FOR MORE DIGITS
C                                 *UPDATED TEST FOR ENDF/B FORMAT
C                                  VERSION BASED ON RECENT FORMAT CHANGE
C                                 *GENERAL IMPROVEMENTS BASED ON
C                                  USER FEEDBACK
C     VERS. 2000-1 (FEBRUARY 2000)*ADDED MF=10, ACTIVATION CROSS
C                                  SECTION PLOTS.
C                                 *INCREASED DIMENSIONS TO HANDLE MORE
C                                  SECTIONS - UP TO 1,000
C                                 *GENERAL IMPROVEMENTS BASED ON
C                                  USER FEEDBACK
C     VERS. 2002-1 (Nov. 2002)    *OPTIONAL INPUT PARAMETERTS
C                                 *OPTIONAL BLACK OR WHITE BACKGROUND
C                                 *COLOR POSTSCRIPT FILES
C     VERS. 2004-1 (MARCH 2004)   *ADDED INCLUDE FOR COMMON
C                                 *INCREASED PAGE SIZE TO 600,000
C                                 *INCREASED THE NUMBER OF ENERGIES
C                                  VS. LEGENDRE COEFFICIENTS FROM
C                                  7000 TO 20000
C     VERS. 2007-1 (JAN.  2007)   *CHECKED AGAINST ALL ENDF/B-VII.
C                                 *INCREASED PAGE SIZE TO 2,400,000
C                                  FROM 600,000.
C                                  VS. LEGENDRE COEFFICIENTS TO
C                                  80,000 FROM 20,000 (MUST BE 1/30
C                                  PAGE SIZE).
C                                 *ADDED (N,REMAINDER) TO FIRST PLOT.
C     VERS. 2007-2 (DEC.  2007)   *72 CHARACTER FILE NAMES.
C     VERS. 2008-1 (JULY  2008)   *UPDATED FOR MF=4/LTT = 3 = LEGENDRE
C                                  PLUS TABULATED
C     VERS. 2010-1 (Aug.  2010)   *Extended to plots up to 100 Legendre
C                                  Coefficients versus incident energy.
C     VERS. 2011-1 (July  2011)   *Increased MT.DAT from 200 to 1,000
C                                  entries, to acommodate new MTs.
C                                 *Updated MF=10 plots to identify ZAP
C                                  and state for Neutron Activation.
C                                 *Updated for energy release parameters
c                                  MF=3, MT=301 to 450.
C     VERS. 2012-1 (Aug.  2012)   *Updated incident particle list to
C                                  include photon (ZA = 0).
C                                 *Added CODENAME
C                                 *32 and 64 bit Compatible
C                                 *Added ERROR stops
C     VERS. 2013-1 (Nov.  2013)   *OUT9 replaced NORMX
C     VERS. 2015-1 (Jan.  2015)   *Updated MF=10 Labels, which requires
C                                  longer plot titles.
C                                 *Restricted character size multiplier
C                                  to 0.5 to 1.5 to accommodate longer
C                                  plot titles.
C                                 *Replaced ALL 3 way if statements.
C     VERS. 2015-2 (Mar.  2015)   *Minor changes based on user feedback
C     VERS. 2017-1 (May   2017)   *Expanded storage to handle new
C                                  R-M (LRF=7) angular distributions.
C                                 *All floating input parameters changed
C                                  tp character input + IN9 conversion.
C                                 *Replaced Q Mev by MT= at top of plots
C                                  (Q value in ENDF is now only defined
C                                   in MF=3, making it difficult for all
C                                   other MF now treated by this code)
C                                 *Initial Linear X scaling for MF=1
C                                 *(nu-bar) and MF=4 (Legendre).
C                                 * Unless energy range is requested =
C                                   allows MF=1 and MF=4 default X
C                                   scaling to be turned off by input
C                                   parameters, i.e., by EVALPLOT or
C                                   EVALHARD.
C     Vers. 2018-1 (Jan. 2018)    *Changed default Y range from 10^10
C                                  to 10^8 (Based on experience).
C                                 *Extended to plot Electron cross
C                                  sections (MT=525 through 528)
C                                 *Extended to plot Electron Large
C                                  Angle angular ditibutiond.
C     Vers. 2019-1 (June 2019)    *Additional Interpolation Law Tests
C                                 *Checked Maximum Tabulated Energy to
C                                  insure it is the same for all MTs -
C                                  if not, print WARNING messages.
C     Vers. 2020-1 (Mar. 2020)    *Major re-write to update MT tables
C                                  to include ALL ENDF/B-6 format
C                                  defined MT numbers for plotting.
C                                 *Major update to MT.DAT to include ALL
C                                  ALL ENDF/B-6 format defined MTs.
C                                 *Added MF/MT=3/5 Parts based on SIXPAK
C                                  ouput of MF/MT=6/5.
C                                 *Added Target Isomeric State (m or n).
C     Vers. 2021-1 (June 2021)    *Added MOUSE Interaction to ZOOM plots
C                                  of Neutron (MF=3) and Photon (MF=23)
C                                  Cross Sections.
C                                 *SHOW ALL - Mouse click above plotting
C                                  area.
C                                 *Updated fot FORTRAN 2018
C                                 *Corrected plot titles for neutrons,
C                                  photons & electrons.
C     Vers. 2021-2 (Sept 2021)    *Corrected Angular (MF=4) and Energy
C                                  (MF=5) plotting - 2021-1 skipped ALL
C                                  remaining MF rather thsn just current
C                                  MT - 2021-2 corrects this.
C     Vers. 2022-1 (Feb. 2022)    *Corrected to plot MF3/MT=301-450.
C     Vers. 2023-1 (Feb. 2023)    *Reduced page sizes to 120,00.
C
C     2022-1 Acknowledgment
C     =====================
C     I thank Jean-Christophe Sublet (NDS,IAEA,Vienna) for notifying
C     me that EVALPLOT 2021 was not plotting MF3/MT=301-450 - compared
C     to EVALPLOT 2019 that was. EVALPLOT 2022-1 now correctly plots
C     MF3/MT=301-450.
C
C     2015-2 Acknowledgment
C     =====================
C     I thank Chuck Whitmer (TerraPower,WA) for reporting the errors
C     that led to the 2015-2 Improvements in this code.
C
C     I thank Jean-Christophe Sublet (UKAEA) for contributing MAC
C     executables and Bojan Zefran (IJS, Slovenia) for contributing
C     LINUX (32 or 63 bit) executables. And most of all I must thank
C     Andrej Trkov (NDS, IAEA) for overseeing the entire PREPRO project
C     at IAEA, Vienna. This was a truly International team who worked
C     together to produce PREPRO 2015-2.
C
C     OWNED, MAINTAINED AND DISTRIBUTED BY
C     ------------------------------------
C     THE NUCLEAR DATA SECTION
C     INTERNATIONAL ATOMIC ENERGY AGENCY
C     P.O. BOX 100
C     A-1400, VIENNA, AUSTRIA
C     EUROPE
C
C     ORIGINALLY WRITTEN BY
C     ------------------------------------
C     Dermott E. Cullen
C
C     PRESENT CONTACT INFORMATION
C     ---------------------------
C     Dermott E. Cullen
C     1466 Hudson Way
C     Livermore, CA 94550
C     U.S.A.
C     Telephone  925-443-1911
C     E. Mail    RedCullen1@Comcast.net
C     Website    RedCullen1.net/HOMEPAGE.NEW
C
C     AUTHORS MESSAGE
C     ---------------
C     THE REPORT DESCRIBED ABOVE IS THE LATEST PUBLISHED DOCUMENTATION
C     FOR THIS PROGRAM. HOWEVER, THE COMMENTS BELOW SHOULD BE CONSIDERED
C     THE LATEST DOCUMENTATION INCLUDING ALL RECENT IMPROVEMENTS. PLEASE
C     READ ALL OF THESE COMMENTS BEFORE IMPLEMENTATION, PARTICULARLY
C     THE COMMENTS CONCERNING MACHINE DEPENDENT CODING.
C
C     AT THE PRESENT TIME WE ARE ATTEMPTING TO DEVELOP A SET OF COMPUTER
C     INDEPENDENT PROGRAMS THAT CAN EASILY BE IMPLEMENTED ON ANY ONE
C     OF A WIDE VARIETY OF COMPUTERS. IN ORDER TO ASSIST IN THIS PROJECT
C     IT WOULD BE APPECIATED IF YOU WOULD NOTIFY THE AUTHOR OF ANY
C     COMPILER DIAGNOSTICS, OPERATING PROBLEMS OR SUGGESTIONS ON HOW TO
C     IMPROVE THIS PROGRAM. HOPEFULLY, IN THIS WAY FUTURE VERSIONS OF
C     THIS PROGRAM WILL BE COMPLETELY COMPATIBLE FOR USE ON YOUR
C     COMPUTER.
C
C     PURPOSE
C     -------
C     THIS PROGRAM IS DESIGNED TO READ EVALUATED DATA FROM THE ENDF/B
C     FORMAT AND TO PLOT THE DATA. THE USER MAY SELECT CROSS SECTIONS,
C     PARAMETERS (E.G. NU-BAR, MU-BAR, ETC.), ANGULAR DISTRIBUTIONS
C     AND/OR ENERGY DISTRIBUTIONS TO BE PLOTTED.
C
C     IN THE FOLLOWING FOR SIMPLICITY THE ENDF/B TERMINOLOGY--ENDF/B
C     TAPE--WILL BE USED. IN FACT THE ACTUAL MEDIUM MAY BE TAPE, CARDS,
C     DISK OR ANY OTHER MEDIUM.
C
C     ON WHAT COMPUTERS WILL THE PROGRAM RUN
C     ------------------------------------------------------------------
C     THE PROGRAM HAS BEEN IMPLEMENTED ON A WIDE VARIETY OF COMPUTERS
C     FROM THE ONE EXTREME OF LARGE MAINFRAME CRAY AND IBM COMPUTERS
C     TO THE OTHER EXTREME OF SUN TERMINALS AND IBM PERSONAL COMPUTERS.
C     THE PROGRAM IS DESIGNED TO RUN ON VIRTUALLY ANY COMPUTER. FOR
C     SPECIAL CONSIDERATIONS SEE THE SECTIONS BELOW ON,
C     (1) COMPUTER DEPENDENT CODING
C     (2) PLOTTER/GRAPHICS TERMINAL INTERFACE
C
C     2015 PLOTTER DIMENSIONS
C     ==================================================================
C     PLOTTER DIMENSIONS ARE IN INCHES - NOT CM, MM, OR CUBITS.
C     THIS IS DONE FOR HISTORICAL REASONS AND HOPEFULLY THIS WILL
C     NOT INCONVENIENCE ANYONE - IN PRACTICE I HAVE USED EXACTLY THE
C     SAME DIMENSION = X = 0 to 12.5 and Y = 0 to 10 FOR DECADES
C     TO PRODUCE BOTH ON-SCREEN AND HARDCOPY POSTSCRIPT PLOTS.
C
c     I STRONGLY SUGGEST THAT YOU NOT CHANGE THESE DIMENSIONS UNLESS
C     YOU MUST = BASED ON THE PLOT SIZE YOU OBTAIN WHEN YOU FIRST RUN
C     THIS CODE.
C
C     GRAPHICS INTERFACE
C     ------------------------------------------------------------------
C     THIS PROGRAM USES A SIMPLE CALCOMP LIKE GRAPHICS INTERFACE WHICH
C     REQUIRES ONLY 3 SUBROUTINES...PLOTS, PLOT AND PEN (DESCRIBED IN
C     DETAIL BELOW). ALL CHARACTERS AND SYMBOLS ARE DRAWN USING TABLES
C     OF PEN STROKES (SUPPLIED WITH THIS PROGRAM). USING THIS METHOD
C     THE PROGRAM SHOULD BE SIMPLE TO INTERFACE TO VIRTUALLY ANY PLOTTER
C     OR GRAPHICS TERMINAL AND THE APPEARANCE AND LAYOUT OF THE PLOTS
C     SHOULD BE INDEPENDENT OF WHICH PLOTTER IS USED.
C
C     PROGRAM IDENTIFICATION
C     ----------------------
C     AS DISTRIBUTED THE FIRST FRAME OF PLOTTED OUTPUT WILL DOCUMENT
C     THE PROGRAM NAME, VERSION AND INSTALLATION. THIS INFORMATION IS
C     STORED AS DATA IN THE ARRAY VERSES NEAR THE BEGINNING OF
C     SUBROUTINE FRAME0. IF YOU WISH TO CUSTOMIZE THE OUTPUT TO IDENTIFY
C     YOUR INSTALLATION CHANGE THE LAST TWO LINES OF THE ARRAY VERSES.
C
C     SIZE OF PLOTS
C     -------------
C     THE PROGRAM HAS A BUILT-IN DEFAULT SIZE TO MAKE EACH PLOT 13.50
C     BY 10.24 INCHES. THIS SIZE WAS SELECTED ASSUMING THAT THE
C     RESOLUTION OF THE PLOTTER IS 1024 RASTER POINTS PER INCH. THE
C     USER MAY CHANGE THE SIZE OF THE PLOT BY SPECIFYING ANY REQUIRED
C     SIZE ON THE FIRST INPUT LINE. IN PARTICULAR FOR USE ON ANY PLOTTER
C     THAT USES CENTIMETERS INSTEAD OF INCHES THE USER MAY MERELY
C     SPECIFY THE REQUIRED SIZE OF THE PLOT IN CENTIMETERS (E.G., TO
C     OBTAIN A 13.50 BY 10.24 INCH PLOT, THE USER NEED ONLY SPECIFY
C     34.3 BY 26 ON THE FIRST INPUT LINE...ASSUMING 2.54 CENTIMETERS PER
C     INCH, OR 343 BY 260 FOR MILLIMETERS..ASSUMING 25.4 MILLIMETERS
C     PER INCH).
C
C     CHARACTER SIZE
C     --------------
C     THE PLOT HAS A BUILT-IN CHARACTER SIZE WHICH HAS BEEN DEFINED FOR
C     COMPATIBILITY WITH THE BUILT-IN PLOT SIZE. IF THE USER SPECIFIES
C     BY INPUT A DIFFERENT PLOT SIZE, THE PROGRAM WILL AUOTMATICALLY
C     SCALE THE SIZE OF ALL CHARACTERS BY THE RATIO OF THE Y SIZE OF THE
C     PLOT SPECIFIED BY THE USER TO THE BUILT-IN Y SIZE OF PLOTS (E.G.,
C     FOR PLOTS WHICH ARE ONLY 5.12 HIGH (Y DIRECTION) ALL CHARACTERS
C     WILL BE SCALED TO BE ONLY 1/2 THE CHARACTER SIZE ON PLOTS WHICH
C     ARE 10.24 HIGH (10.24 = THE BUILT-IN SIZE). NOTE, CHANGES IN THE
C     X SIZE OF THE PLOT WILL NOT HAVE ANY EFFECT ON THE CHARACTER SIZE
C     (E.G., FOR A LONG PLOT, 30 BY 10.24 THE CHARACTER SIZE WILL BE THE
C     THE SAME AS ON A 13.50 BY 10.24 PLOT).
C
C     PLOT PER FRAME
C     --------------
C     BY INPUT THE USER CAN SPECIFY NOT ONLY THE ACTUAL SIZE OF THE
C     LOCAL PLOTTER, BUT ALSO HOW MANY PLOTS SHOULD APPEAR ON EACH
C     FRAME. THIS IS DONE BY SPECIFYING THE LAYOUT OF A FRAME IN TERMS
C     OF THE NUMBER OF PLOTS IN THE X AND Y DIRECTION. FOR EXAMPLE BY
C     SPECIFYING THAT EACH FRAME BE DIVIDED INTO 3 PLOTS IN THE X
C     DIRECTION AND 2 PLOTS IN THE Y DIRECTION, EACH FRAME WILL CONTAIN
C     UP TO 6 PLOTS (3 X 2). INTERNALLY EACH PLOT WILL BE GENERATED TO
C     STANDARD A4 SIZE, AS DESCRIBED ABOVE, AND THEN ON OUTPUT SCALED
C     TO THE NUMBER OF PLOTS PER FRAME SPECIFIED BY THE USER INPUT.
C
C     ENDF/B FORMAT
C     -------------
C     THIS PROGRAM ONLY USES THE ENDF/B BCD OR CARD IMAGE FORMAT (AS
C     OPPOSED TO THE BINARY FORMAT) AND CAN HANDLE DATA IN ANY VERSION
C     OF THE ENDF/B FORMAT (I.E., ENDF/B-I, II,III, IV, V OR VI FORMAT).
C
C     IT IS ASSUMED THAT THE DATA IS CORRECTLY CODED IN THE ENDF/B
C     FORMAT AND NO ERROR CHECKING IS PERFORMED. IN PARTICULAR IT IS
C     ASSUMED THAT THE MAT, MF AND MT ON EACH LINE IS CORRECT. SEQUENCE
C     NUMBERS (COLUMNS 76-80) ARE IGNORED. FORMAT OF SECTION MT=452,455,
C     456/ MF=1, AND ALL SECTIONS OF MF=3, 4 AND 5 MUST BE CORRECT. ALL
C     OTHER SECTION OF DATA ARE SKIPPED AND AS SUCH THE OPERATION OF
C     THIS PROGRAM IS INSENSITIVE TO THE CORRECTNESS OR INCORRECTNESS
C     OF ALL OTHER SECTIONS.
C
C     INTERPOLATION LAW
C     -----------------
C     EACH TABLE OF DATA MAY USE EITHER COMPLETELY HISTOGRAM OR
C     COMPLETELY LINEAR INTERPOLATION LAW (THE TWO INTERPOLATION LAWS
C     CANNOT BE MIXED TOGETHER IN ONE TABLE). EITHER OF THESE TWO
C     REPRESENTATIONS WILL BE STORED IN CORE IN LINEARLY INTERPOLABLE
C     FORM. IF THIS PROGRAM FINDS ANY DATA THAT USES ANY OTHER
C     INTERPOLATION LAW IT WILL PRINT AN ERROR MESSAGE AND PLOT THE
C     TABLE AS IF IT WERE LINEARLY INTERPOLABLE. THE ONLY ERROR THAT
C     WILL RESULT IN THE PLOT WILL BE IN THE CURVE FOLLOWED BETWEEN
C     TABULATED POINTS. PROGRAM LINEAR (UCRL-50400, VOL. 17, PART A)
C     MAY BE USED TO CONVERT CROSS SECTIONS TO LINEARLY INTERPOLABLE
C     FORM. PROGRAM LEGEND CAN BE USED FOR ANGULAR DISTRIBUTIONS AND
C     PROGRAM ENERGY CAN BE USED FOR SECONDARY ENERGY DISTRIBUTIONS.
C
C     REACTION INDEX
C     --------------
C     THIS PROGRAM DOES NOT USE THE REACTION INDEX WHICH IS GIVEN IN
C     SECTION MF=1, MT=451 OF EACH EVALUATION.
C
C     PAGE SIZE
C     ---------
C     ONLY ONE PAGE OF DATA = 600000 DATA POINTS - IS KEPT IN CORE AT
C     ANY GIVEN TIME. IF THERE IS MORE THAN THIS MANY POINTS THEY WILL
C     BE KEPT ON A SCRATCH FILE AND LOADED INTO CORE AS NEEDED.
C
C     TO CHANGE THE PAGE SIZE,
C
C     1) CHANGE  600000 TO THE NEW PAGE SIZE
C     2) CHANGE 1200000 TO TWO TIMES THE NEW PAGE SIZE
C
C     SECTION SIZE
C     ------------
C     SINCE THIS PROGRAM USES A LOGICAL PAGING SYSTEM THERE IS NO LIMIT
C     TO THE NUMBER OF POINTS IN ANY SECTION, E.G., THE TOTAL CROSS
C     SECTION MAY BE REPRESENTED BY 200,000 DATA POINTS.
C
C     THE ONLY EXCEPTION TO THIS RULE IS THAT EACH TABLE OF DATA WHICH
C     USES A HISTOGRAM INTERPOLATION LAW CANNOT EXCEED HALF THE SIZE
C     OF THE IN CORE PAGE (PRESENTLY 600000/2=300000) WHICH IS ADEQUATE
C     FOR ALMOST ALL HISTOGRAM (E.G. MULTIGROUP) REPRESENTATIONS OF
C     A SINGLE TABLE (E.G. REACTION).
C
C     WHAT DATA CAN BE PLOTTED
C     ------------------------
C     THIS CODE CAN PLOT VIRTUALLY ANY NEUTRON OR PHOTON CROSS SECTIONS
C     (MF=3 OR 23) AND ANY TABULATED ANGULAR OR ENERGY DISTRIBUTIONS OR
C     LEGENDRE COEFFICIENTS. WHAT IS ACTUALLY PLOTTED DEPENDS ON WHAT
C     DATA IS SELECTED BY THE USER.
C
C     SELECTION OF DATA
C     -----------------
C     DATA TO BE PLOTTED IS SPECIFIED BY INPUTTING UP TO 100 MAT/MF/MT
C     RANGES OR UP TO 100 ZA/MF/MT RANGES. IN ADDITION FOR EACH RANGE
C     THE USER MAY SPECIFY AN X RANGE (USUALLY ENERGY) AND THE TYPE OF
C     DATA TO BE PLOTTED (SEE: THE DESCRIPTION OF TYPES, BELOW).
C
C     THE X RANGE FOR MF = 1, 3, 23 AND 27 AND MF = 4 LEGENDRE
C     COEFFICIENTS WILL BE USED AS THE X LIMITS OF THE PLOTS, E.G.,
C     PLOT ENERGY DEPENDENT CROSS SECTIONS BETWEEN 1 AND 20 MEV.
C
C     THE X RANGE FOR MF = 4 AND 5 WILL BE USED TO ONLY SELECT ANGULAR
C     AND ENERGY DISTRIBUTION FOR WHICH THE INCIDENT NEUTRON ENERGY
C     IS IN THE X RANGE. E.G., ONLY PLOT ANGULAR DISTRIBUTIONS WHERE
C     THE INCIDENT NEUTRON ENERGY IS 1 TO 20 MEV.
C
C     INTERACTIVE VS. BATCH MODE
C     --------------------------
C     VERSION 92-1 AND LATER VERSIONS OF THIS CODE ONLY USE A BATCH
C     MODE WHERE ALL REQUESTS ARE READ AND PROCESSED. EARLIER VERSIONS
C     OF THIS CODE HAD BOTH AN INTERACTIVE MODE (WHERE REQUESTS WHERE
C     READ AND EXECUTED ONE AT A TIME) AND A BATCH MODE. INTERACTIVE
C     MODE HAS BEEN DROPPED AND WILL NOT TO REINTRODUCED UNLESS THE
C     AUTHOR IS INFORMED BY USERS THAT THEY WERE USING THE INTERACTIVE
C     MODE.
C
C     PLOT LAYOUT
C     -----------
C     VERSION 92-1 AND LATER VERSIONS OF THIS CODE WILL PLOT ALL
C     CURVES ON A SINGLE PLOT. EARLIER VERSIONS OF THIS CODE ALLOWED
C     THE OPTION TO HAVE,
C     MULTIPLE PLOTS - INDIVIDUAL SCALING
C     MULTIPLE PLOTS - COMMON SCALING
C     SINGLE PLOT
C     MULTILE PLOTS PER PLOT HAVE BEEN DROPPED AND WILL NOT BE
C     REINTRODUCED UNLESS IT IS DEMONSTRATED TO THE AUTHOR THAT THEY
C     ARE OF PRACTICAL USE IN SOME APPLICATION.
C
C     PROCESSING OF DATA
C     ------------------
C     IN THE CASE OF NEUTRON AND PHOTON CROSS SECTIONS (MF=3 OR 23)
C     AND PARAMETERS (MF=1 OR 27) ALL DATA IN A FILE (MF) IS READ
C     GROUPED TOGETHER BY TYPE (AS EXPLAINED BELOW) AND PLOTTED.
C
C     IN THE CASE OF ANGULAR AND ENERGY DISTRIBUTIONS (MF=4 OR 5) ONLY
C     ONE SECTION OF DATA AT A TIME IS READ AND PLOTTED.
C
C     TYPES OF DATA (MF=1, 3, 23 AND 27 ONLY)
C     ---------------------------------------
C     THESE DATA ARE DIVIDED INTO UP TO 20 TYPES AND EACH TYPE OF
C     DATA IS GROUPED TOGETHER AND PLOTTED (IF THE DATA IS ACTUALLY
C     PRESENT).
C
C     WHAT TYPE OF DATA IS ACTUALLY PLOTTED CAN BE CONTROLLED BY USER
C     INPUT EITHER BASED ON SELECTED MAT/MF/MT OR ZA/MF/MT RANGES OR
C     BY EXPLICITLY SELECTING ONLY ONE TYPE OF DATA IS TO BE PLOTTED
C     (SEE THE DESCRIPTION OF INPUT BELOW).
C
C     SIMPLE REQUESTS
C     ---------------
C     GENERALLY EACH MAT/MF/MT OR ZA/MF/MT REQUESTED IS TREATED
C     SEPERATELY AND THE SPECIFIED DATA IS GROUPED BY TYPE AND PLOTTED.
C     FOR EXAMPLE, THE USER MAY SPECIFY USING ONE REQUEST THAT ALL
C     TYPES OF DATA BE PLOTTED OVER THE ENTIRE ENERGY RANGE AND USE
C     A SECOND REQUEST TO SPECIFY THAT ONE PARTICULAR TYPE OF DATA
C     BE PLOTTED OVER A SPECIFIC ENERGY RANGE.
C
C     CHAINED REQUESTS
C     ----------------
C     REQUESTS MAY ALSO BE CHAINED TOGETHER (SEE, THE DESCRIPTION OF
C     INPUT BELOW), WHERE A NUMBER OF REQUESTS MAY BE USED TO SELECT
C     DATA, BUT ONLY THE LAST REQUEST IN A CHAIN WILL CAUSE ALL SELECTED
C     DATA TO BE PLOTTED. CHAINED REQUESTED ARE INDICATED ON INPUT BY
C     A SERIES OF REQUESTS FOR DATA TYPE = -1, EXCEPT FOR THE LAST
C     REQUEST OF THE CHAIN, WHICH MUST SPECIFY A TYPE DATA = 0 (ALL)
C     OR A POSITIVE NUMBER. UNLIKE SIMPLE REQUESTS, WHERE EACH WILL
C     PRODUCE ONE OR MORE PLOTS, WITH CHAINED REQUESTS THE ENTIRE
C     SERIES OF CHAINED REQUESTS WILL BE TREATED AS A SINGLE REQUEST
C     AND WILL PRODUCE ONE OR MORE PLOTS.
C
C     FOR EXAMPLE, DATA TYPE = 1 WILL NORMALLY INCLUDE,
C     MT =   1 - TOTAL
C        =   2 - ELASTIC
C        =   4 - TOTAL INELASTIC
C        =   5 - (N,REMAINDER)
C        =  18 - FISSION
C        = 102 - CAPTURE
C     IF YOU WISH TO EXCLUDE TOTAL INELASTIC FROM A PLOT YOU NEED ONLY
C     SPECIFY TWO CHAINED REQUESTS THE FIRST TO SELECT MT = 1 THROUGH
C     2 (TO INCLUDE TOTAL AND ELASTIC) AND A SECOND TO INCLUDE MT = 18
C     THROUGH 102. THE FIRST REQUEST SHOULD SPECIFY DATA TYPE = -1 AND
C     SECOND 1 (THIS WILL CHAIN THE 2 REQUESTS TOGETHER, SO THAT MT =1
C     THROUGH 2, AND MT = 18 THROUGH 102 ALL APPEAR ON THE SAME PLOT).
C     SINCE MT = 4 (TOTAL INELASTIC) IS NOT REQUESTED IT WILL NOT BE
C     PLOTTED.
C
C     DEFINITION OF 20 DATA TYPES
C     ------------------------------------------------------------------
C     NEUTRONS (MF = 3)
C     -----------------
C     (1) TOTAL, ELASTIC, CAPTURE, FISSION, TOTAL INELASTIC, REMAINDER
C     (2) (N,2N), (N,3N) AND (N,N' CHARGED PARTICLE)
C     (3) (N,CHARGED PARTICLE)
C     (4) PARTICLE PRODUCTION (PROTON, DEUTERON, ETC.) AND DAMAGE
C     (5) TOTAL, FIRST, SECOND, ETC. CHANCE FISSION.
C     (6) TOTAL INELASTIC, INELASTIC DISCRETE LEVELS AND CONTINUUM
C     (7) (N,P) TOTAL AND LEVELS (ONLY IF LEVELS ARE GIVEN)
C     (8) (N,D) TOTAL AND LEVELS (ONLY IF LEVELS ARE GIVEN)
C     (9) (N,T) TOTAL AND LEVELS (ONLY IF LEVELS ARE GIVEN)
C     (10) (N,HE-3) TOTAL AND LEVELS (ONLY IF LEVELS ARE GIVEN)
C     (11) (N,ALPHA) TOTAL AND LEVELS (ONLY IF LEVELS ARE GIVEN)
C     (12) PARAMETERS MU-BAR, XI AND GAMMA
C     (13) NU-BAR - TOTAL, PROMPT AND DELAYED
C     (19) ENERGY RELEASE PARAMETERS, MF=3, MT=301-450
C
C     ACTIVATION (MF=10)
C     ------------------
C     (20) ALL mt=1 TO 999.
C
C     PHOTONS  (MF=23 AND 27)
C     -----------------------
C     (14) TOTAL, COHERENT, INCOHERENT, TOTAL PHOTOELECTRIC, TOTAL
C          PAIR PRODUCTION
C     (15) TOTAL AND SUBSHELL PHOTOELECTRIC
C     (16) TOTAL, NUCLEAR AND ELECTRON PAIR PRODUCTION
C     (17) COHERENT FORM FACTOR AND INCOHERENT SCATTERING FUNCTION
C     (18) REAL AND IMAGINARY SCATTERING FACTORS
C
C
C     IDENTIFICATION OF DATA
C     ----------------------
C     ALL PLOTS IDENTIFY THE TARGET, E.G., U-238 AND UNITS OF THE X AND
C     Y AXIS, E.G., X = ENERGY (MEV) OR COSINE (LAB), ETC., Y = CROSS
C     SECTION (BARNS) OR PROBABILITY/COSINE, ETC.
C
C     FOR TYPES OF DATA (MF=1, 3, 23 AND 27) DIFFERENT REACTIONS (MT)
C     ARE GROUPED TOGETHER TO APPEAR ON THE SAME PLOT. THE TITLE AT
C     THE TOP OF THE PLOT WILL IDENTIFY THE TYPE OF DATA BEING PLOTTED
C     AND THE LEGEND BOX WITHIN THE PLOT WILL IDENTIFY EACH REACTION.
C
C     FOR ANGULAR AND ENERGY DISTRIBUTIONS (MF=4 OR 5) EACH PLOT WILL
C     CONTAIN DATA FOR A SINGLE REACTION (MT) AND DIFFERENT INCIDENT
C     NEUTRON ENERGIES. THE TITLE AT THE TOP OF THE PLOT WILL IDENTIFY
C     THE REACTION AND THE LEGEND BOX WITHIN THE PLOT WILL IDENTIFY
C     THE INCIDENT ENERGY.
C
C     FOR LEGENDRE COEFFICIENT THE DATA IN ENDF/B FORMAT WILL BE
C     INVERTED IN ORDER TO PRESENT EACH LEGENDRE COEFFICIENT VERSUS
C     INCIDENT ENERGY. THE TITLE AT THE TOP OF THE PLOT WILL IDENTIFY
C     THE REACTION AND THE LEGEND BOX WITHIN THE PLOT WILL IDENTIFY
C     THE LEGENDRE ORDER.
C
C     INPUT FILES
C     -----------
C     UNIT  DESCRIPTION
C     ----  -----------
C        2   INPUT LINES (BCD - 80 CHARACTERS/RECORD)
C        9   MT DEFINITIONS (BCD - 80 CHARACTERS/RECORD)
C       10   ENDF/B DATA (BCD - 80 CHARACTERS/RECORD)
C       12   SOFTWARE CHARACTERS (BCD - 80 CHARACTERS/RECORD)
C
C     OUTPUT FILES
C     ------------
C     UNIT  DESCRIPTION
C     ----  -----------
C        3   OUTPUT REPORT (BCD - 120 CHARACTERS/RECORD)
C       16   PLOTTING UNIT
C
C     SCRATCH FILES
C     -------------
C     UNIT  DESCRIPTION
C     ----  -----------
C       11  SCRATCH FILE (BINARY - 960000 WORDS/RECORD = 2*PAGE SIZE)
C
C     OPTIONAL STANDARD FILE NAMES (SEE SUBROUTINE FILIO1 AND FILIO2)
C     ---------------------------------------------------------------
C     UNIT  FILE NAME
C     ----  ----------
C       2   EVALPLOT.INP
C       3   EVALPLOT.LST
C       9   MT.DAT
C      10   ENDFB.IN    (OR AS INPUT PARAMETER)
C      11   (SCRATCH)
C      12   PLOT.CHR
C      16   (PLOTTING UNIT...USUALLY A DUMMY)
C
C     INPUT PARAMETERS
C     ----------------
C     LINE COLUMNS FORMAT  DESCRIPTION
C     ---- ------- ------  -----------
C        1   1-11   E11.4  LOWER X LIMIT OF PLOTTER
C           12-22   E11.4  UPPER X LIMIT OF PLOTTER
C           23-33   E11.4  LOWER Y LIMIT OF PLOTTER
C           34-44   E11.4  UPPER Y LIMIT OF PLOTTER
C           45-55    I11   NUMBER OF PLOTS PER FRAME IN X DIRECTION
C           56-66    I11   NUMBER OF PLOTS PER FRAME IN Y DIRECTION
C           67-70    F4.1  CHARACTER SIZE MULTIPLIER
C                          = 0 OR 1    - NORMAL CHARACTER SIZE
C                          = OTHERWISE - CHARACTERS SCALED BY THIS
C                                        FACTOR.
C        2   1-72    A72   ENDF/B DATA FILENAME
C                          (LEAVE BLANK FOR STANDARD = ENDFB.IN)
C        3   1-11    I11   RETRIEVAL CRITERIA
C                          = 0 - MAT
C                          = 1 - ZA
C           12-22    I11   TYPE OF GRID
C                          = 0 - TICK MARKS ON BORDER
C                          = 1 - SOLID AT COARSE INTERVALS
C                          = 2 - DASHED AT COARSE INTERVALS
C                          = 3 - SOLID AT FINE INTERVALS
C                          = 4 - DASHED AT FINE INTERVALS
C                          = 5 - SOLID COARSE/DASHED FINE GRID
C           23-33    I11   SHOULD BORDER BE PLOTTED ON EACH PLOT
C                          = 0 - NO
C                          = 1 - YES
C           34-44    I11   LINE THICKNESS
C                          = 0 -  5 = BORDER/CURVES/CHARACTERS
C                          =-1 - -5 = BORDER/CURVES (NOT CHARACTERS)
C                                     NOTE, THE GRID IS NEVER THICK.
C           45-55    I11   SHOULD TEMPERATURE BE PLOTTED.
C                          = 0 - YES
C                          = 1 - NO
C           56-66   E11.4  ALLOWABLE RATIO OF PLOT Y RANGE MAXIMUM TO
C                          MINIMUM - IF THIS RATIO IS EXCEEDED THE Y
C                          RANGE MINIMUM WILL BE CHANGED TO THE Y RANGE
C                          MAXIMUM TIMES THIS RATIO.
C                          IF THIS RATIO IS NOT POSITIVE, IT IS
C                          INTERPRETED TO MEAN NO LIMIT ON Y RANGE.
C           67-70    I4    BACKGROUND COLOR
C                          = 0         = BLACK
C                          = OTHERWISE = WHITE
C      4-N   1- 6    I6    LOWER MAT OR ZA LIMIT
C            7- 8    I2    LOWER MF LIMIT
C            9-11    I3    LOWER MT LIMIT
C           11-22   E11.4  LOWER X LIMIT (USUALLY ENERGY) - EV
C           23-28    I6    UPPER MAT OR ZA LIMIT
C           29-30    I2    UPPER MF LIMIT
C           31-33    I3    UPPER MT LIMIT
C           34-44   E11.4  UPPER X LIMIT (USUALLY ENERGY) - EV
C           45-55   I11    TYPE OF DATA TO RETRIEVE AND PLOT
C                          =  -1  - CHAIN THIS REQUEST TO THE NEXT ONE
C                          =   0  - ALL
C                          = 1-21 - TYPE AS SPECIFIED ABOVE
c                                   2020/1/9 - Changed 20 to 21
C
C     THERE MAY BE UP 100 MAT/MF/MT OR ZA/MF/MT REQUEST RANGES. INPUT
C     MUST BE TERMINATED BY A BLANK LINE.
C
C     IF X LIMITS ARE NOT SPECIFIED (I.E., LOWER AND UPPER X LIMIT = 0)
C     THIS WILL BE INTERPRETED TO MEAN NO LIMIT AND ALL DATA WILL BE
C     PLOTTED OVER THEIR ENTIRE ENERGY RANGE, I.E., YOU NEED NOT
C     KNOW AND SPECIFY THE ACTUAL ENERGY LIMITS OF THE DATA.
C
C     EXAMPLE DEFINITION OF PLOTTER
C     -----------------------------
C     2015 - WARNING - THE FOLLOWING DESCRIPTION IS OUT-OF-DATE.
C     TODAY THE DIMENSIONS OF THE PLOTTER ARE IN INCHES.
C
C     THE FIRST INPUT LINE DEFINES THE DIMENSIONS OF THE PLOTTER BEING
C     USED IN ANY UNITS (INCHES, CENTIMETERS, MILLIMETERS, ANYTHING)
C     WHICH APPLY TO THE PLOTTER. IN ADDITION THE FIRST LINE DEFINES
C     HOW MANY PLOTS SHOULD APPEAR ON EACH FRAME. THE PLOTTING AREA
C     DEFINED ON THE FIRST INPUT LINE MAY BE SUBDIVIDED INTO ANY NUMBER
C     OF PLOTS IN THE X AND Y DIRECTION. FOR EXAMPLE, TO PRODUCE A
C     SERIES OF FRAMES EACH CONTAINING 3 PLOTS IN THE X DIRECTION AND
C     2 PLOTS IN THE Y DIRECTION (6 PLOTS PER FRAME) COLUMN 45-55 OF
C     THE FIRST INPUT LINE SHOULD BE 3 AND COLUMNS 56-66 SHOULD BE 2.
C
C     IF THE LOCAL PLOTTER USES DIMENSIONS OF INCHES IN ORDER TO OBTAIN
C     10 X 10 INCH FRAMES WITH 3 X 2 PLOTS PER FRAME THE FIRST INPUT
C     LINE SHOULD BE,
C
C       0.0       10.0      0.0     10.0              3          2
C
C     IF THE LOCAL PLOTTER USES DIMENSION OF MILLIMETERS THE SAME
C     PHYSICAL SIZE PLOT MAY BE OBTAINED IF THE FIRST INPUT LINE IS,
C
C       0.0      254.0      0.0    254.0              3          2
C
C     FOR SIMPLICITY THE FOLLOWING EXAMPLE INPUTS WILL NOT DISCUSS THE
C     PHYSICAL DIMENSIONS OF THE PLOTTER AND THE FIRST INPUT LINE WILL
C     IN ALL CASES INDICATE 10 X 10 INCH PLOTS WITH ONLY 1 PLOT PER
C     FRAME.
C
C     ALL OF THE FOLLOWING EXAMPLE WILL USE,
C     1) A DASHED GRID          (SECOND LINE, COLS. 12-22 = 2)
C     2) NO BORDER              (SECOND LINE, COLS. 23-33 = 0)
C     3) LINE THICKNESS -2      (SECOND LINE, COLS. 34-44 =-2)
C     4) TEMPERATURE ON PLOTS   (SECOND LINE, COLS. 45-55 = 0)
C     5) NO Y RANGE LIMIT       (SECOND LINE, COLS. 56-66 = 0.0)
C
C     EXAMPLE INPUT NO. 1
C     -------------------
C     FOR ALL THORIUM AND URANIUM ISOTOPES PLOT NEUTRON CROSS SECTIONS
C     ENTIRE ENERGY RANGE. IN ADDITION PLOT TYPE 1 DATA, MAJOR NEUTRON
C     CROSS SECTIONS OVER THE ENERGY RANGE 1 EV TO 1 KEV. USE THE
C     STANDARD FILENAME (ENDFB.IN) FOR THE ENDF/B DATA. THE FOLLOWING
C     6 INPUT LINES ARE REQUIRED,
C
C    0.0       10.0       0.0       10.0               3          2
C ENDFB.IN
C           1          2         0         -2          0 0.0
C  90000 3  0           90999 3999                     0
C  90000 3  0 1.00000+ 090999 3999 1.00000+ 3          1
C (BLANK LINE MUSE FOLLOW LAST REQUEST)
C
C     EXAMPLE INPUT NO. 2
C     -------------------
C     PLOT FE-56 ELASTIC AND INELASTIC ANGULAR DISTRIBUTIONS BETWEEN
C     1 AND 20 MEV. THE FOLLOWING 6 INPUT LINES ARE REQUIRED,
C
C    0.0       10.0       0.0       10.0               3          2
C ENDFB.IN
C           1          2         0         -2          0 0.0
C  26056 4  2 1.00000+ 626056 4  2 2.00000+ 7          0
C  26056 4  4 1.00000+ 626056 4  4 2.00000+ 7          0
C (BLANK LINE MUSE FOLLOW LAST REQUEST)
C
C     EXAMPLE INPUT NO. 3 (CHAINED INPUT)
C     -----------------------------------
C     FOR ALL THORIUM AND URANIUM ISOTOPES PLOT TOTAL, ELASTIC ,CAPTURE
C     AND FISSION, BUT NOT INELASTIC CROSS SECTIONS OVER THERE ENTIRE
C     ENERGY RANGE AND FROM 1 KEV TO 1 MEV. THE FOLLOWING 8 INPUT
C     LINES ARE REQUIRED,
C
C    0.0       10.0       0.0       10.0               3          2
C ENDFB.IN
C           1          2         0         -2          0 0.0
C  90000 3  1           90999 3  2                    -1
C  90000 3 18           90999 3102                     1
C  90000 3  1 1.00000+ 390999 3  2 1.00000+ 6         -1
C  90000 3 18 1.00000+ 390999 3102 1.00000+ 6          1
C (BLANK LINE MUSE FOLLOW LAST REQUEST)
C
C     NOTE, THIS EXAMPLE INCLUDES 2 CHAINED REQUESTED - INPUT LINES 3
C     AND 4 SELECTING DATA AND PRODUCING A PLOT OVER THE ENTIRE ENERGY
C     RANGE AND INPUT LINES 5 AND 6 SELECTING THE SAME DATA AND
C     PRODUCING A PLOT FROM 1 KEV TO 1 MEV.
C
C     ANY NUMBER OF REQUEST LINES MAY TO CHAINED TOGETHER TO SELECT
C     DATA. THE CHAIN ENDS WHERE THE TYPE OF DATA (COLS. 45-55) IS NOT
C     NEGATIVE AND THEN THE SELECTED DATA WILL BE PLOTTED.
C
C     EXAMPLE INPUT NO. 4
C     -------------------
C     FOR THE SAME EXAMPLE AS ABOVE, EXCEPT USE A DIFFERENT FILENAME
C     FOR THE ENDF/B DATA TO READ FROM A FILE TREE STRUCTURE. THE
C     FOLLOWING 8 INPUT LINES ARE REQUIRED,
C
C    0.0       10.0       0.0       10.0               3          2
C EVALUATION/ENDFB6/THORIUM
C           1          2         0         -2          0 0.0
C  90000 3  1           90999 3  2                    -1
C  90000 3 18           90999 3102                     1
C  90000 3  1 1.00000+ 390999 3  2 1.00000+ 6         -1
C  90000 3 18 1.00000+ 390999 3102 1.00000+ 6          1
C (BLANK LINE MUST FOLLOW LAST REQUEST)
C
C===== PLOTTER/GRAPHICS TERMINAL INTERFACE =============================
C
C      THIS PROGRAM USES A SIMPLE CALCOMP LIKE INTERFACE INVOLVING
C      ONLY 6 SUBROUTINES,
C
C      STARPLOT  - INITIALIZE PLOTTER
C      NEXTPLOT  - CLEAR THE SCREEN FOR THE NEXT PLOT
C      ENDPLOTS  - TERMINATE PLOTTING
C
C      PLOT(X,Y,IPEN)        - DRAW OR MOVE FROM LAST LOCATION TO (X,Y),
C                              END OF CURRENT PLOT OR END OF PLOTTING.
C            IPEN =   2 - DRAW
C                 =   3 - MOVE
C
C      PEN(IPEN)             - SELECT COLOR.
C           IPEN- COLOR = 1 TO N (N = ANY POSITIVE INTEGER)
C
C      BOXCOLOR(X,Y,IFILL,IBORDER) - FILL A RECTANGULAR BOX DEFINED
C                                    BY THE X AND Y CORNERS - X(1),
C                                    X(2), Y(1),Y(2)
C                   IFILL          - COLOR TO FILL BOX WITH
C                         IBORDER  - COLOR OF BOX BORDER
C
C     IN ORDER TO INTERFACE THIS PROGRAM FOR USE ON ANY PLOTTER WHICH
C     DOES NOT USE THE ABOVE CONVENTIONS IT IS MERELY NECESSARY FOR THE
C     THE USER TO WRITE 6 SUBROUTINES WITH THE NAMES PLOTS, PLOT AND PEN
C     WITH THE SUBROUTINE ARGUMENTS DESCRIBED ABOVE AND TO THEN CALL THE
C     LOCAL EQUIVALENT ROUTINES.
C
C     COLOR PLOTS
C     ------------------------------------------------------------------
C     TO SELECT PLOTTING COLORS SUBROUTINE PEN (DESCRIBED ABOVE) IS USED
C     TO SELECT ONE OF THE AVAILABLE COLORS. IF YOU HAVE COLOR ON YOUR
C     PLOTTER YOU SHOULD PROVIDE A SUBROUTINE PEN TO SELECT COLORS.
C
C     BLACK AND WHITE PLOTS
C     ------------------------------------------------------------------
C     WHEN PRODUCING BLACK AND WHITE PLOTS SUBROUTINE PEN NEED MERELY
C     BE A DUMMY SUBROUTINE TO IGNORE ANY ATTEMPT TO CHANGE COLORS,
C
C     SUBROUTINE PEN(IPEN)
C     RETURN
C     END
C
C     SIMILAR BOXCOLOR CAN BE A DUMMY
C
C     SUBROUTINE BOXCOLOR(X,Y,IFILL,IBORDER)
C     RETURN
C     END
C
C     CHARACTER SET
C     ------------------------------------------------------------------
C     THIS PROGRAM USES COMPUTER AND PLOTTER DEVICE INDEPENDENT SOFTWARE
C     CHARACTERS. THIS PROGRAM COMES WITH A FILE THAT DEFINES THE PEN
C     STROKES REQUIRED TO DRAW ALL CHARACTERS ON AN IBM KEYBOARD (UPPER
C     AND LOWER CASE CHARACTERS, NUMBERS, ETC.) PLUS AN ALTERNATE SET OF
C     ALL UPPER AND LOWER CASE GREEK CHARACTERS AND ADDITIONAL SPECIAL
C     SYMBOLS.
C
C     THE SOFTWARE CHARACTER TABLE CONTAINS X AND Y AND PEN POSITIONS TO
C     DRAW EACH CHARACTER. IF YOU WISH TO DRAW ANY ADDITIONAL CHARACTERS
C     OR TO MODIFY THE FONT OF THE EXISTING CHARACTERS YOU NEED ONLY
C     MODIFY THIS TABLE.
C
C     ADDITIONAL FONTS
C     ----------------
C     THIS PROGRAM COMES WITH 3 COMPLETE SETS OF THE SAME CHARACTERS
C     USING DIFFERENT FONTS. FOR SPEED IN PLOTTING IT IS RECOMMENDED
C     THAT YOU USE THE SIMPLEX FONT. FOR FINISHED PLOTS SUITABLE FOR
C     PUBLICATION, BUT REQUIRING MORE TIME TO GENERATE A PLOT, IT IS
C     RECOMMENDED THAT YOU USE THE DUPLEX OR COMPLEX FONT - YOU CAN
C     EXPERIMENT WITH ANY OF THE 3 FONTS TO DETERMINE WHICH BEST MEETS
C     YOUR NEEDS.
C
C     TO USE ANY ONE OF THE FONTS MERELY BY SURE THAT IT IS DEFINED AS
C     UNIT 12 FOR INPUT (IF USING STANDARD FILENAMES IT SHOULD BE
C     NAMED PLOT.CHR). SO THAT SWITCHING FONTS CAN BE SIMPLY DONE
C     MERELY BY COPYING THE FONT THAT YOU WANT TO THE UNIT 12 THAT
C     YOU ARE USING FOR INPUT.
C
C     CONTROL CHARACTERS
C     ------------------------------------------------------------------
C     IN THE SOFTWARE CHARACTER TABLE ALL CHARACTERS TO BE PLOTTED WILL
C     HAVE PEN POSITION = 2 (DRAW) OR = 3 (MOVE). IN ADDITION THE TABLE
C     CURRENTLY CONTAINS 4 CONTROL CHARACTERS,
C
C     PEN POSITION = 0
C     ----------------
C     SHIFT THE NEXT PRINTED CHARACTER BY X AND Y. 3 CONTROL CHARACTERS
C     ARE PRESENTLY INCLUDED IN THE SOFTWARE CHARACTER TABLE TO ALLOW
C     SHIFTING.
C
C     {   = SHIFT UP (FOR SUPERSCRIPTS..............X= 0.0, Y= 0.5)
C     }   = SHIFT DOWN (FOR SUBSCRIPTS..............X= 0.0, Y=-0.5)
C     \   = SHIFT LEFT 1 CHARACTER (FOR BACKSPACE...X=-1.0, Y= 0.0)
C
C     PEN POSITION =-1
C     ----------------
C     SELECT THE NEXT PRINTED CHARACTER FROM THE ALTERNATE CHARACTER
C     SET. AT PRESENT THIS CONTROL CHARACTER IS,
C
C     |   = SWITCH TO ALTERNATE CHARACTER SET
C
C     THESE 4 CONTROL CHARACTERS ARE ONLY DEFINED BY THE VALUE OF THE
C     PEN POSITION IN THE SOFTWARE CHARACTER TABLE (I.E., THEY ARE NOT
C     HARD WIRED INTO THIS PROGRAM). AS SUCH BY MODIFYING THE SOFTWARE
C     CHARACTER TABLE THE USER HAS THE OPTION OF DEFINING ANY CONTROL
C     CHARACTERS TO MEET SPECIFIC NEEDS.
C
C     THESE CHARACTERS MAY BE USED IN CHARACTER STRINGS TO PRODUCE
C     SPECIAL EFFECTS. FOR EXAMPLE, TO PLOT SUBSCRIPT 5, B, SUPERSCRIPT
C     10 USE THE STRING,
C
C     }5B{1{0
C
C     TO PLOT B, SUBSCRIPT 5 AND SUPERSCRIPT 10 WITH THE 5 DIRECTLY
C     BELOW THE 1 OF THE 10 WE CAN USE THE BACKSPACE CHARACTER TO
C     POSITION THE 1 DIRECTLY ABOVE THE 5 USING THE STRING,
C
C     B}5\{1{0
C
C     TO PLOT UPPER CASE GREEK GAMMA FOLLOWED BY THE WORD TOTAL (I.E.,
C     RESONANCE TOTAL WIDTH) USE THE STRING.
C
C     |G TOTAL
C
C     NOTE, WHEN THESE CONTROL CHARACTERS ARE USED THEY ONLY EFFECT THE
C     NEXT 1 PRINTED CHARACTER (SEE, ABOVE EXAMPLE OF PLOTTING SUPER-
C     SCRIPT 10 WHERE THE SHIFT UP CONTROL CHARACTER WAS USED BEFORE THE
C     1 AND THEN AGAIN BEFORE THE 0 AND THE BACKSPACE AND SHIFT UP
C     CONTROL CHARACTERS WERE USED IN COMBINATION).
C
C     IF THESE 4 CONTROL CHARACTERS ARE NOT AVAILABLE ON YOUR COMPUTER
C     YOU CAN MODIFY THE SOFTWARE CHARACTER TABLE TO USE ANY OTHER 4
C     CHARACTERS THAT YOU DO NOT NORMALLY USE IN CHARACTER STRINGS (FOR
C     DETAILS SEE THE SOFTWARE CHARACTER TABLE).
C
C     STANDARD/ALTERNATE CHARACTER SETS
C     ------------------------------------------------------------------
C     THE SOFTWARE CHARACTER TABLE CONTAINS 2 SETS OF CHARACTERS WHICH
C     ARE A STANDARD SET (ALL CHARACTERS ON AN IBM KEYBOARD) AND AN
C     ALTERNATE SET (UPPER AND LOWER CASE GREEK CHARACTERS AND SPECIAL
C     CHARACTERS). TO DRAW A CHARACTER FROM THE ALTERNATE CHARACTER SET
C     PUT A RIGHT BRACKET CHARACTER (|) BEFORE A CHARACTER (SEE THE
C     ABOVE EXAMPLE AND THE SOFTWARE CHARACTER TABLE FOR DETAILS). THIS
C     CONTROL CHARACTER WILL ONLY EFFECT THE NEXT 1 PLOTTED CHARACTER.
C
C     SUB AND SUPER SCRIPTS
C     ------------------------------------------------------------------
C     TO DRAW SUBSCRIPT PRECEED A CHARACTER BY }. TO DRAW SUPERSCRIPT
C     PRECEED A CHARACTER BY { (SEE THE ABOVE EXAMPLE AND THE SOFTWARE
C     CHARACTER TABLE FOR DETAILS). THESE CONTROL CHARACTER WILL ONLY
C     EFFECT THE NEXT 1 PLOTTED CHARACTER.
C
C     BACKSPACING
C     ------------------------------------------------------------------
C     TO BACKSPACE ONE CHARACTER PRECEED A CHARACTER BY \ (SEE, THE
C     ABOVE EXAMPLE AND THE SOFTWARE CHARACTER TABLE FOR DETAILS). THIS
C     CONTROL CHARACTER WILL PERFORM A TRUE BACKSPACE AND WILL EFFECT
C     ALL FOLLOWING CHARACTERS IN THE SAME CHARACTER STRING.
C
C     PLOT DIMENSIONS
C     ---------------
C     ARE DEFINED BY USER INPUT. INTERNALLY THE PROGRAM WILL CREATE A
C     PLOT IN APPROXIMATELY A4 OR 8-1/2 BY 11 INCH FORMAT. DURING
C     OUTPUT THE PLOT IS TRANSFORMED TO THE UNITS (INCHES, CENTIMETERS,
C     MILLIMETERS, WHATEVER) OF THE PLOTTER BEING USED AND OUTPUT.
C
C===== PLOTTER/GRAPHICS TERMINAL INTERFACE =============================
C=======================================================================
      INCLUDE 'implicit.h'
      REAL*4 XMOUSE1,YMOUSE1
C-----08/08/2012 DEFINE CODE NAME
      CHARACTER*8 CODENAME
      COMMON/NAMECODE/CODENAME
      CHARACTER*1 ZABCD,XBCD,YBCD,MFBCD,MTBCD
      CHARACTER*4 LABEL
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LEADER/C1,C2,L1,LF,N1,N2,MAT,MF,MT
      COMMON/WHO/IZA,IE,NE,LTT,LABCM
      COMMON/LABELC/ZABCD(12),MFBCD(60),MTBCD(60),XBCD(60),YBCD(60)
      COMMON/INPAGE/IXYLOW,IXYHI,ISCR,NPSIZE,NPSM2,IMUSED
      COMMON/TEMPOI/TEMPIN,TEMP1,NOTEMP
      COMMON/PAGNOW/PAGE
      COMMON/DRACUL/MTABLE(7),LTABLE(7),MPLOTS(7),LPLOTS(7)
C-----7/14/2011 - added for MF/MT=10/5 to define ZAP and state.
      COMMON/FIL10COM/IZAP10(1000),LFS10(1000)
      COMMON/VERSON/IVERSE
      COMMON/PARTIN/INPART
      COMMON/LISCOM/LISO
      COMMON/COPC/LABEL(17)
      COMMON/COPI/MFIELD(3)
      COMMON/ZOOMCOM/IZOOM
      INCLUDE 'evalplot.h'
      DATA LASTZA/0/
      DATA LSTMAT/0/
      DATA LASTMF/0/
C-----08/08/2012 DEFINE CODE NAME
      CODENAME = 'EVALPLOT'
C-----INITIALIZE TIMER
      CALL TIMER
c-----------------------------------------------------------------------
C
C     DEFINE ALL I/O UNITS AND OPTIONALLY DEFINE FILENAMES.
C
c-----------------------------------------------------------------------
      CALL FILIO1
c-----------------------------------------------------------------------
C
C     READ RUN PARAMETERS AND ALL ZOOM COMMANDS (IF ANY).
C
c-----------------------------------------------------------------------
      CALL READIN
C-----LOAD DATA INTO LABELLED COMMON
      CALL SETUP
C-----LOAD SOFTWARE SYMBOL TABLES.
      CALL SYMIN
C-----DEFINE PAGE SIZE PARAMETERS.
      NPSIZE=MAXPOINT
      NPSM2=NPSIZE-2
C-----INITIALIZE PAGE COUNTERS AND (N,2N) LEVEL FLAG.
      PAGE=0.0d0
C-----2017/4/2 - Intialze to use DEFAULT X axis scaling
      IZOOM = 0
C-----INITIALIZE TOTAL PLOT AND TABLE COUNTS.
      DO 10 L=1,7
      LTABLE(L)=0
      LPLOTS(L)=0
      MPLOTS(L)=0
      MTABLE(L)=0
   10 CONTINUE
c-----------------------------------------------------------------------
C
C     INITIALIZE PLOTTER.
C
c-----------------------------------------------------------------------
      CALL SETPLT(1)
c-----------------------------------------------------------------------
C
C     START READING ENDF/B FORMAT FILE BY READING AND LISTING TAPE
C     LABEL LINE.
C
c-----------------------------------------------------------------------
      CALL COPYL
      WRITE(OUTP,460) LABEL,MFIELD(1)
C-----FIND NEXT SECTION.
   20 CALL CONTI
      IF(MTH.GT.0) GO TO 30
      IF(MATH.lt.0) go to 370
      go to 20
   30 IZA=C1H
C-----CHECK FOR NEW ZA OR MAT.
      IF(LASTZA.EQ.IZA.AND.LSTMAT.EQ.MATH) GO TO 120
c-----Check MTs for any preceding MAT
      if(LSTMAT.gt.0) then
      CALL MAXIE3(0)
      endif
c-----Initialize MTs for new MAT
      CALL MAXIE0
C-----NEW ZA OR MAT. INITIALIZE TEMPERATURE AND ENDF/B FORMAT VERSION.
      TEMPIN=0.0d0
      TEMP1 =0.0d0
      IVERSE=6
C-----DETERMINE IF THIS MATERIAL IS REQUESTED.
      IMATZA=IWANT(IZA,MATH,0,0,0.0d0,1)
      IF(IMATZA.lt.0) go to 370           ! < 0 = TEND = End of Run
      IF(IMATZA.eq.0) go to 60
      go to 70
C-----SKIP SECTION (MT).
   40 CALL SKIPS
      GO TO 20
C-----SKIP FILE (MF).
   50 CALL SKIPF
      GO TO 20
C-----SKIP MATERIAL (MAT).
   60 CALL SKIPM
      GO TO 20
C-----NEW ZA OR MAT. WRITE PLOT REPORT AT END OF MATERIAL.
   70 IF(LASTZA.LE.0) GO TO 100
C-----ONLY OUTPUT REPORT IF ANY SECTIONS READ.
      DO 80 L=1,7
      IF(LTABLE(L).GT.0) GO TO 90
   80 CONTINUE
      GO TO 100
c-----2020/3/21 - Added Target state
   90 CALL ZAHOLM(LASTZA,LISO,ZABCD)
      WRITE(OUTP,430) ZABCD,LSTMAT,LTABLE,LPLOTS
c-----------------------------------------------------------------------
C
C     NEW EVALUATION.
C
c-----------------------------------------------------------------------
  100 LASTZA=IZA
      LSTMAT=MATH
      do k=1,1000
      QEDTAB(k) = 0.0d0
      enddo
C-----3/22/2012 - INITIALIZE TO NEUTRON INCIDENT.
      INPART=1
C-----2020/3/21 - INITIALIZE TARGET STATE
      LISO   = 0
      DO 110 L=1,7
      MPLOTS(L)=MPLOTS(L)+LPLOTS(L)
      MTABLE(L)=MTABLE(L)+LTABLE(L)
      LPLOTS(L)=0
      LTABLE(L)=0
  110 CONTINUE
      GO TO 130
  120 IF(LASTMF.EQ.MFH) GO TO 140
      IF(MFH.LE.3) GO TO 140
  130 MTSIZE=0
  140 LASTMF=MFH
c-----------------------------------------------------------------------
C
C     USE MF=1, MT=451 TO DEFINE ENDF/B FORMAT VERSION (VI OR EARLIER).
C     READ TOTAL AND DELAYED NU-BAR. SAVE TO OUTPUT WITH CROSS SECTIONS.
C
c-----------------------------------------------------------------------
      IF(MFH.NE.1) GO TO 170
C-----DETERMINE ENDF/B FORMAT VERSION FROM MF=1, MT=451.
      IF(MTH.NE.451) GO TO 150
      CALL FILE1
      GO TO 40
C-----IF NOT REQUESTED SKIP SECTION.
  150 MF1OUT=IWANT(IZA,MATH,MFH,MTH,0.0d0,3)
      if(MF1OUT.le.0) GO TO 40
C-----ONLY USE TABULATED NU-BAR.
      IF(L2H.NE.2) GO TO 40
      LTABLE(1)=LTABLE(1)+1
c-----Allow input parameters to override DEFAULT X axis scaling
      IZOOM = MYZOOM(IMATZA)
C-----IF DELAYED NEUTRONS SKIP PRECEDING LIST RECORD.
      IF(MTH.NE.455) GO TO 160
      CALL CARDI(C1L,C2L,L1L,L2L,N1L,N2L)
      CALL LISTSKIP(N1L)
  160 CALL PAGEIT(0)
      GO TO 40
c-----------------------------------------------------------------------
C
C     READ ALL CROSS SECTIONS (NEUTRON OR PHOTON) AND FORM FACTORS.
C
c-----------------------------------------------------------------------
  170 IF(MFH.NE.3.AND.MFH.NE.23.AND.MFH.NE.27) GO TO 220
C-----EVEN IF CROSS SECTION PLOTS HAVE NOT BEEN REQUESTED THE FIRST
C-----LINE OF THE SECTION MUST BE READ TO DEFINE THE Q-VALUE FOR
C-----ANGULAR AND ENERGY DISTRIBUTIONS. HOWEVER, ONLY COUNT SECTIONS
C-----OF FILE 3 IF CROSS SECTION PLOTS HAVE BEEN REQUESTED.
  180 MT3OUT=IWANT(IZA,MATH,MFH,MTH,0.0d0,3)
C-----SKIP UNLESS FILE HAS BEEN REQUESTED OR MF=3 TO GET Q-VALUES.
      IF(MFH.NE.3.AND.MT3OUT.LE.0) GO TO 190
      IF(MT3OUT.GT.0.AND.MFH.EQ. 3) LTABLE(1)=LTABLE(1)+1
      IF(MT3OUT.GT.0.AND.MFH.EQ.23) LTABLE(6)=LTABLE(6)+1
      IF(MT3OUT.GT.0.AND.MFH.EQ.27) LTABLE(7)=LTABLE(7)+1
      CALL PAGEIT(0)
C-----IF SECTION NOT REQUESTED REMOVE IT FROM LIST.
      IF(MT3OUT.LE.0) MTSIZE=MTSIZE-1
C-----SKIP REMAINDER OF SECTION.
  190 CALL SKIPS
C-----READ HEAD LINE OF NEXT SECTION OR FEND LINE.
  200 CALL COPY1
      MFT=MFIELD(2)
      MTT=MFIELD(3)
C-----CONTINUE LOADING SECTION OF DATA UNTIL END OF FILE 3 IS FOUND.
      IF(MTT.LE.0) GO TO 210
      MTH=MTT
      GO TO 180
  210 IF(MFT.GT.0) GO TO 200
c-----------------------------------------------------------------------
C
C      PLOT CROSS SECTIONS.
C
c-----------------------------------------------------------------------
      IF(MTSIZE.GT.0) CALL PLOTIT
      MTSIZE=0
      GO TO 20
c-----------------------------------------------------------------------
C
C     IF CURRENT FILE (MF) HAS NOT BEEN REQUESTED, SKIP IT.
C
c-----------------------------------------------------------------------
  220 MFXOUT=IWANT(IZA,MATH,MFH,0,0.0d0,2)
      IF(MFXOUT.LE.0) GO TO 50
c-----------------------------------------------------------------------
C
C     READ ACTIVATION (MF=10) CROSS SECTIONS
C
c-----------------------------------------------------------------------
      IF(MFH.NE.10) GO TO 240
      NS = N1H
      LTABLE(4) = LTABLE(4) + NS
C-----LOOP OVER SECTIONS
      DO 230 IS=1,NS
      CALL PAGEIT(0)
c-----save ZAP and STATE.
      IZAP10(IS) = L1
      LFS10 (IS) = LF
  230 CONTINUE
      CALL PLOTIT
      MTSIZE = 0
      GO TO 40
c-----------------------------------------------------------------------
C
C     READ AND PLOT ANGULAR DISTRIBUTIONS, LEGENDRE COEFFICIENTS
C     OR COMBINATION = LEGENDRE FOLLOWED TABULATED.
C
c-----------------------------------------------------------------------
c-----2018/4/1 = updated for Electron Large Angle ang. dist.
  240 if(MFH.EQ.26.and.MTH.eq.525) then ! Electron ang. dist.
c-----skip TAB1
      CALL CARDI(C1L,C2L,L1L,L2L,N1L,N2L)
      CALL TERPI(NBT,INT,N1L)
c-----2019/1/5 - Additional Interpolation Law Tests
      CALL TERPTEST(NBT,INT,N1L,N2L,2)
      READ(ITAPE,250) (DUM,DUM,kk=1,N2L)
  250 format(6d11.4)
      go to 260
      endif
      IF(MFH.NE.4) GO TO 330
C-----IF SECTION HAS NOT BEEN REQUESTED, SKIP IT.
  260 MTOUT=IWANT(IZA,MATH,MFH,MTH,0.0d0,3)
      IF(MTOUT.LE.0) GO TO 40
      LVT = L1H
      LTT = L2H
      if(MFH.eq.26) then
      LVT = 0
      LTT = 2
      endif
C-----SKIP ISOTROPIC DISTRIBUTIONS.
c-----2021/9/9 - Skip MT instead of MF
      IF(LTT.EQ.0) GO TO 40
C-----SKIP TRANSFORMATION MATRIX - only MF=4
      if(MFH.eq.4) CALL CARDI(C1L,C2L,L1L,LABCM,N1H,N2L)
      IF(LVT.NE.0) CALL LISTSKIP(N1H)
C-----SKIP INTERPOLATION LAW BETWEEN ENERGIES.
      CALL CARDI(C1L,C2L,L1L,L2L,N1H,NE )
      CALL TERPI(NBT,INT,N1H) ! Never Used = TERPTEST not Needed
C-----DECIDE WHEATHER TABULATED OR LEGENDRE COEFFICIENTS.
      IF(LTT.EQ.2) GO TO 280
C-----LTT = 1 OR 3 = LEGENDRE OR LEGENDRE FOLLOWED BY TABULATED
      IF(LTT.EQ.3) WRITE(OUTP,270)IZA,MAT,MF,MT
  270 FORMAT(34x,' ZA/MAT/MF/MT=',I7,I5,I3,I4/
     1       34X,' Only Legendre coefficients plotted.'/
     3       34X,' High energy tabulated skipped.')
      LTT = 1
      CALL PAGLEG
      GO TO 310
C-----TABULATED. SET UP LOOP TO READ ALL TABULATED ANGULAR DISTRIBUTIONS
C-----AND LOAD INTO PAGING SYSTEM.
  280 LTABLE(2)=LTABLE(2)+NE
      DO 300 IE=1,NE
      CALL PAGEIT(0)
C-----SKIP IF NOT IN REQUESTED ENERGY RANGE.
      MTOUT=IWANT(IZA,MATH,MFH,MTH,QEDTAB(MTSIZE),4)
      IF(MTOUT.GT.0) GO TO 290
      MTSIZE=MTSIZE-1
      GO TO 300
C-----SKIP ALL CONSTANT DISTRIBUTIONS BUT HIGHEST ENERGY.
  290 IF(MTSIZE.NE.2) GO TO 300
      IF(XYEVAL(1,2,2).NE.XYEVAL(2,2,2)) GO TO 300
      MTSIZE=1
      QEDTAB(1)=QEDTAB(2)
      MTDEX1(1)=MTDEX1(2)
      MTDEX2(1)=MTDEX2(2)
  300 CONTINUE
C-----IF ONLY CONSTANT DISTRIBUTIONS...NO PLOTS.
      IF(MTSIZE.EQ.1.AND.XYEVAL(1,2,1).EQ.XYEVAL(2,2,1)) GO TO 320
  310 IF(MTSIZE.GT.0) CALL PLOTIT
  320 MTSIZE=0
      GO TO 40
c-----------------------------------------------------------------------
C
C     READ AND PLOT NEUTRON OR PHOTON SPECTRA.
C
c-----------------------------------------------------------------------
  330 IF(MFH.NE.5.AND.MFH.NE.15) GO TO 50
C-----IF SECTION HAS NOT BEEN REQUESTED, SKIP IT.
      MTOUT=IWANT(IZA,MATH,MFH,MTH,0.0d0,3)
c-----2021/9/9 - Corrected to skip MT instrad of MAT
      IF(MTOUT.LE.0) GO TO 40          ! Skip MT
      NK=N1H
      DO 360 L=1,NK
C-----CAN ONLY PLOT TABULATED ENERGY DISTRIBUTIONS. SKIP SECTION
C-----IF DISTRIBUTIONS ARE NOT TABULATED.
      CALL MULTIC(LF)
      IF(LF.NE.1) GO TO 40
      CALL CARDI(C1L,C2L,L1L,L2L,N1H,NE )
      CALL TERPI(NBT,INT,N1H)  ! Never used = TERPTEST not Needed
      IF(MFH.EQ.5) LTABLE(3)=LTABLE(3)+NE
      IF(MFH.EQ.15) LTABLE(5)=LTABLE(5)+NE
C-----SET UP LOOP OVER ENERGY DISTRIBUTIONS AND LOAD INTO PAGING
C-----SYSTEM.
      DO 350 IE=1,NE
      CALL PAGEIT(1)
C-----SKIP IF NOT IN REQUESTED ENERGY RANGE.
      MTOUT=IWANT(IZA,MATH,MFH,MTH,QEDTAB(MTSIZE),4)
      IF(MTOUT.GT.0) GO TO 340
      MTSIZE=MTSIZE-1
      GO TO 350
C-----ELIMINATE SPIKE AT THRESHOLD
  340 IF(XYEVAL(2,2,MTSIZE).GE.50.0d0) MTSIZE=MTSIZE-1
  350 CONTINUE
      IF(MTSIZE.GT.0) CALL PLOTIT
      MTSIZE=0
  360 CONTINUE
      GO TO 40
C-----------------------------------------------------------------------
C
C     END OF RUN. COMPLETE OUTPUT REPORT, FINISH PLOTTED OUTPUT FILE.
C
C-----------------------------------------------------------------------
  370 IF(LASTZA.GT.0) GO TO 380
C-----------------------------------------------------------------------
C
C     NO PLOT? CONSIDER ERROR
C
C-----------------------------------------------------------------------
      WRITE(OUTP,450)
      CALL ENDERROR
C-----------------------------------------------------------------------
C
C     NORMAL END - OUTPUT SUMMARY REPORT AND STOP
C
C-----------------------------------------------------------------------
  380 DO 390 L=1,7
      IF(LTABLE(L).GT.0) GO TO 400
  390 CONTINUE
      GO TO 410
c-----2020/3/21 - Added Target state
  400 CALL ZAHOLM(LASTZA,LISO,ZABCD)
      WRITE(OUTP,430) ZABCD,LSTMAT,LTABLE,LPLOTS
  410 DO 420 L=1,6
      MPLOTS(L)=MPLOTS(L)+LPLOTS(L)
      MTABLE(L)=MTABLE(L)+LTABLE(L)
  420 CONTINUE
      WRITE(OUTP,440) MTABLE,MPLOTS
c-----Check MT list for preceding MAT
      CALL MAXIE3(0)
c-----Print Final message if ALL data not tabulated to same Max. Energy
      CALL MAXIE4(0)
c-----End of run - Normal
      CALL ENDIT
  430 FORMAT(1X,12A1,I5,7I4,'*',7I4)
  440 FORMAT(1X,72('-')/' Totals',11X,7I4,'*',7I4/1X,72('-'))
  450 FORMAT(' NO Requested Materials Found. NO Plots Generaret.')
  460 FORMAT(' Tape Label'/1X,72('-')/1X,16A4,A2,I4/
     1 1X,72('-')/' Plot Report'/1X,72('-')/
     2 20X,'Tables by MF',17X,'Plots by MF'/1X,72('-')/
     3 ' Material      MAT','   3   4   5  10  15  23  27','*',
     4 '   3   4   5  10  15  23  27'/1X,72('-'))
      END
      SUBROUTINE MULTIC(LF)
C=======================================================================
C
C     READ MF=5 OR 15 YIELD
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/XYMULT/XMULT(1200),YMULT(1200),NBTY(100),INTY(100),NPY,NRY
      COMMON/LASTE/ELAST
      CALL CARDI(C1L,C2L,L1L,LF,NRY,NPY)
      NPX=NPY
      IF(NPY.GT.1200) NPY=1200
      ELAST=-1.0d0
      CALL TERPI(NBTY,INTY,NRY)
c-----2019/1/5 - Additional Interpolation Lw Tests
      CALL TERPTEST(NBTY,INTY,NRY,NPY,2)
      CALL POINTI(XMULT,YMULT,NPY)
      IF(NPY.GE.NPX) GO TO 20
      II=NPY+1
      DO 10 KK=II,NPX,3
      CALL SKIP1
   10 CONTINUE
   20 RETURN
      END
      REAL*8 FUNCTION YIELD(E)
C=======================================================================
C
C     DEFINE MF=5 OR 15 YIELD AT ENERGY E.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/XYMULT/XMULT(1200),YMULT(1200),NBTY(100),INTY(100),NPY,NRY
C-----USE FIRST VALUE BELOW START OF TABLE.
      IF(E.GT.XMULT(1)) GO TO 10
      YIELD=YMULT(1)
      RETURN
C-----USE LAST VALUE BEYOND END OF TABLE.
   10 IF(E.GE.XMULT(NPY)) GO TO 40
C-----LOOP OVER POINTS.
      IP2=1
      DO 30 IR=1,NRY
      IP1=IP2
      IP2=NBTY(IR)
      DO 20 IP=IP1,IP2
      IF(E.lt.XMULT(IP)) go to 50
      IF(E.eq.XMULT(IP)) go to 60
   20 CONTINUE
   30 CONTINUE
C-----USE LAST VALUE BEYOND END OF TABLE.
   40 YIELD=YMULT(NPY)
      RETURN
C-----INTERPOLATE IN TABLE.
   50 INTX=INTY(IR)
      YIELD=TERPIT(E,XMULT(IP-1),XMULT(IP),YMULT(IP-1),YMULT(IP),INTX)
      RETURN
C-----USE TABULATED VALUE.
   60 YIELD=YMULT(IP)
      RETURN
      END
      SUBROUTINE READIN
C=======================================================================
C
C     READ RUN PARAMETERS AND ALL ZOOM COMMANDS (IF ANY).
C
C=======================================================================
      INCLUDE 'implicit.h'
      REAL*4 XYSS
c-----2017/5/5 - Added arrays for character input
      CHARACTER*1 FIELD1,FIELD2,FIELD3,FIELD4,FIELD5
      CHARACTER*4 ANSWER,MESS1
      CHARACTER*16 GRIDTYPE
      CHARACTER*72 NAMEIN
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/IOSTATUS/ISTAT1,ISTAT2
      COMMON/GRIDDY/IMFINE(2)
      COMMON/TEMPOI/TEMPIN,TEMP1,NOTEMP
      COMMON/EDGE/XYEDGE(2,2),XYMAJR(2,2),RASTER(2)
      COMMON/PLOTXY/XYPLOT(2,2),NBORD
      COMMON/VANCED/ISMALX,ISMALY,NSMALX,NSMALY
      COMMON/THICKY/THICK,ITHICK,NTHICK(3),IMTHIN
c-----11/22/2013 OUT9 replaced NORMX
      CHARACTER*1 FIELD11
      COMMON/NORMCC/FIELD11(11,6)
      COMMON/MAXRAT/RATMIN
      COMMON/MULTHT/HTMULT
      COMMON/NAMEX/NAMEIN
      COMMON/PALCOM/MYPAL
      INCLUDE 'evalplot.h'
      DIMENSION ANSWER(2),MESS1(2),XYSS(2,2),GRIDTYPE(6),
     1 FIELD1(11),FIELD2(11),FIELD3(11),FIELD4(11),FIELD5(11)
      DATA EVMEV/1.0d-6/
      DATA MESS1/' MAT','  ZA'/
      DATA ANSWER/'  No',' Yes'/
      DATA GRIDTYPE/
     1 'Tick Marks      ',
     2 'Solid (Coarse)  ',
     3 'Dashed (Coarse) ',
     4 'Solid (Fine)    ',
     5 'Dashed (Fine)   ',
     6 'Solid/Dashed    '/
C-----2017/5/6 - Initialize arrays for character input
      do i=1,11
      FIELD1(i) = ' '
      FIELD2(i) = ' '
      FIELD3(i) = ' '
      FIELD4(i) = ' '
      FIELD5(i) = ' '
      enddo
C-----DEFINE PHYSICAL SIZE OF PLOTTER (IN ANY DIMENSIONS, E.G., INCHES,
C-----CM, MM, ETC.), NUMBER OF PLOTS PER FRAME IN X AND Y DIRECTIONS.
      IF(ISTAT1.EQ.1) GO TO 20
c***** 2017/5/6 - Changed all floating point input to character.
      READ(INP,10,END=20,ERR=20) FIELD1,FIELD2,FIELD3,FIELD4,
     1 NSMALX,NSMALY,(FIELD5(i),i=8,11)
   10 FORMAT(44A1,2I11,4A1)
      CALL IN9(XYPLOT(1,1),FIELD1)
      CALL IN9(XYPLOT(2,1),FIELD2)
      CALL IN9(XYPLOT(1,2),FIELD3)
      CALL IN9(XYPLOT(2,2),FIELD4)
      CALL IN9(HTMULT     ,FIELD5)
c***** 2017/5/6 - Changed all floating point input to character.
      GO TO 30
C-----DEFINE DEFAULT VALUES
   20 ISTAT1      = 1
      XYPLOT(1,1) =  0.0d0
      XYPLOT(2,1) = 12.0d0
      XYPLOT(1,2) =  0.0d0
      XYPLOT(2,2) = 10.0d0
      NSMALX      = 1
      NSMALY      = 1
      HTMULT      = 1.5d0
c-----------------------------------------------------------------------
C
C     DEFINE LOCAL PLOTTER SIZE
C
c-----------------------------------------------------------------------
   30 CALL MYSIZE(XYSS(1,1),XYSS(1,2))
      DO 40 I=1,2
      XYPLOT(I,1)=XYSS(I,1)
      XYPLOT(I,2)=XYSS(I,2)
      XYEDGE(I,1)=XYSS(I,1)
      XYEDGE(I,2)=XYSS(I,2)
   40 CONTINUE
      IF(NSMALX.LE.1) NSMALX=1
      IF(NSMALY.LE.1) NSMALY=1
      WRITE(OUTP,200) XYPLOT,NSMALX,NSMALY
c-----2014/7/20 - Restricted character size multiplier to 0.5 to 1.5
c-----Otherwise MF=10 titles do not fit on plot.
c-----2019/4/09 - Changed to Default 1.5    and range     0.5 to 2.5
      IF(HTMULT.LE.0.0d0) HTMULT=1.5 ! Default 1.5
      IF(HTMULT.LT.0.5d0) HTMULT=0.5 ! Mimimum
      IF(HTMULT.GT.2.5d0) HTMULT=2.5 ! maximum
      WRITE(OUTP,210) HTMULT
C-----READ ENDF/B DATA FILENAME - USE STANDARD IF BLANK.
      IF(ISTAT1.EQ.1) GO TO 60
      READ(INP,50,END=60,ERR=60) NAMEIN
   50 FORMAT(A72)
      IF(NAMEIN.EQ.' ') NAMEIN = 'ENDFB.IN'
      GO TO 70
C-----USE DEFAULT NAME
   60 NAMEIN = 'ENDFB.IN'
      ISTAT1 = 1
C-----PRINT FINAL NAME
   70 WRITE(OUTP,80) NAMEIN
   80 FORMAT(1X,72('-')/' ENDF/B Data Filename'/72('-')/1X,A72/
     1 1X,72('-'))
C-----OPEN ENDF/B DATA FILE.
      CALL FILIO2
c-----------------------------------------------------------------------
C
C     TERMINATE OF ERROR OPENING ENDF/B DATA FILE
C
c-----------------------------------------------------------------------
      IF(ISTAT2.EQ.1) THEN
      WRITE(OUTP,90) NAMEIN
   90 FORMAT(' ERROR - Opening ENDF/B data file'/1X,A72)
      CALL ENDERROR
      ENDIF
C-----READ ALL INPUT COMMANDS.
      IF(ISTAT1.EQ.1) GO TO 110
c***** 2017/5/6 - Changed all floating point input to character.
      READ(INP,100,END=110,ERR=110)
     1 MODGET,MYGRID,NBORD,ITHICK,NOTEMP,FIELD1,MYPAL
  100 FORMAT(5I11,11A1,I4)
      CALL IN9(RATMIN,FIELD1)
c***** 2017/5/6 - Changed all floating point input to character.
      GO TO 120
C-----DEFINE DEFAULT VALUES
  110 ISTAT1   = 1
      MODGET   = 0
      MYGRID   = 0
      NBORD    = 0
      ITHICK   = 0
      NOTEMP   = 0
      RATMIN   = 1.0d-8  ! 2017/4/9 - changed from 10^10 to 10^8
C-----DEFINE EITHER MAT OR ZA RETRIEVAL CRITERIA.
  120 IF(MODGET.NE.0) MODGET=1
      IF(MYGRID.LT.0.OR.MYGRID.GT.5) MYGRID=0
      IF(NBORD.NE.0) NBORD=1
C-----SHOULD CHARACTERS BE THICK.
      IMTHIN=0
      IF(ITHICK.GE.0) GO TO 130
C-----NO.
      IMTHIN=1
      ITHICK=-ITHICK
  130 IF(ITHICK.LT.0.OR.ITHICK.GT.5) ITHICK=0
      IF(NOTEMP.NE.0) NOTEMP=1
C-----DEFINE MAXIMUM RATIO.
      IF(RATMIN.LT.0.0d0) RATMIN=0.0d0
      IF(RATMIN.GT.1.0d0) RATMIN=1.0d0/RATMIN
C-----PRINT INTERPRETATION OF INPUT PARAMETERS.
      CALL OUT9(RATMIN,FIELD11(1,1))
      II1=2-NOTEMP
      WRITE(OUTP,220) MESS1(MODGET+1),
     1 GRIDTYPE(MYGRID+1),ANSWER(NBORD+1),
     2 ITHICK,ANSWER(II1),(FIELD11(kk,1),kk=1,11)
      IF(MYPAL.EQ.0) THEN
      WRITE(OUTP,230)
      ELSE
      WRITE(OUTP,240)
      ENDIF
C-----DEFINE COARSE AND FINE GRID.
      IMFINE(1)=0
      IMFINE(2)=0
      IF(MYGRID.LE.2) IMFINE(1)=MYGRID
      IF(MYGRID.EQ.3.OR.MYGRID.EQ.5) IMFINE(1)=1
      IF(MYGRID.EQ.4) IMFINE(1)=2
      IF(MYGRID.EQ.3) IMFINE(2)=1
      IF(MYGRID.GT.3) IMFINE(2)=2
C-----------------------------------------------------------------------
C
C     READ REQUEST RANGES.
C
C-----------------------------------------------------------------------
      IF(MODGET.EQ.0) WRITE(OUTP,250)
      IF(MODGET.NE.0) WRITE(OUTP,260)
      DO 170 NMATZA=1,MAXGET
      IF(ISTAT1.EQ.1) GO TO 150
c***** 2017/5/6 - Changed all floating point input to character.
      READ(INP,140,END=150,ERR=150)
     1 MATMIN(NMATZA),MFMIN(NMATZA),MTMIN(NMATZA),
     2 FIELD1      ,MATMAX(NMATZA),MFMAX(NMATZA),MTMAX(NMATZA),
     3 FIELD2      ,NTYPE(NMATZA)
  140 FORMAT(I6,I2,I3,11A1,I6,I2,I3,11A1,I11)
      CALL IN9(EMIN(NMATZA),FIELD1)
      CALL IN9(EMAX(NMATZA),FIELD2)
c***** 2017/5/6 - Changed all floating point input to character.
C-----REQUESTS ARE TERMINATED BY NO MAT/ZA RANGE.
      IF(MATMIN(NMATZA).NE.0.OR.MATMAX(NMATZA).NE.0) GO TO 160
c-----------------------------------------------------------------------
C
C     END OF INPUT - IF NO RANGES SET TO MAXIMUM
C
c-----------------------------------------------------------------------
  150 IF(NMATZA.GT.1) GO TO 180
      ISTAT1    = 1
      MODGET    = 0
      MATMIN(1) = 1
      MATMAX(1) = 9999
      MFMIN (1) = 1
      MFMAX (1) = 99
      MTMIN (1) = 1
      MTMAX (1) = 999
      NTYPE (1) = 0
      MYZOOM(I) = 0
      EMIN  (1) = 0.0d0
      EMAX  (1) = 1.0d11 ! 100 GeV for photon data
C-----CHECK LIMITS.
  160 IF(MATMAX(NMATZA).LT.MATMIN(NMATZA)) MATMAX(NMATZA)=MATMIN(NMATZA)
      IF(MFMAX (NMATZA).LT.MFMIN (NMATZA)) MFMAX(NMATZA)=MFMIN(NMATZA)
      IF(MTMAX (NMATZA).LT.MTMIN (NMATZA)) MTMAX(NMATZA)=MTMIN(NMATZA)
      IF(NTYPE (NMATZA).LT.0) NTYPE(NMATZA)=-1
c-----2020/1/9 - Ignore ALL but neutron groups (no photon, electron)
      IF(NTYPE(NMATZA).GT.14) NTYPE(NMATZA)= 0
C-----LIST REQUEST.
      CALL OUT9(EMIN(NMATZA),FIELD11(1,1))
      CALL OUT9(EMAX(NMATZA),FIELD11(1,2))
c-----2017/4/2 - Set option to override MF=1 and 4 DEFAULT X scaling
      if(EMIN(NMATZA).gt.0.0d0.or.
     1   EMAX(NMATZA).gt.0.0d0)    MYZOOM(NMATZA) = 1
      WRITE(OUTP,270) MATMIN(NMATZA),MFMIN(NMATZA),MTMIN(NMATZA),
     1 (FIELD11(kk,1),kk=1,11),
     2 MATMAX(NMATZA),MFMAX(NMATZA),MTMAX(NMATZA),
     3 (FIELD11(kk,2),kk=1,11),NTYPE(NMATZA)
C-----CONVERT ENERGY RANGE FROM EV TO MEV (INTERNAL UNITS).
      EMIN(NMATZA)=EVMEV*EMIN(NMATZA)
      EMAX(NMATZA)=EVMEV*EMAX(NMATZA)
  170 CONTINUE
      NMATZA=MAXGET+1
C-----END OF REQUESTS.
  180 NMATZA=NMATZA-1
      WRITE(OUTP,280)
C-----TERMINATE IF NO REQUESTS.
      IF(NMATZA.GT.0) GO TO 190
      WRITE(OUTP,290)
      CALL ENDERROR
  190 RETURN
  200 FORMAT(///' Plot Evaluated Data from the ENDF/B Format',
     1 ' (EVALPLOT 2023-1)'/1X,72('-')/
     2 ' Description of Plotter and Plots per Frame'/1X,72('-')/
     3 ' X Dimensions (X-Min to X-Max)-----------------',
     4 F11.4,' to ',F11.4,' Inches'/
     5 ' Y Dimensions (Y-Min to Y-Max)-----------------',
     6 F11.4,' to ',F11.4,' Inches'/
     7 ' Layout of Plots per Frame (X by Y)------------',
     8 I11,' by ',I11)
  210 FORMAT(
     1 ' Character Size Multiplier---------------------',F11.2)
  220 FORMAT(1X,72('-')/' Input Parameters'/1X,72('-')/
     1 ' Retrieval Criteria----------------------------',7X,A4/
     2 ' Grid Type-------------------------------------',A16/
     3 ' Should Border be Plotted on Each Plot---------',7X,A4/
     4 ' Line Thickness--------------------------------',I11/
     5 ' Cross Section Temperature on Plots------------',7X,A4/
     6 ' Mimimum Ratio of Y Min to Max Range of Plot---',11A1)
  230 FORMAT(
     1 ' On Screen Background Color--------------------','Black')
  240 FORMAT(
     1 ' On Screen Background Color--------------------','White')
  250 FORMAT(1X,72('-')/' Request Ranges'/1X,72('-')/
     1 '         Mimimum          ',
     3 '            Maximum          '/
     2 '    MAT MF  MT Energy-eV  ',
     4 '       MAT MF  MT Energy-eV    Type'/1X,72('-'))
  260 FORMAT(1X,72('-')/' Request Ranges'/1X,72('-')/
     1 '         Minimum          ',
     3 '            Maximum          '/
     2 '     ZA MF  MT Energy-eV  ',
     4 '        ZA MF  MT Energy-eV    Type'/1X,72('-'))
  270 FORMAT(I7,I3,I4,11A1,I11,I3,I4,11A1,I7)
  280 FORMAT(1X,72('-'))
  290 FORMAT(' NO Request Ranges - Execution Terminated'/1X,72('-'))
      END
      FUNCTION IWANT(IZA,MAT,MF,MT,E,MYWAY)
C=======================================================================
C
C     DEFINE WHETHER OR NOT THE CURRENT DATA HAS BEEN REQUESTED
C     BY ANY REQUEST.
C
C     MYWAY = 1 - MAT          OR ZA
C           = 2 - MAT/MF       OR ZA/MF
C           = 3 - MAT/MF/MT    OR ZA/MF/MT
C           = 4 - MAT/MF/MT/E  OR ZA/MF/MT/E
C
C=======================================================================
      INCLUDE 'implicit.h'
      INCLUDE 'evalplot.h'
      DIMENSION MFOK(8)
      DATA MFOK/1,3,4,5,10,15,23,27/
c-----------------------------------------------------------------------
C
C     FOR REQUESTS ONLY ALLOW FILES 1, 3, 4, 5, 10, 15, 23 AND 27.
C
c-----------------------------------------------------------------------
      IMEND=0
      IF(MODGET.EQ.0) IMEND=-1
      IF(MYWAY.LT.2) GO TO 20
      DO 10 K=1,8
      IF(MF.EQ.MFOK(K)) GO TO 20
   10 CONTINUE
c-----2018/4/1 = added MF/MT=26/525 = electron ang. dist.
      if(MF.eq.26.and.MT.le.  0) go to 20
      if(MF.eq.26.and.MT.eq.525) go to 20
      GO TO 70                            ! Not Requested
c-----------------------------------------------------------------------
C
C     LOOP OVER REQUESTS.
C
c-----------------------------------------------------------------------
   20 DO 60 I=1,NMATZA
C-----USE MAT OR ZA RANGE.
      IF(MODGET.NE.0) GO TO 30
c
c     MAT Range
c
C-----FOR MAT KEEP TRACK IF CURRENT MAT IS IN RANGE OF ANY REQUESTS.
      IF(MAT.GT.MATMAX(I)) GO TO 60
      IMEND=0
      IF(MAT.LT.MATMIN(I)) GO TO 60
      IF(MYWAY.lt.2) go to 80
      go to 40
c
c     ZA Range
c
   30 IF(IZA.LT.MATMIN(I).OR.IZA.GT.MATMAX(I)) GO TO 60
      IF(MYWAY.lt.2) go to 80
c
c     MF Range
c
c-----2021/1/28 - Skip MF test for nu-bar = MT=452 to 456
c-----            Allow MT=452 to 456 grouped with ant MF
   40 if(MT.ge.452.and.MT.le.456) go to 50
      IF(MF.LT.MFMIN(I).OR.MF.GT.MFMAX(I)) GO TO 60
      IF(MYWAY.le.2) go to 80
c
c     MT Range
c
   50 IF(MT.LT.MTMIN(I).OR.MT.GT.MTMAX(I)) GO TO 60
      IF(MYWAY.le.3) go to 80
c
C     ENERGY RANGE.
c
      IF(E.LT.EMIN(I)) GO TO 60
      IF(EMAX(I).GT.0.0d0.AND.E.GT.EMAX(I)) GO TO 60
      GO TO 80
   60 CONTINUE
      IF(IMEND.EQ.0) GO TO 70
C-----BEYOND MAT RANGE OF ALL REQUESTS.
      IWANT=-1
      RETURN
C-----NOT REQUESTED.
   70 CONTINUE
      IWANT=0
      RETURN
C-----REQUESTED BY DATA REQUEST I.
   80 CONTINUE
      IWANT=I
      RETURN
      END
      FUNCTION IWANT1(IZA,MAT,MF,MT,E,MYWAY)
C=======================================================================
C
C     DEFINE WHETHER OR NOT THE CURRENT DATA HAS BEEN REQUESTED
C     BY REQUEST IMATZA (SEE, COMMON/MATZA/ BELOW).
C
C     MYWAY = 1 - MAT          OR ZA
C           = 2 - MAT/MF       OR ZA/MF
C           = 3 - MAT/MF/MT    OR ZA/MF/MT
C           = 4 - MAT/MF/MT/E  OR ZA/MF/MT/E
C
C=======================================================================
      INCLUDE 'implicit.h'
      INCLUDE 'evalplot.h'
      DIMENSION MFOK(8)
      DATA MFOK/1,3,4,5,10,15,23,27/
c-----------------------------------------------------------------------
C
C     FOR REQUESTS ONLY ALLOW FILES 1, 3, 4, 5, 10, 15, 23 AND 27.
C
c-----------------------------------------------------------------------
      IF(MYWAY.LT.2) GO TO 20
      DO 10 K=1,8
      IF(MF.EQ.MFOK(K)) GO TO 20
   10 CONTINUE
c-----2018/4/1 = added MF/MT=26/525 = electron ang. dist.
      if(MF.eq.26.and.MT.le.  0) go to 20
      if(MF.eq.26.and.MT.eq.525) go to 20
      GO TO 80
c-----------------------------------------------------------------------
C
C     LOOP OVER REQUESTS.
C
c-----------------------------------------------------------------------
c
c     MAT Range
c
   20 KMATZA=IMATZA
   30 IF(MODGET.NE.0) GO TO 40
C-----FOR MAT KEEP TRACK IF CURRENT MAT IS IN RANGE OF ANY REQUESTS.
      IF(MAT.GT.MATMAX(KMATZA)) GO TO 70
      IF(MAT.LT.MATMIN(KMATZA)) GO TO 70
      IF(MYWAY.lt.2) go to 90
      go to 50
c
C     ZA Range.
c
   40 IF(IZA.LT.MATMIN(KMATZA).OR.IZA.GT.MATMAX(KMATZA)) GO TO 70
      IF(MYWAY.lt.2) go to 90
c
C     MF Range.
c
c-----2021/1/28 - Skip MF test for nu-bar = MT=452 to 456
c-----            Allow MT=452 to 456 grouped with ant MF
   50 if(MT.ge.452.and.MT.le.456) go to 60
      IF(MF.LT.MFMIN(KMATZA).OR.MF.GT.MFMAX(KMATZA)) GO TO 70
      IF(MYWAY.le.2) go to 90
c
C     MT Range.
c
   60 IF(MT.LT.MTMIN(KMATZA).OR.MT.GT.MTMAX(KMATZA)) GO TO 70
      IF(MYWAY.le.3) go to 90
c
C     ENERGY RANGE.
c
      IF(E.LT.EMIN(KMATZA)) GO TO 70
      IF(EMAX(KMATZA).GT.0.0d0.AND.E.GT.EMAX(KMATZA)) GO TO 70
      GO TO 90
C-----CHAIN REQUESTS TOGETHER BY USING ALL PRECEDING REQUESTS WITH
C-----NEGATIVE TYPE.
   70 IF(KMATZA.LE.1) GO TO 80
      KMATZA=KMATZA-1
      IF(NTYPE(KMATZA).LT.0) GO TO 30
C-----NOT REQUESTED.
   80 IWANT1=0
      RETURN
C-----REQUESTED.
   90 IWANT1=IMATZA
      RETURN
      END
      SUBROUTINE FILE1
C=======================================================================
C
C     DEFINE FORMAT TO BE ENDF/B-IV, V OR VI.
C
C     THE ENDF/B FORMAT CAN BE DETERMINED FROM THE SECOND LINE.
C     ENDF/B-IV = N1 - LINE COUNT (POSITIVE)
C     ENDF/B-V  = N1 = N2 = 0
C     ENDF/B-VI = N1 = 0, N2 = VERSION NUMBER (6 OR MORE)
C
C     The First line has already been read.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/LEADER/C1,C2,L1,LF,N1,N2,MAT,MF,MT
      COMMON/VERSON/IVERSE
      COMMON/PARTIN/INPART
      COMMON/LISCOM/LISO
      COMMON/TEMPOI/TEMPIN,TEMP1,NOTEMP
C-----3/22/2012 - INITIALIZE TO NEUTRON INCIDENT.
      INPART=1
C-----2020/3/21 - INITIALIZE TARGET STATE
      LISO   = 0
c-----------------------------------------------------------------------
C
C     DETERMINE ENDF/B FORMAT VERSION.
C
c-----------------------------------------------------------------------
c
c     Read second line
c
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      IVERSE=4
      LISX = L2             ! Save - may be idomeric state number
C-----CHECK FOR ENDF/B-IV.
      IF(N1.GT.0) GO TO 10
C-----NOT ENDF/B-IV. READ THIRD LINE.
      N2X=N2
c
c     Read third line
c
      CALL CARDI(C1,C2,L1,L2,N1,N2)
      IVERSE=5
C-----CHECK FOR ENDF/B-V FORMAT.
      IF(N2X.LE.0) GO TO 10
C-----ENDF/B-VI.
      IVERSE=6
C-----DEFINE INCIDENT PARTICLE.
c
c     INPART    =  1 = Neutron
c               =  0 = Photon
c               = 11 = Electron
c
      INPART=N1/10
      IF(INPART.le.0) INPART=0 ! default in photon
C-----DEFINE TEMPERATURE FROM FOURTH LINE.
c
c     Read fourth line
c
      CALL CARDI(TEMP1,C2L,L1L,L2L,N1L,N2L)
c-----Define target state
      LISO = LISX
   10 RETURN
      END
      SUBROUTINE PLOTIT
C=======================================================================
C
C     PLOT ALL DATA INCLUDING,
C
C     (1) CROSS SECTIONS        - MF = 3 OR 23 or 1 = nu-bar
C     (2) ANGULAR DISTRIBUTIONS - MF = 4 OR 26
C     (3) LEGENDRE COEFFICIENTS - MF = 4
C     (4) ENERGY DISTRIBUTIONS  - MF = 5
C     (5) ACTIVATION CROSS SECT.- MF =10
C     (6) FORM FACTORS          - MF =27
C     (7) SCATTERING FACTORS    - MF =27
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/WHO/IZA,IE,NE,LTT,LABCM
      COMMON/PLANE/XYPLAN(2,2,10)
      COMMON/INCHES/XYINCH(2,2,10),XYSIZE(2),DXYP(2,10)
      COMMON/EDGE/XYEDGE(2,2),XYMAJR(2,2),RASTER(2)
      COMMON/SIZES/XL(3),YL(6),XYMID(2),HT,HTX1,HTX2
      COMMON/SUBPLT/LFRAME,NFRAME
      COMMON/TYPLIN/STEPER(7,5),LINTYP
      COMMON/BOXIN/BOXX(2,2),BOXY(2),TIPS(3),YNAME,YSPAC2,NREACT
      COMMON/RESET/LOOP
      COMMON/THICKY/THICK,ITHICK,NTHICK(3),IMTHIN
      COMMON/FIL10COM/IZAP10(1000),LFS10(1000)
      COMMON/ZOOMCOM/IZOOM
      COMMON/LETMIN/MINUSOK
      COMMON/BXLIMS/BOXR(2,2)
      COMMON/MAXRAT/RATMIN
      COMMON/LINLOG/IXYWAY(2,10)
      COMMON/FIRSTCOM/XFIRST(2),YFIRST(2)
      COMMON/ACTIVCOM/IMACTV
      INCLUDE 'evalplot.h'
c-----------------------------------------------------------------------
C
C     ONLY ALLOW LEGENDRE COEFFICIENT PLOTS TO HAVE NEGATIVE Y RANGE.
C
c-----------------------------------------------------------------------
      IMINUS=0
      IF(MFH.EQ.4.AND.LTT.EQ.1) IMINUS=1
c-----------------------------------------------------------------------
C
C     SET UP PAGING SYSTEM
C
c-----------------------------------------------------------------------
      CALL PAGEND
c-----------------------------------------------------------------------
C
C     DEFINE TITLES FOR LEGEND BOX.
C
c-----------------------------------------------------------------------
      DO 10 L=1,MTSIZE
C-----7/14/2011 - FOR MF=10 USE ZAP AND STATE
      IF(MFH.EQ.10) THEN
      CALL TIT10(IZAP10(L),LFS10(L),MTBOX(1,L),IMTBOX(L))
      GO TO 10
      ENDIF
      CALL TITBOX(MFH,MTTAB(L),QEDTAB(L),LTT,MTBOX(1,L),IMTBOX(L))
   10 CONTINUE
c-----------------------------------------------------------------------
C
C     DEFINE TITLES FOR PLOT.
C
c-----------------------------------------------------------------------
c-----2018/4/1 - Added MF=26 (Electron Large Angle)
      IF(MFH.EQ.4.OR.MFH.EQ.5.OR.MFH.EQ.15.OR.MFH.eq.26)
     1 CALL TITLE4(MFH,MTTAB(1),LABCM,LTT)
c-----------------------------------------------------------------------
C
C     REQUEST LOOP...FOR EACH REQUEST PLOT ALL REQUESTED DATA.
C
c-----------------------------------------------------------------------
      DO 380 IMATZA=1,NMATZA
c-----------------------------------------------------------------------
C
C     SKIP CHAINED REQUESTS.
C
c-----------------------------------------------------------------------
      IF(NTYPE(IMATZA).LT.0) GO TO 380
c-----------------------------------------------------------------------
C
C     SELECT ALL DATA REQUESTED BY THIS REQUEST.
C
c-----------------------------------------------------------------------
      LPLOT4=0
      DO 40 IT=1,MTSIZE
C-----DIFFERENT SELECTION RULES.
      IF(MFH.EQ.5.OR.MFH.EQ.15) GO TO 20
      IF(MFH.EQ.4 .AND.LTT.NE.1) GO TO 20
c-----2018/4/1 - Added MF=26 (Electron Large Angle)
      IF(MFH.EQ.26             ) GO TO 20
C-----SELECT ALL OTHER TYPES OF DATA BASED ON MT.
      KWANT=IWANT1(IZA,MATH,MFH,MTTAB(IT),QEDTAB(IT),3)
      GO TO 30
C-----SELECT ANGULAR AND ENERGY DISTRIBUTIONS BASED ON MT/E.
   20 KWANT=IWANT1(IZA,MATH,MFH,MTTAB(1),QEDTAB(IT),4)
   30 IF(KWANT.NE.IMATZA) GO TO 40
      LPLOT4=LPLOT4+1
      NEXT(LPLOT4)=IT
C-----2017/4/2 - Allow input parameters to ignore DEFAULT X axis scaling
      IZOOM = MYZOOM(IMATZA)
   40 CONTINUE
C-----SKIP REQUEST IF NO REQUESTED DATA.
      IF(LPLOT4.LE.0) GO TO 380
c-----------------------------------------------------------------------
C
C     DEFINE CATAGORIES OF DATA TO PLOT.
C
c-----------------------------------------------------------------------
      ITYPE=NTYPE(IMATZA)
c-----2017/4/2 - Allow input to override default X axis scaling
      IZOOM = MYZOOM(IMATZA)
c
c     If only 1 ITYPE use it
c
      IF(ITYPE.LE.0) GO TO 50
      LOOP1=ITYPE                            ! Only plot ITYPE input
      LOOP2=LOOP1
      GO TO 100
C
C     Neutron Cross Sections
C
   50 IF(MFH.ne.3) GO TO 60
      LOOP1=1      ! Plot entire range
c-----2022/2/9 = Corrected 19 to 20
      LOOP2=20     ! Except radioiostopes
      GO TO 100
C
c     7/23/2011 - MF=10 include ALL.
C
   60 IF(MFH.NE.10) GO TO 70
c-----2020/2/9 = changed LOOP1 from 20 to 1  = entire range
c     LOOP1=1      ! Plot entire range
      LOOP1=21     ! Plot entire range
c-----2020/2/9 = changed LOOP2 from 20 to 21 = entire range
      LOOP2=21
      GO TO 100
c
c     Photon and Electron Interaction Cross Sections
c
   70 IF(MFH.NE.23) GO TO 80
      LOOP1=15
      LOOP2=17
      GO TO 100
c
C     PHOTON FORM AND SCATTERING FACTORS.
c
   80 IF(MFH.NE.27) GO TO 90
      LOOP1=18
      LOOP2=19
      GO TO 100
c
C     ALL OTHERS = Only Major
c
   90 LOOP1=1
      LOOP2=1
      ITYPE=0
c-----------------------------------------------------------------------
C
C     DATA CATAGORY LOOP.
C
c-----------------------------------------------------------------------
  100 DO 370 LOOP=LOOP1,LOOP2
      MINUSOK=IMINUS
      IF(LOOP2.GT.1.OR.ITYPE.GT.0) GO TO 120
c-----------------------------------------------------------------------
C
C     PLOT ALL REQUESTED DATA.
C
c-----------------------------------------------------------------------
      DO 110 L=1,LPLOT4
      IMNEXT(L)=NEXT(L)
  110 CONTINUE
      LPLOT3=LPLOT4
      GO TO 130
c-----------------------------------------------------------------------
C
C     DIVIDE DATA INTO CATAGORIES.
C
c-----------------------------------------------------------------------
C-----ALLOW <MU>, ETA AND SCATTERING FACTORS TO HAVE NEGATIVE Y RANGE.
  120 IF(LOOP.EQ.12.OR.LOOP.EQ.19) MINUSOK=1
C-----SELECT DATA REQUESTED FOR THIS CATAGORY.
      CALL PICKIT(LOOP,LPLOT3,LPLOT4,IMTOT)
C-----NO PLOT IF LESS THAN MINIMUM NUMBER OF CURVES FOR PLOT.
      IF(LPLOT3.LE.0) GO TO 370
C-----DEFINE PLOT LABELS BASED ON DATA CATAGORY.
      CALL TITLE3(LOOP,MFH,MTH)
c-----------------------------------------------------------------------
C
C     DIVIDE INTO ROUGHLY EQUAL NUMBER OF CURVES PER PLOT.
C
c-----------------------------------------------------------------------
  130 IF(LPLOT3.GT.11) GO TO 140
C-----ALL ON ONE PLOT.
      LCURVE=LPLOT3
      GO TO 150
c-----------------------------------------------------------------------
C
C     MULTIPLE PLOTS. DEFINE NUMBER OF CURVES PER PLOT. FOR LEVELS
C     INCLUDE TOTAL ON EACH PLOT.
C
c-----------------------------------------------------------------------
  140 CALL GROPIT(LPLOT3,LCURVE,IMTOT)
c-----------------------------------------------------------------------
C
C     PLOTS Loop
C
c-----------------------------------------------------------------------
  150 DO 360 LPLOT1=1,LPLOT3,LCURVE
      IMACTV = 0                          ! Initialize to no interaction
      DO L=1,LPLOT3                       ! Save IMNEXT (for ZOOM)
      IMSAVE(L)=IMNEXT(L)
      ENDDO
c-----------------------------------------------------------------------
c
c     ZOOM loop
c
c-----------------------------------------------------------------------
c
c     Same PLOT indices for Original & ZOOM
c
  160 LPLOT2=LPLOT1+LCURVE-1
      IF(LPLOT2.GT.LPLOT3) LPLOT2=LPLOT3
      LPLOT=LPLOT2-LPLOT1+1
      DO L=1,LPLOT3                       ! Restore IMNEXT (for ZOOM)
      IMNEXT(L)=IMSAVE(L)
      ENDDO
c-----------------------------------------------------------------------
C
C     START WITH LEGEND BOX OUTSIDE OF PLOTTING AREA.
C
c-----------------------------------------------------------------------
      BOXR(1,1)=-10.0d0
      BOXR(2,1)=-10.0d0
      BOXR(1,2)=-10.0d0
      BOXR(2,2)=-10.0d0
c-----------------------------------------------------------------------
C
C     MULTIPLE REACTIONS ALL ON SAME PLOT. SET UP PLOT PARAMETERS
C     AND SCALE SO THAT ALL REACTIONS APPEAR IN PLOTTING AREA.
C
c-----------------------------------------------------------------------
C-----RE-DEFINE MIDDLE OF PLOTTING AREA.
      XYMID(1)=0.5d0*(XYMAJR(1,1)+XYMAJR(2,1))
      XYMID(2)=0.5d0*(XYMAJR(1,2)+XYMAJR(2,2))
C-----DEFINE SIZE OF PLOT FOR ONE PER FRAME.
      XYINCH(1,2,1)=XYMAJR(1,2)
      XYINCH(2,2,1)=XYMAJR(2,2)
C-----DEFINE PLOT AND FRAME PARAMETERS FOR ONE PER FRAME.
      LFRAME=1
      NFRAME=1
c-----------------------------------------------------------------------
C
C     DEFINE X AND Y RANGE OF PLOT
C
c-----------------------------------------------------------------------
      IT=IMNEXT(LPLOT1)
      XYPLAN(1,1,1)=XYEVAL(1,1,IT)
      XYPLAN(2,1,1)=XYEVAL(2,1,IT)
      XYPLAN(1,2,1)=XYEVAL(1,2,IT)
      IF(MINUSOK.LE.0) XYPLAN(1,2,1)=YLOTAB(IT)
      XYPLAN(2,2,1)=XYEVAL(2,2,IT)
      DO 190 L=LPLOT1,LPLOT2
      IT=IMNEXT(L)
      IF(XYEVAL(1,1,IT).LT.XYPLAN(1,1,1)) XYPLAN(1,1,1)=XYEVAL(1,1,IT)
      IF(XYEVAL(2,1,IT).GT.XYPLAN(2,1,1)) XYPLAN(2,1,1)=XYEVAL(2,1,IT)
      IF(MINUSOK.NE.0) GO TO 170
      IF(YLOTAB(IT).LT.XYPLAN(1,2,1)) XYPLAN(1,2,1)=YLOTAB(IT)
      GO TO 180
  170 IF(XYEVAL(1,2,IT).LT.XYPLAN(1,2,1)) XYPLAN(1,2,1)=XYEVAL(1,2,IT)
  180 IF(XYEVAL(2,2,IT).GT.XYPLAN(2,2,1)) XYPLAN(2,2,1)=XYEVAL(2,2,IT)
  190 CONTINUE
c-----------------------------------------------------------------------
C
c     2021/1/5 - Save Initial Max. E range(IMACTV=0 start/no action yet)
c                Action = Use ZOOM energy limits
C
c-----------------------------------------------------------------------
      if(IMACTV.le.0) then
      XFIRST(1) = XYPLAN(1,1,1)         ! Data as read E limits
      XFIRST(2) = XYPLAN(2,1,1)
      YFIRST(1) = XYPLAN(1,2,1)         ! Y limits
      YFIRST(2) = XYPLAN(2,2,1)
      EMINNOW   = EMIN(IMATZA)          ! Save Input Request E Limits
      EMAXNOW   = EMAX(IMATZA)
      else
      EMIN(IMATZA) = XZOOM1             ! ZOOM limits
      EMAX(IMATZA) = XZOOM2             ! ZOOM limits
      IXYWAY(1,1)   = 2
      IXYWAY(2,1)   = 2
      endif
c-----Continue to Next PLOT
c-----------------------------------------------------------------------
C
C     FOR ANGULAR AND ENERGY DISTRIBUTIONS NO ZOOM IS NECESSARY
C     (DATA HAS ALREADY BEEN RESTRICTED TO REQUESTED INCIDENT ENERGY
C     RANGE).
C
c-----------------------------------------------------------------------
      IF(MFH.EQ.5.OR.MFH.EQ.15) GO TO 290
      IF(MFH.EQ. 4.AND.LTT.NE.1) GO TO 290
c-----2018/4/1 - Added MF=26 (Electron Large Angle)
      IF(MFH.EQ.26             ) GO TO 290
c-----------------------------------------------------------------------
C
C     FOR ALL OTHER DATA CONSIDER ZOOM.
C
c-----------------------------------------------------------------------
C-----PLOT ALL DATA IF NO ENERGY LIMITS ON REQUEST.
      IF(EMIN(IMATZA).LE.0.0d0.AND.EMAX(IMATZA).LE.0.0d0) GO TO 280
C-----NO REASON TO ZOOM IF ALL DATA IS WITHIN REQUESTED ENERGY LIMITS.
      IF(EMIN(IMATZA).GT.XYPLAN(1,1,1)) GO TO 200
      IF(EMAX(IMATZA).LE.0.0d0) GO TO 280
      IF(EMAX(IMATZA).GE.XYPLAN(2,1,1)) GO TO 280
      GO TO 210
C-----MUST ZOOM. DEFINE X RANGE.
  200 XYPLAN(1,1,1)=EMIN(IMATZA)
      IF(EMAX(IMATZA).LE.0.0d0) GO TO 220
      IF(EMAX(IMATZA).GE.XYPLAN(2,1,1)) GO TO 220
  210 XYPLAN(2,1,1)=EMAX(IMATZA)
  220 LPASO=0
C-----LOOP OVER CURVES TO DEFINE Y RANGE.
      DO 270 L=LPLOT1,LPLOT2
      IT=IMNEXT(L)
C-----SKIP CURVE IF COMPLETELY BELOW OR ABOVE REQUESTED ENERGY RANGE.
      IF(XYEVAL(2,1,IT).LE.XYPLAN(1,1,1).OR.
     1   XYEVAL(1,1,IT).GE.XYPLAN(2,1,1)) GO TO 270
C-----DEFINE ZOOMED LIMITS.
      CALL ZOMLIM(MTDEX1(IT),MTDEX2(IT),XYPLAN(1,1,1),YLOW1)
C-----IGNORE IF NO DATA IN REQUESTED ENERGY RANGE.
      IF(XYPLAN(1,2,1).EQ.0.0d0.AND.XYPLAN(2,2,1).EQ.0.0d0) GO TO 270
C-----SAVE MAX AND MIN Y LIMITS OF ALL CURVES.
      IF(LPASO.GT.0) GO TO 230
      YMIN1=XYPLAN(1,2,1)
      IF(MINUSOK.LE.0) YMIN1=YLOW1
      YMAX1=XYPLAN(2,2,1)
      GO TO 260
  230 IF(MINUSOK.NE.0) GO TO 240
      IF(YLOW1.LT.YMIN1) YMIN1=YLOW1
      GO TO 250
  240 IF(XYPLAN(1,2,1).LT.YMIN1) YMIN1=XYPLAN(1,2,1)
  250 IF(XYPLAN(2,2,1).GT.YMAX1) YMAX1=XYPLAN(2,2,1)
C-----SAVE INDEX TO DATA.
  260 LL=LPLOT1+LPASO
      IMNEXT(LL)=IT
      LPASO=LPASO+1
  270 CONTINUE
C-----NO PLOT IF NO DATA IN REQUESTED ENERGY RANGE.
      IF(LPASO.LE.0) GO TO 350
C-----DEFINE Y LIMITS.
      XYPLAN(1,2,1)=YMIN1
      XYPLAN(2,2,1)=YMAX1
C-----DEFINE NUMBER OF PLOTS AND INDEX.
      LPLOT=LPASO
      LPLOT2=LPLOT1+LPLOT-1
C-----IF ALL DATA ARE POSITIVE DO NOT ALLOW MORE THAN RATMIN
C-----VARIATION IN THE Y RANGE.
  280 IF(XYPLAN(1,2,1).LE.0.0d0) GO TO 310
c-----------------------------------------------------------------------
C
C     FOR ANGULAR AND ENERGY DISTRIBUTIONS DO NOT ALLOW MORE THAN
C     6 DECADES VARIATION IN THE Y RANGE.
C
c-----------------------------------------------------------------------
  290 IF(XYPLAN(1,2,1).LT.RATMIN*XYPLAN(2,2,1))
     1   XYPLAN(1,2,1) =  RATMIN*XYPLAN(2,2,1)
c-----------------------------------------------------------------------
C
C     ELIMINATE CURVES WHOSE MAXIMUM IS NOW LESS THAN THE MINIMUM
C     Y RANGE OF THE PLOT.
C
c-----------------------------------------------------------------------
      LL=0
      DO 300 L=LPLOT1,LPLOT2
      IT=IMNEXT(L)
      IF(XYEVAL(2,2,IT).LE.XYPLAN(1,2,1)) GO TO 300
      LL=LL+1
      IMNEXT(LL)=IMNEXT(L)
  300 CONTINUE
      LPLOT=LL
      LPLOT2=LPLOT1+LPLOT-1
c-----------------------------------------------------------------------
C
C     DEFINE LONGEST I.D. - ONLY THE NUMBER OF PRINTED CHARACTERS.
C
c-----------------------------------------------------------------------
  310 NREACT=0
      DO 320 L=LPLOT1,LPLOT2
      IT=IMNEXT(L)
      CALL SPECAL(MTBOX(1,IT),IMTX,IMTC,IMTBOX(IT))
      IF(IMTC.GT.NREACT) NREACT=IMTC
  320 CONTINUE
c-----------------------------------------------------------------------
C
C     SKIP IF NO Y RANGE OF PLOT, E.G., ALL LEGENDRE COEFFICIENTS ARE
C     ZERO OR CONSTANT ANGULAR DISTRIBUTIONS.
C
c-----------------------------------------------------------------------
      IF(XYPLAN(1,2,1).EQ.XYPLAN(2,2,1)) GO TO 350
c-----------------------------------------------------------------------
C
C     INSURE X AND Y RANGE DO NOT CONFLICT WITH GRID TICK MARKS.
C
c-----------------------------------------------------------------------
      CALL WINDY
c-----------------------------------------------------------------------
C
C     POSITION AND PLOT LEGEND BOX, THEN DRAW ALL GRID LINES.
C     AND ALL LABELS.
C
c-----------------------------------------------------------------------
      CALL BOXER
      CALL GRID
      CALL LABELIT
c-----------------------------------------------------------------------
C
C     PLOT DISTRIBUTIONS IN ASCENDING ENERGY ORDER.
C
c-----------------------------------------------------------------------
      KPLOT=0
      DO 330 L=LPLOT1,LPLOT2
      KKPLOT=IMNEXT(L)
      KPLOT=KPLOT+1
      LINTYP=MOD(KPLOT,5)
      IF(LINTYP.EQ.0) LINTYP=5
c-----------------------------------------------------------------------
C
C     IDENTIFY REACTION IN LEGEND BOX.
C
c-----------------------------------------------------------------------
      YNAME=YNAME-YSPAC2
      CALL PEN(KPLOT+2)
c-----------------------------------------------------------------------
C
C     PLOT I.D.
C
c-----------------------------------------------------------------------
      ITHICK=NTHICK(2)
      CALL DASH(TIPS(1),YNAME,3)
      CALL DASH(TIPS(2),YNAME,2)
      ITHICK=0
      YYS = YNAME-0.3d0*HT
      CALL SYMBL1(TIPS(3),YYS,HT,MTBOX(1,KKPLOT),0.0,IMTBOX(KKPLOT))
C-----PLOT REACTION
      CALL INSIDE(MTDEX1(KKPLOT),MTDEX2(KKPLOT))
  330 CONTINUE
c-----------------------------------------------------------------------
C
C     Allow MF=3 (Neutron) and MF=23 (Photon) Cross Sections
C
c-----------------------------------------------------------------------
      if(MFH.ne.3.and.MFH.ne.23) go to 340
      CALL ACTION(IMACTV,XZOOM1,XZOOM2)
      if(IMACTV.le.0) go to 350            ! ZOOM?
c-----------------------------------------------------------------------
c
c     2021/1/30 - MOUSE ZOOM - reset limits to MOUSE ZOOM input
c
c-----------------------------------------------------------------------
c-----Reset Limits
      XYPLAN(1,1,1) = XZOOM1
      XYPLAN(2,1,1) = XZOOM2
      XYPLAN(1,2,1) = YFIRST(1)
      XYPLAN(2,2,1) = YFIRST(2)
      EMIN(IMATZA)  = XZOOM1
      EMAX(IMATZA)  = XZOOM2
      IXYWAY(1,1)   = 2
      IXYWAY(2,1)   = 2
c-----Continue to ZOOM PLOT
      go to 160
c-----------------------------------------------------------------------
C
C     ADVANCE TO NEXT FRAME
C
c-----------------------------------------------------------------------
  340 CALL FRAME1
c-----------------------------------------------------------------------
C
C     END OF PLOT LOOP.
C
c-----------------------------------------------------------------------
c-----Insure Energy limits are reset
  350 EMIN(IMATZA) = EMINNOW
      EMAX(IMATZA) = EMAXNOW
  360 CONTINUE
c-----------------------------------------------------------------------
C
C     END OF DATA CATAGORY LOOP.
C
c-----------------------------------------------------------------------
  370 CONTINUE
c-----------------------------------------------------------------------
C
C     END OF REQUEST LOOP.
C
c-----------------------------------------------------------------------
  380 CONTINUE
      RETURN
      END
      SUBROUTINE PICKIT(LOOP  ,LPLOT3,LPLOT4,IMTOT)
C=======================================================================
C
C     SELECT ALL REQUESTED CURVES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/MAXRAT/RATMIN
      COMMON/VERSON/IVERSE
      INCLUDE 'evalplot.h'
c-----2020/1/8 - Changed 20 to 21 Catagories
      DIMENSION MINPLT(21),MT3V(2,4,21),MT3VI(2,4,21)
c-----------------------------------------------------------------------
C
C     DEFINE MT RANGES FOR EACH CROSS SECTION (MF=3) PLOT.
C
c-----------------------------------------------------------------------
C-----DEFINE MINIMUM NUMBER OF CURVES REQUIRED TO PRODUCE A PLOT.
c-----MF=18 is plotted with Major (1) - only plot  (5) if more than 1
c-----MF= 4 is plotted with Major (1) - only plot  (6) if more than 1
c-----MF=16 is plotted with Absor (2) - only plot (12) if more than 1
      DATA MINPLT/
c       1  2  3  4  5  6  7  8  9  10
     1  1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
     2  1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1/
c      11 12 13 14 15 16 17 18 19  20 21
c-----------------------------------------------------------------------
C
C     ENDF/B-VI DEFINITIONS.
C
c-----------------------------------------------------------------------
      DATA MT3VI/
c
c     Neutron Data
c
C-----01/18/07 - ADDED   MT=5
C-----01/08/20 - ADDED   MT=3                     no (n,cp)
C-----01/18/07 - Removed MT=5
c***** DEBUG
c    1   1,  2,       3,  4,      16, 18,   102,102, ! Major
C-----01/18/07 - ADDED   MT=5
     1   1,  2,       3,  5,      16, 18,   102,102, ! Major
c***** DEBUG
C-----01/08/20 - ADDED MT=10-15 (12-15 not used),  38-45, 101, 152-218
c-----2020/1/12- Added MT=18, and 102-117 (ENDF-102 Definition ???)
     2  10, 21,      22, 45,     101,117,   152,218, ! N Absorption
C-----01/08/20 - ADDED MT=117
     3  22, 25,      28, 36,      41, 42,   103,117, ! Charged Particle
     4 203,207,       0,  0,       0,  0,     0,  0, ! Particle Product.
     5  18, 21,      38, 38,       0,  0,     0,  0, ! Fission
     6   4,  4,      50, 90,      91, 91,     0,  0, ! n,n' Levels
     7 103,103,     600,649,       0,  0,     0,  0, ! n,p  Levels
     8 104,104,     650,699,       0,  0,     0,  0, ! n,d  Levels
     9 105,105,     700,749,       0,  0,     0,  0, ! n,t  Levels
     A 106,106,     750,799,       0,  0,     0,  0, ! n,he3 Levels
C-----01/08/20 - ADDED MT=108-109
     1 107,109,     800,849,       0,  0,     0,  0, ! n,a  Levels
C-----01/08/20 - ADDED for (n,2n) Levels
     2  16, 16,     875,891,       0,  0,     0,  0, ! n,2n Levels
C-----01/08/20 - DELETED MT=254-255
C-----06/14/21 - ADED    MT=254-255 = ratios for J-C
     3 251,253,     254,255,       0,  0,     0,  0, ! Neutron mu/eta/
C-----01/08/20 - ADDED MT=456
c      total    delayed, prompt
     4 452,452,     455,456,       0,  0,     0,  0, ! Neutrons nu
c
c     Photon + Electron Data
c
c-----2018/1/15 - Extended to plot Electron cross sections (MT=525-528)
     5 501,504,     522,522,     516,516,   525,528, ! Major (Photon)
C-----01/08/20 - ADDED MT=533 (excitation - used for electrons)
     6 522,522,     533,572,       0,  0,     0,  0, ! Ionization
     7 516,516,     517,517,     515,515,     0,  0, ! Pair
     8 502,504,       0,  0,       0,  0,     0,  0, ! form factors
     9 505,506,       0,  0,       0,  0,     0,  0, ! anomalous
c
c     Miscellaneous Neutron Data
c
     A 301,450,       0,  0,       0,  0,     0,  0, ! Rad. Prod. X/C
     1   1,999,       0,  0,       0,  0,     0,  0/ ! Energy Release
c-----------------------------------------------------------------------
C
C     ENDF/B-V DEFINITIONS.
C
c-----------------------------------------------------------------------
      DATA MT3V/
c
c     Neutron Data
c
     1   1,  2,       4,  4,      18, 18,   102,102, ! Major
     2  16, 17,      22, 37,     101,101,     0,  0, ! N Absorption
     3  22, 25,      28, 36,      41, 42,   103,116, ! Charged Particle
     4 203,207,       0,  0,       0,  0,     0,  0, ! Particle Product.
     5  18, 21,      38, 38,       0,  0,     0,  0, ! Fission
     6   4,  4,      51, 90,      91, 91,     0,  0, ! n,n' Levels
     7 103,103,     700,719,     111,112,   115,116, ! n,p  Levels
     8 104,104,     720,739,     117,117,     0,  0, ! n,d  Levels
     9 105,105,     740,759,     114,115,     0,  0, ! n,t  Levels
     A 106,106,     760,779,       0,  0,     0,  0, ! n,he3 Levels
     1 107,107,     780,799,       0,  0,     0,  0, ! n,a  Levels
C-----01/08/20 - ADDED for (n,2n) Levels (dummy for V)
     2   0,  0,       0,  0,       0,  0,     0,  0, ! n,2n Levels
     3 251,253,     254,255,       0,  0,     0,  0, ! Neutron mu/eta/
     4 452,452,     455,456,       0,  0,     0,  0, ! Neutrons nu
c
c     Photon + Electron Data
c
     5 501,504,     602,602,     516,516,     0,  0, ! Major (Photon)
     6 602,602,     534,572,       0,  0,     0,  0, ! Ionization
     7 516,516,     517,517,     515,515,     0,  0, ! Pair
     8 502,504,       0,  0,       0,  0,     0,  0, ! form factors
     9 505,506,       0,  0,       0,  0,     0,  0, ! anomalous
c
c     Miscellaneous Neutron Data
c
     A 301,450,       0,  0,       0,  0,     0,  0, ! Rad. Prod. X/C
     1   1,999,       0,  0,       0,  0,     0,  0/ ! Energy Release
c-----------------------------------------------------------------------
C
C     SELECT DATA FOR CURRENT CATAGORY.
C
c-----------------------------------------------------------------------
      LPLOT3=0
      DO 50 MTRANG=1,4
      DO 40 L=1,LPLOT4
      IT=NEXT(L)
C-----SKIP IF X LIMITS ARE COMPLETELY OUTSIDE REQUESTED ENERGY RANGE.
      IF(XYEVAL(2,1,IT).LE.EMIN(IMATZA)) GO TO 40
      IF(EMAX(IMATZA).LE.0.0d0) GO TO 10
      IF(XYEVAL(1,1,IT).GE.EMAX(IMATZA)) GO TO 40
C-----USE ENDF/B V OR VI CONVENTIONS.
   10 IF(IVERSE.EQ.6) GO TO 20
C-----ENDF/B-V
      IF(MTTAB(IT).lt.MT3V(1,MTRANG,LOOP)) go to 40
      IF(MTTAB(IT).eq.MT3V(1,MTRANG,LOOP)) go to 30
      IF(MTTAB(IT).le.MT3V(2,MTRANG,LOOP)) go to 30
      go to 40
C-----ENDF/B-VI
   20 IF(MTTAB(IT).lt.MT3VI(1,MTRANG,LOOP)) go to 40
      IF(MTTAB(IT).lt.MT3VI(1,MTRANG,LOOP)) go to 40
      IF(MTTAB(IT).eq.MT3VI(1,MTRANG,LOOP)) go to 30
      IF(MTTAB(IT).gt.MT3VI(2,MTRANG,LOOP)) go to 40
C-----REQUESTED.
   30 LPLOT3=LPLOT3+1
      IMNEXT(LPLOT3)=IT
   40 CONTINUE
   50 CONTINUE
c-----------------------------------------------------------------------
C
C     NO PLOT IF LESS THAN MINIMUM NUMBER OF CURVES FOR PLOT
C     E.G., DO NOT PLOT TOTAL INELASTIC AGAIN IF NO LEVELS.
C
c-----------------------------------------------------------------------
      IMTOT=0
      IF(LPLOT3.LE.0) GO TO 90
c-----2020/1/11 - Corrected
      IF(LPLOT3.LT.MINPLT(LOOP)) THEN
      LPLOT3=0
      GO TO 90
      ENDIF
c-----------------------------------------------------------------------
C
C     FOR LEVELS SEE IF TOTAL IS AT BEGINNING OF REQUESTED LIST -
C     If present include as first on each ployt of MTs data.
C
c-----------------------------------------------------------------------
      IMTOT=IMNEXT(1)
      IF(IVERSE.eq.6) then
      IF(MTTAB(IMTOT).EQ.MT3VI(1,1,LOOP)) GO TO 60   ! ENDF-6
      else
      IF(MTTAB(IMTOT).EQ.MT3V (1,1,LOOP)) GO TO 60   ! Not ENDF-6
      ENDIF
C-----TOTAL IS NOT PRESENT. PLOT ALL REACTIONS.
      IMTOT=0
      GO TO 90
C-----TOTAL IS PRESENT. IF LESS THAN MINIMUM NUMBER OF CURVES FOR PLOT
C-----SKIP PLOT.
   60 IF(LPLOT3.GE.MINPLT(LOOP)) GO TO 70
      LPLOT3=0
      GO TO 90
C-----REMOVE LEVELS WHOSE MAXIMUM IS LESS THAN THE MINIMUM REQUIRED
C-----TO APPEAR ON A PLOT.
   70 LPLOTX=1
      DO 80 L=2,LPLOT3
      IT=IMNEXT(L)
      IF(XYEVAL(2,2,IT).LT.RATMIN*XYEVAL(2,2,IMTOT)) GO TO 80
      LPLOTX=LPLOTX+1
      IMNEXT(LPLOTX)=IT
   80 CONTINUE
      LPLOT3=LPLOTX
      IF(LPLOT3.LT.MINPLT(LOOP)) LPLOT3=0
   90 RETURN
      END
      SUBROUTINE GROPIT(LPLOT3,LCURVE,IMTOT)
C=======================================================================
C
C     MULTIPLE PLOTS. DEFINE NUMBER OF CURVES PER PLOT. FOR LEVELS
C     INCLUDE TOTAL ON EACH PLOT.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INCLUDE 'evalplot.h'
C-----IF DATA ARE LEVELS INCLUDE TOTAL ON EACH PLOT.
      IF(IMTOT.LE.0) GO TO 40
C-----REMOVE TOTAL FROM LIST.
      DO 10 L=2,LPLOT3
      IMNEXT(L-1)=IMNEXT(L)
   10 CONTINUE
      LPLOT3=LPLOT3-1
C-----DEFINE NUMBER OF PLOTS.
      MXPLOT=LPLOT3/10
      IF(10*MXPLOT.LT.LPLOT3) MXPLOT=MXPLOT+1
C-----DEFINE CURVES PER PLOT.
      LCURVE=LPLOT3/MXPLOT
      IF(LCURVE*MXPLOT.LT.LPLOT3) LCURVE=LCURVE+1
C-----INCREMENT CURVES PER PLOT AND INSERT TOTAL AS FIRST CURVE FOR
C-----EACH PLOT.
      LCURVE=LCURVE+1
      L=1
C-----SHIFT ALL FOLLOWING CURVES BACK ONE POSITION.
   20 LLL=LPLOT3
      DO 30 LL=L,LPLOT3
      IMNEXT(LLL+1)=IMNEXT(LLL)
      LLL=LLL-1
   30 CONTINUE
C-----INSERT TOTAL AND INCREMENT CURVE COUNT.
      IMNEXT(L)=IMTOT
      LPLOT3=LPLOT3+1
      L=L+LCURVE
      IF(L.LE.LPLOT3) GO TO 20
C-----IF LAST CURVE IS TOTAL IGNORE IT.
      IF(IMNEXT(LPLOT3).EQ.IMTOT) LPLOT3=LPLOT3-1
      GO TO 50
c-----------------------------------------------------------------------
C
C     NO LEVELS. DEFINE NUMBER OF CURVES PER PLOT.
C
c-----------------------------------------------------------------------
   40 MXPLOT=LPLOT3/11
      IF(11*MXPLOT.LT.LPLOT3) MXPLOT=MXPLOT+1
C-----DEFINE CURVES PER PLOT.
      LCURVE=LPLOT3/MXPLOT
      IF(LCURVE*MXPLOT.LT.LPLOT3) LCURVE=LCURVE+1
   50 RETURN
      END
      SUBROUTINE MTSET(MT,MTBCD)
C=======================================================================
c
c     2017/3/23 - Replaced Q MeV by MT=### (6 Characters)
c
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 MTBCD   ,DIGITS     ,MTEQ   ,BLANK1
      DIMENSION   MTBCD(*),DIGITS(0:9),MTEQ(3)
      DATA MTEQ/'M','T','='/
      DATA BLANK1/' '/
      DATA DIGITS/'0','1','2','3','4','5','6','7','8','9'/
C-----Add MT= in first 3 locations
      MTBCD(1) = MTEQ(1)
      MTBCD(2) = MTEQ(2)
      MTBCD(3) = MTEQ(3)
C-----Add MT ### in next 3 locations
      mm = MT
      kk = 100
      ib = 0
      do k=1,3
      ii = mm/kk
      if(ii.gt.0) ib = 1                  ! skip leading 0 (leave blank)
      if(ib.gt.0) then
      MTBCD(k+3) = DIGITS(ii)
      else
      MTBCD(k+3) = BLANK1
      endif
      mm = mm - kk*ii
      kk = kk/10
      enddo
      return
      end
      SUBROUTINE TITLE4(MF,MT,LCT,LTT)
C=======================================================================
C
C     DEFINE 2 LINE TITLE FOR TOP OF PLOT AND X AND Y AXIS LABELS
C
c-----2018/4/1 - Added MF=26 (Electron Large Angle)
C     FOR MF =4, 5 AND 15 DATA + MF=26 (MT=525)
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 ZABCD,XBCD,YBCD,BLANK,MFBCD,MTBCD
      CHARACTER*60 MFTAB(6),XTITLE(6),YTITLE(6),ERROR,XBCD60,YBCD60,
     1 MFBCD60
      COMMON/LABELC/ZABCD(12),MFBCD(60),MTBCD(60),XBCD(60),YBCD(60)
      COMMON/LABELI/IMFBCD,IMTBCD,IXBCD,IYBCD
      INCLUDE 'evalplot.h'
      DIMENSION IXTIT(6),IYTIT(6),MFTAB1(6)
      EQUIVALENCE (XBCD(1),XBCD60),(YBCD(1),YBCD60),(MFBCD(1),MFBCD60)
c-----------------------------------------------------------------------
C-----DEFINE X AXIS LABELS FOR EACH TYPE OF DATA.
      DATA IXTIT/12,11,21,21,22,19/
      DATA XTITLE/
     1 'Cosine (Lab)          ',
     2 'Cosine (CM)           ',
     3 'Incident Energy (MeV) ',
     4 'Incident Energy (MeV) ',
     5 'Secondary Energy (MeV)',
     6 'Photon Energy (MeV)   '/
c       1234567890123456789012
c-----------------------------------------------------------------------
C-----DEFINE Y AXIS LABELS FOR EACH TYPE OF DATA.
      DATA IYTIT/18,18,14,13,15,15/
      DATA YTITLE/
     1 'Probability/Cosine    ',
     2 'Probability/Cosine    ',
     3 'Legendre (Lab)        ',
     4 'Legendre (CM)         ',
     5 'Probability/MeV       ',
     6 'Probability/MeV       '/
c       1234567890123456789012
c-----------------------------------------------------------------------
C-----DEFINE TITLES FOR EACH DATA TYPE (MF NUMBER).
      DATA MFTAB1/21,21,21,21,20,20/
      DATA MFTAB/
     1 'Angular Distributions ',
     1 'Angular Distributions ',
     5 'Legendre Coefficients ',
     5 'Legendre Coefficients ',
     5 'Energy Distributions  ',
     5 'Photon Distributions  '/
c       1234567890123456789012
      DATA ERROR/
     1 '**Undefined**         '/
c       1234567890123456789012
      DATA BLANK/' '/
c-----------------------------------------------------------------------
C
C     TOP LINE OF PLOT WILL IDENTIFY REACTION.
C
c-----------------------------------------------------------------------
C-----LOOK UP CHARACTER EQUIVALENT AND LOAD INTO CORE.
      CALL MTHOL(MT,MTBCD,IMTBCD)
C-----------------------------------------------------------------------
C
C     2017/3/26 - replace Q MeV by MT=###
C
C-----------------------------------------------------------------------
C-----IF FIRST CHARACTER OF TITLE IS BLANK FILL IN MT=###
      IF(MTBCD(1).NE.BLANK) GO TO 10
c-----Define MT=### (6 characters)
      CALL MTSET(MT,MTBCD(4))
      do k=1,57
      MTBCD(k) = MTBCD(k+3)
      enddo
      MTBCD(58) = ' '
      MTBCD(59) = ' '
      MTBCD(60) = ' '
c-----------------------------------------------------------------------
C
C     SECOND LINE OF TITLE WILL IDENTIFY TYPE OF DATA.
C
c-----------------------------------------------------------------------
   10 INDEX=0
      IF(MF.NE.4) GO TO 20
C-----ANGULAR DISTRIBUTION IN LAB OR CM.
      IF(LTT.NE.1.AND.LCT.EQ.1) INDEX=1
      IF(LTT.NE.1.AND.LCT.EQ.2) INDEX=2
C-----LEGENDRE COEFFICIENTS IN LAB OR CM.
      IF(LTT.EQ.1.AND.LCT.EQ.1) INDEX=3
      IF(LTT.EQ.1.AND.LCT.EQ.2) INDEX=4
      GO TO 40
c-----2018/4/1 - Added MF=26 (Electron Large Angle)
   20 IF(MF.NE.26) GO TO 30
      INDEX = 1                ! Ang. dist. in Lab
      GO TO 40
C-----ENERGY DISTRIBUTIONS.
   30 IF(MF.EQ.5) INDEX=5
C-----PHOTON DISTRIBUTIONS.
      IF(MF.EQ.15) INDEX=6
   40 IF(INDEX.GT.0) GO TO 60
c-----------------------------------------------------------------------
C
C     NO TITLE DEFINED. LOAD ERROR MESSAGE.
C
c-----------------------------------------------------------------------
      IMFBCD=13
      IXBCD=13
      IYBCD=13
      MFBCD60 = ERROR
      XBCD60  = ERROR
      YBCD60  = ERROR
c-----2020/1/11 - Added ERROR message
      write(3,50) MF,MT,LCT,LTT
   50 format(' ERROR - MF/MT/LCT/LTT ='4i5,' Undefined - TITLE4')
      RETURN
c-----------------------------------------------------------------------
C
C     DEFINE SECOND TITLE LINE.
C
c-----------------------------------------------------------------------
   60 IMFBCD  =MFTAB1(INDEX)
      MFBCD60 = MFTAB(INDEX)
c-----------------------------------------------------------------------
C
C     DEFINE X AND Y AXIS LABELS.
C
c-----------------------------------------------------------------------
      IXBCD=IXTIT(INDEX)
      IYBCD=IYTIT(INDEX)
      XBCD60 = XTITLE(INDEX)
      YBCD60 = YTITLE(INDEX)
      RETURN
      END
      SUBROUTINE TITLE3(LOOP,MF,MT)
C=======================================================================
C
C     DEFINE 2 LINE TITLE FOR TOP OF PLOT AND X AND Y AXIS LABELS
C     FOR MF =3, 10, 23 AND 27 DATA.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 ZABCD,MFBCD,MTBCD,XBCD,YBCD,MFTEMP,TOP1(60,23)
      CHARACTER*22 MFTEMP22
      CHARACTER*60 TOPPER(23),MTBCD60,XBCD60,YBCD60,ERROR,BOTTOM(5),
     1 XTITLE(5),YTITLE(5),MFBCD60
      COMMON/LABELC/ZABCD(12),MFBCD(60),MTBCD(60),XBCD(60),YBCD(60)
      COMMON/LABELI/IMFBCD,IMTBCD,IXBCD,IYBCD
      COMMON/TEMPOI/TEMPIN,TEMP1,NOTEMP
      DIMENSION NTOP(23),NBOT(4,9),
     2 IXTIT(5),IYTIT(5),MFTEMP(22)
      EQUIVALENCE (MTBCD(1),MTBCD60),(MFBCD(1),MFBCD60),
     1 (XBCD(1),XBCD60),(YBCD(1),YBCD60),(MFTEMP(1),MFTEMP22),
     2 (TOP1(1,1),TOPPER)
      DATA ERROR/
     1 '**Undefined**         '/
c       1234567890123456789012
C-----DEFINE TITLE FOR TEMPERATURE DEPENDENT NEUTRON CROSS SECTIONS.
      DATA IMFTMP/22/
      DATA MFTEMP22/
     1 ' Kelvin Cross Sections'/
c       1234567890123456789012
c-----------------------------------------------------------------------
c
C-----DEFINE TOP TITLE LINES OF PLOT FOR MF = 3, 10, 23 AND 27.
c     NTOP = # of characters in each of 23 titles for top
      DATA NTOP/
     1 5,18,16,19,7,13,12,12,12,14,13,13, 7, 8, 5,10,15,6,6,37,14,10,19/
c      1  2  3  4 5  6  7  8  9 10 11 12 13 14 15 16 171819 20 21 22 23
c
c     Neutron Interactions
c
      DATA TOPPER/
c       1234567890123456789012345678901234567
     1 'Major                 ',
     2 'Neutron Absorption    ', ! 2020/1/8 > Production to Absorption
     3 'Charged Particle      ',
     4 'Particle Production   ',
     5 'Fission               ',
     6 '(n,n'') Levels        ', ! note double ' = only 1 character
     7 '(n,p) Levels          ',
     8 '(n,d) Levels          ',
     9 '(n,t) Levels          ',
     A '(n,He3) Levels        ',
     1 '(n,]a) Levels         ',
     2 '(n,2n) Levels         ', ! 2020/1/8 > Added (n,2n) Levels
     3 'Neutron               ', ! <mu>, eta,.. MT=251, 252,...
     4 'Neutrons              ', ! <nu>         MT=452, 453....
c       1234567890123456789012345678901234567
c
c     Photons & Electrons Interactions
c
     5 'Major                 ',
     6 'Ionization            ',
     7 'Pair Production       ',
     8 'Photon                ',
     9 'Photon                ',
c       1234567890123456789012345678901234567
c
c     Miscellaneous Neutron Data
c
     A 'Radionuclide Production Cross Section',
     1 'Energy Release        ',
     2 'Parameters            ',
     3 '(n, anything) Parts   '/
c       1234567890123456789012345678901234567
c-----------------------------------------------------------------------
C-----DEFINE BOTTOM TITLE LINES
C     1 - LOWER LOOP VALUE
C     2 - UPPER LOOP VALUE
C     3 - INDEX TO TITLE TABLE
C     4 - NUMBER OF CHARACTERS IN TITLE
      DATA NBOT/
     1   1,12,1,14,           ! Cross Sections neutron
     2  13,13,2,10,           ! Neutron   <mu>, eta,...MT=251, 252,...
     3  14,14,3,11,           ! Neutrons  <nu>         MT=452, 453...
     4  15,17,1,14,           ! Cross Sections photon x/c
     5  18,18,4,12,           ! Form Factors
     6  19,19,5,18,           ! Anomalous
     7  20,20,1,14,           ! Radioactive Prod.
     8  21,22,1,14,           ! Parameters
     9  23,23,1,14/           ! Cross Sections neutron MT=5
      DATA BOTTOM/
     1 'Cross Sections        ',       ! X/C
     2 'Parameters            ',       ! <mu>, eta,..
     3 'per Fission           ',       ! <nu>
     4 'Form Factors          ',       ! form factor
     5 'Scattering Factors    '/       ! anomalous
c       1234567890123456789012
c-----------------------------------------------------------------------
C-----Define X AXIS LABELS.
      DATA IXTIT/21,21,21,17,17/
      DATA XTITLE/
     1 'Incident Energy (MeV) ',       ! X/C
     2 'Incident Energy (MeV) ',       ! <mu>,eta,..
     3 'Incident Energy (MeV) ',       ! <nu>
     4 'E*Sin(]q/2) (MeV)     ',       ! form factor
     5 'E*Sin(]q/2) (MeV)     '/       ! anomalous
c       1234567890123456789012
c-----------------------------------------------------------------------
C-----Define Y AXIS LABELS.
      DATA IYTIT/21,10,20,12,18/
      DATA YTITLE/
     1 'Cross Section (barns) ',       ! X/C
     2 'Parameters            ',       ! <mu>, eta,...
     3 'Neutrons per Fission  ',       ! <nu>
     4 'Form Factors          ',       ! form factor
     5 'Scattering Factors    '/       ! anomalous
c       1234567890123456789012
c-----------------------------------------------------------------------
c***** DEBUG
c
c     2021/6/24 - Checked - corrected 8 title lengths
c
c-----Check title lengths on first call.
c     DATA IPASS/0/
c     if(IPASS.eq.0) then
c-----Check/set length of Titles at TOP
c     do k=1,23
c     do j=60,1,-1
c     if(TOP1(j,k).ne.' ') go to 2
c     enddo
c     j = 0
c   2 if(NTOP(k).ne.j) then
c     write(3,3333) k,NTOP(k),j
c3333 format(' k/NTOP/j=',3i5,' WRONG')
c     else
c     write(3,3334) k,NTOP(k),j
c3334 format(' k/NTOP/j=',3i5)
c     endif
c     NTOP(k) = j    ! Insure correct
c     enddo
c     IPASS = 1
c     endif
c     call endit
c***** DEBUG
c-----------------------------------------------------------------------
C
C     LOAD ERROR MESSAGE IF NOT DEFINED.
C
c-----------------------------------------------------------------------
c-----2020/2/14 - only MF= 3, 10, 23, 27
      if(MF.ne.3.and.MF.ne.10.and.MF.ne.23.and.MF.ne.27) return
c-----7/31/2011 - extended from 19 to 20
c-----1/09/2020 - extended from 20 to 22
      IF(LOOP.GE.1.AND.LOOP.LE.22) GO TO 20
c-----ERROR.
      IMTBCD=13
      IMFBCD=13
      IXBCD=13
      IYBCD=13
      MTBCD60 = ERROR
      MFBCD60 = ERROR
      XBCD60  = ERROR
      YBCD60  = ERROR
c-----2020/1/11 Added ERROR message
      write(3,10) MF,MT
   10 format(' ERROR - MF/MT ='2i5,' Undefined - TITLE3 #1')
      RETURN
c-----------------------------------------------------------------------
C
C     TOP LINE OF TITLE BY CATAGORY.
C
c-----------------------------------------------------------------------
   20 IMTBCD=NTOP(LOOP)
      MTBCD60 = TOPPER(LOOP)
c-----------------------------------------------------------------------
C
C     IDENTIFY INCIDENT PARTICLE.
C
c-----------------------------------------------------------------------
      CALL WHATIN(MTBCD,IMTBCD)
c-----------------------------------------------------------------------
C
C     BOTTOM LINE OF TITLE BY CATAGORY.
C
c-----------------------------------------------------------------------
c-----2021/6/22 - Changed LOOP=1 to 13, to 1 to 12 (13 = Parameters)
      IF(LOOP.LT.1.OR.LOOP.GT.12) GO TO 40
      IF(MF.NE.3.OR.NOTEMP.NE.0) GO TO 40
c-----------------------------------------------------------------------
C
C     SPECIAL TITLE FOR NEUTRON CROSS SECTIONS WITH TEMPERATURE.
C
c-----------------------------------------------------------------------
C-----INDICE INDEX TO TABLES FOR OTHER LABELS.
      INDEX=1
C-----CONVERT TEMPERATURE TO HOLLERITH.
      CALL NUMBR2(TEMPIN,-1,MFBCD,IMFBCD)
C-----ADD REMAINDER OF TITLES...KELVIN CROSS SECTIONS.
      DO 30 L=1,IMFTMP
      IMFBCD=IMFBCD+1
      MFBCD(IMFBCD)=MFTEMP(L)
   30 CONTINUE
      GO TO 70
c-----------------------------------------------------------------------
C
C     NORMAL TITLES (NO TEMPERATURE).
C
c-----------------------------------------------------------------------
   40 DO 50 L=1,8
      IF(LOOP.GE.NBOT(1,L).AND.LOOP.LE.NBOT(2,L)) GO TO 60
   50 CONTINUE
C-----NOT DEFINED.
      GO TO 80
   60 INDEX=NBOT(3,L)
      IMFBCD=NBOT(4,L)
      MFBCD60 = BOTTOM(INDEX)
C-----7/14/2011 - FOR ACTIVATE USE MT
      IF(MF.EQ.10) THEN
      CALL MTHOL(MT,MTBCD,IMTBCD)
      IMFBCD  = NTOP(20)
      MFBCD60 = TOPPER(20)
      ENDIF
C-----7/28/2011 - ENERGY RELEASE PARAMETERS.
      IF(MF.EQ.3) THEN
      IF(MT.GE.301.AND.MT.LE.450) THEN
      IMTBCD  = NTOP(21)      ! Energy Release
      MTBCD60 = TOPPER(21)
      IMFBCD  = NTOP(22)      ! Parameters
      MFBCD60 = TOPPER(22)
      INDEX   = 2             ! Parameters = y axis label
      ENDIF
      ENDIF
c-----------------------------------------------------------------------
C
C     X AND Y AXIS LABELS.
C
c-----------------------------------------------------------------------
   70 IXBCD=IXTIT(INDEX)
      IYBCD=IYTIT(INDEX)
      XBCD60 = XTITLE(INDEX)
      YBCD60 = YTITLE(INDEX)
      GO TO 100
c-----------------------------------------------------------------------
C
C     LOAD ERROR MESSAGE IF NOT DEFINED.
C
c-----------------------------------------------------------------------
   80 IMFBCD=13
      IXBCD=13
      IYBCD=13
      MFBCD60 = ERROR
      XBCD60  = ERROR
      YBCD60  = ERROR
c-----2020/1/11 Added ERROR message
      write(3,90) MF,MT
   90 format(' ERROR - MF/MT ='2i5,' Undefined - TITLE3 #2')
  100 RETURN
      END
      SUBROUTINE TITBOX(MF,MT,Q,LTT,MTBOX,IMTBOX)
C=======================================================================
C
C     DEFINE CHARACTER TITLE FOR THE LEGEND BOX OF THE PLOT.
C
C=======================================================================
      INCLUDE 'implicit.h'
      PARAMETER (MAXLEGT = 100)
      CHARACTER*1 ERROR,BLANK,MTBOX,LEGTAB
      CHARACTER*3 LEGTAB3
      DIMENSION MTBOX(40),ERROR(9),LEGTAB(3,MAXLEGT),LEGTAB3(MAXLEGT)
      EQUIVALENCE (LEGTAB(1,1),LEGTAB3(1))
      DATA BLANK/' '/
      DATA ERROR/'*','*','E','r','r','o','r','*','*'/
C-----DEFINE IDENTIFICATION FOR LEGENDRE ORDERS.
      DATA LEGTAB3/
     1 'P1 ','P2 ','P3 ','P4 ','P5 ','P6 ','P7 ','P8 ','P9 ','P10',
     2 'P11','P12','P13','P14','P15','P16','P17','P18','P19','P20',
     3 'P21','P22','P23','P24','P25','P26','P27','P28','P29','P30',
     2 'P31','P32','P33','P34','P35','P36','P37','P38','P39','P40',
     2 'P41','P42','P43','P44','P45','P46','P47','P48','P49','P50',
     2 'P51','P52','P53','P54','P55','P56','P57','P58','P59','P60',
     2 'P61','P62','P63','P64','P65','P66','P67','P68','P69','P70',
     2 'P71','P72','P73','P74','P75','P76','P77','P78','P79','P80',
     2 'P81','P82','P83','P84','P85','P86','P87','P88','P89','P90',
     2 'P91','P92','P93','P94','P95','P96','P97','P98','P99','P00'/
C-----FOR MF = 3, 10, 23 OR 27 USE MT EQUIVALENT.
      IF(MF.EQ.3.OR.MF.EQ.10.OR.MF.EQ.23.OR.MF.EQ.27) GO TO 10
C-----FOR MF = 4, LTT=1 - LEGENDRE COEFFICIENTS USE LEGENDRE ORDER.
      IF(MF.EQ. 4.AND.LTT.EQ.1) GO TO 30
c-----------------------------------------------------------------------
C
C     FOR MF = 4, LTT NOT =1 - ANGULAR DISTRIBUTION AND
C         MF =26,              ANGULAR DISTRIBUTION AND
C         MF = 5  - ENERGY DISTRIBUTIONS - USE INCIDENT ENERGY
C         MF =15  - ENERGY DISTRIBUTIONS - USE INCIDENT ENERGY
C                                         (STORED IN Q VALUE TABLE)
C     OTHERWISE AN ERROR.
C
c-----------------------------------------------------------------------
c----- 2018/4/1 - Added Electron Large Angle
      IF(MF.EQ.4.OR.MF.EQ.26.OR.MF.EQ.5.OR.MF.EQ.15) GO TO 60
      GO TO 70
c-----------------------------------------------------------------------
C
C     CHARACTER EQUIVALENT OF MT.
C
c-----------------------------------------------------------------------
   10 CALL MTHOL(MT,MTBOX,IMTBOX)
C-----IF FIRST WORD OF TITLE IS BLANK INSERT Q VALUE AND REMOVE REACTION
C-----I.D. (IT WILL BE DEFINED BY CATAGORY OF DATA AT TOP OF PLOT).
      IF(MTBOX(1).NE.BLANK) GO TO 20
C-----------------------------------------------------------------------
C
C     2017/3/26 - replace Q MeV by MT=###
C
C-----------------------------------------------------------------------
c-----Define MT=### (6 characters)
      CALL MTSET(MT,MTBOX(4))
      do k=1,37
      MTBOX(k) = MTBOX(k+3)
      enddo
      MTBOX(38) = ' '
      MTBOX(39) = ' '
      MTBOX(40) = ' '
   20 RETURN
c-----------------------------------------------------------------------
C
C     LEGENDRE ORDER.
C
c-----------------------------------------------------------------------
   30 L=Q
      IF(L.LT.1.OR.L.GT.MAXLEGT) GO TO 70
      DO 40 K=1,3
      IF(LEGTAB(K,L).EQ.BLANK) GO TO 50
      MTBOX(K)=LEGTAB(K,L)
   40 CONTINUE
      K=4
   50 IMTBOX=K-1
      RETURN
c-----------------------------------------------------------------------
C
C     INCIDENT ENERGY.
C
c-----------------------------------------------------------------------
   60 CALL UNITED(Q,MTBOX,IMTBOX)
      RETURN
c-----------------------------------------------------------------------
C
C     OTHERWISE AN ERROR.
C
c-----------------------------------------------------------------------
   70 DO 80 L=1,9
      MTBOX(L)=ERROR(L)
   80 CONTINUE
      IMTBOX=9
c-----2020/1/11 - Added ERROR message
      write(3,90) MF,MT
   90 format(' ERROR - MF/MT ='2i5,' Undefined - TITBOX')
      RETURN
      END
      SUBROUTINE LABELIT
C=======================================================================
C
C     PLOT ALL HEADING AND AXIS INFORMATION FOR THE CURRENT PLOT.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 ZABCD,XBCD,MFBCD,YBCD,MTBCD,MATID
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LABELC/ZABCD(12),MFBCD(60),MTBCD(60),XBCD(60),YBCD(60)
      COMMON/LABELI/IMFBCD,IMTBCD,IXBCD,IYBCD
      COMMON/EDGE/XYEDGE(2,2),XYMAJR(2,2),RASTER(2)
      COMMON/SIZES/XL(3),YL(6),XYMID(2),HT,HTX1,HTX2
      COMMON/PAGNOW/PAGE
      COMMON/LISCOM/LISO
      COMMON/DRACUL/MTABLE(7),LTABLE(7),MPLOTS(7),LPLOTS(7)
      COMMON/WHO/IZA,IE,NE,LTT,LABCM
      DIMENSION MATID(3)
      DATA MATID/'M','A','T'/
c-----------------------------------------------------------------------
C
C     PLOT MAT NUMBER IN UPPER RIGHT HAND CORNER OF PLOT.
C
c-----------------------------------------------------------------------
      CALL PEN(2)
      XPMAT=XYMAJR(1,1)
      CALL SYMBL1(XPMAT,YL(1),HT,MATID(1),0.0,3)
      XP=XPMAT+4.0d0*HT
      FMATH=MATH
      CALL NUMBR1(XP,YL(1),HT,FMATH,0.0,-1)
c-----------------------------------------------------------------------
C
C     PLOT ISOTOPE IDENTIFICATION IN UPPER RIGHT HAND CORNER OF PLOT.
C
c-----------------------------------------------------------------------
c-----2020/3/21 - Added Target state
      CALL ZAHOLM(IZA,LISO,ZABCD)
      CALL LONGX(ZABCD,IZABCD,12)
      XPZA=XYMAJR(2,1)-FLOAT(IZABCD)*HT
      CALL SYMBL1(XPZA,YL(1),HT,ZABCD(1),0.0,IZABCD)
c-----------------------------------------------------------------------
C
C     PLOT PROJECTILE OR REACTION TYPE ON FIRST LINE.
C
c-----------------------------------------------------------------------
      CALL SPECAL(MTBCD,IMTX,IMTC,IMTBCD)
      XP=XYMID(1)-0.5d0*FLOAT(IMTC-1)*HT
      CALL SYMBL1(XP,YL(1),HT,MTBCD(1),0.0,IMTX)
c-----------------------------------------------------------------------
C
C     TYPE OF DATA ON SECOND LINE.
C
c-----------------------------------------------------------------------
      CALL SPECAL(MFBCD,IMFX,IMFC,IMFBCD)
      XP=XYMID(1)-0.5d0*FLOAT(IMFC-1)*HT
      CALL SYMBL1(XP,YL(2),HT,MFBCD(1),0.0,IMFX)
c-----------------------------------------------------------------------
C
C     PLOT Y AND X AXIS LABELS IN THE MIDDLE OF EACH AXIS.
C
c-----------------------------------------------------------------------
      CALL SPECAL(YBCD,IMFX,IMFC,IYBCD)
      YP=XYMID(2)-0.5d0*FLOAT(IMFC-1)*HT
      CALL SYMBL1(XL(2),YP,HT,YBCD(1),90.0,IMFX)
      CALL SPECAL(XBCD,IMFX,IMFC,IXBCD)
      XP=XYMID(1)-0.5d0*FLOAT(IMFC-1)*HT
      CALL SYMBL1(XP,YL(5),HT,XBCD(1),0.0,IMFX)
c-----------------------------------------------------------------------
C
C     PLOT PAGE NUMBER IN LOWER LEFT HAND CORNER OF PLOT.
C
c-----------------------------------------------------------------------
      PAGE=PAGE+1.0d0
      CALL NUMBR1(XPMAT,YL(5),HT,PAGE,0.0,-1)
c-----------------------------------------------------------------------
C
C     PLOT ISOTOPE IDENTIFICATION IN LOWER RIGHT HAND CORNER OF PLOT.
C
c-----------------------------------------------------------------------
      CALL SYMBL1(XPZA,YL(5),HT,ZABCD(1),0.0,IZABCD)
c-----------------------------------------------------------------------
C
C     RECORD WHICH FILE PLOT IS FOR.
C
c-----------------------------------------------------------------------
      IF(MFH.EQ. 3) LPLOTS(1)=LPLOTS(1)+1
      IF(MFH.EQ. 4) LPLOTS(2)=LPLOTS(2)+1
c----- 2018/4/1 - Added Electron Large Angle
      IF(MFH.EQ.26) LPLOTS(2)=LPLOTS(2)+1
      IF(MFH.EQ. 5) LPLOTS(3)=LPLOTS(3)+1
      IF(MFH.EQ.10) LPLOTS(4)=LPLOTS(4)+1
      IF(MFH.EQ.15) LPLOTS(5)=LPLOTS(5)+1
      IF(MFH.EQ.23) LPLOTS(6)=LPLOTS(6)+1
      IF(MFH.EQ.27) LPLOTS(7)=LPLOTS(7)+1
      RETURN
      END
      SUBROUTINE PAGEIT(MULTY)
C=======================================================================
C
C     READ A TAB1 RECORD FROM THE ENDF/B FORMAT FILE AND LOAD INTO THE
C     PAGING SYSTEM. CONVERT ALL ENERGIES FROM EV TO MEV.
C     DETERMINE ALL SCALING INFORMATION FOR PLOT.
C
C     THE INTERPOLATION LAW OF THE TAB1 RECORD MAY BE EITHER COMPLETELY
C     HISTOGRAM OR LINEAR. IF IT IS NOT, ERROR MESSAGE WILL BE PRINTED
C     AND THE DATA PLOTTED AS IF IT WERE LINEARLY INTERPOLABLE.
C     HISTOGRAM DATA WILL TO CONVERTED IN CORE TO LINEARLY INTERPOLABLE
C     FORM (I.E. ALL OF THE IN CORE DATA WILL BE TREATED AS LINEARLY
C     INTERPOLABLE).
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/LEADER/C1,C2,L1,LF,N1,N2,MAT,MF,MT
      COMMON/INPAGE/IXYLOW,IXYHI,ISCR,NPSIZE,NPSM2,IMUSED
      COMMON/TEMPOI/TEMPIN,TEMP1,NOTEMP
      COMMON/WHO/IZA,IE,NE,LTT,LABCM
      COMMON/VERSON/IVERSE
      COMMON/THREAD/EV2MEV
c-----11/22/2013 OUT9 replaced NORMX
      CHARACTER*1 FIELD11
      COMMON/NORMCC/FIELD11(11,6)
      COMMON/LASTE/ELAST
      INCLUDE 'evalplot.h'
      DIMENSION XTAB6(6),YTAB6(6)
      DATA MATPAG/0/
C-----DEFINE CONVERSION FACTOR FROM WAVELENGTH (ANGSTROMS) TO MEV.
      DATA WAVE/1.239852d-2/
      DATA JP2/0/
      DATA IP2/0/
C-----INITIALIZE FLAG TO INDICATE POSITIVE CROSS SECTION NOT YET FOUND.
      KMPLUS=0
C-----ALLOW ANGULAR DISTRIBUTIONS TO HAVE NEGATIVE X RANGE.
      MINUSX=0
      ELAST=-1.0d0
      IF(MF.EQ. 4) MINUSX=1
c----- 2018/4/1 - Added Electron Large Angle
      IF(MF.EQ.26) MINUSX=1
C-----ALLOW PARAMETERS AND SCATTERING FACTORS TO HAVE NEGATIVE Y RANGE.
      MINUSY=0
      IF(MT.GE.251.AND.MT.LE.253) MINUSY=1
      IF(MT.EQ.505.OR.MT .EQ.506) MINUSY=1
c-----------------------------------------------------------------------
C
C     READ HEAD LINE AND INTERPOLATION LAW. DETERMINATE IF ANY
C     ILLEGAL DATA FOUND ON HEAD LINE. PRINT WARNING IF ILLEGAL
C     INTERPOLATION LAW IS PRESENT (DATA WILL THEN BE TREATED AS IF
C     IT IS LINEARLY INTERPOLABLE. SAVE REACTION Q-VALUE. DEFINE
C     TEMPERATURE IF SECTION IS TOTAL CROSS SECTION.
C
c-----------------------------------------------------------------------
C-----READ SECTION HEAD LINE AND INTERPOLATION LAW.
      CALL CARDI(C1,C2,L1,LF,N1,N2IN)
      if(MF.ne.26) then
      CALL TERPI(NBT,INT,N1)
c-----2019/1/5 - Additional Interpolation Lw Tests
      CALL TERPTEST(NBT,INT,N1,N2IN,2)
      else
      N1     = 1
      NBT(1) = N2IN
      INT(1) = 2
      endif
C-----FOR MF=5 AND 15 DEFINE YIELD.
      IF(MULTY.GT.0) ZMULT=YIELD(C2)
c-----------------------------------------------------------------------
C
C     DEFINE TEMPERATURE.
C
c-----------------------------------------------------------------------
      IF(MF.NE.3) GO TO 30
      IF(IVERSE.NE.6) GO TO 10
C-----FOR ENDF/B-VI DEFINE TEMPERATURE FROM MF=1.
      TEMPIN=TEMP1
      GO TO 20
C-----IF NOT ENDFB-VI DEFINE TEMPERATURE FROM FIRST SECTION OF CROSS
C-----SECTIONS.
   10 IF(MAT.NE.MATPAG.OR.MT.EQ.1) TEMPIN=C1
   20 MATPAG=MAT
C-----DEFINE NUMBER OF INCORE POINTS FOR SECTION (IF LINEAR-LINEAR SAME
C-----AS NUMBER OF POINTS READ. IF HISTOGRAM TWICE AS MANY).
   30 N2=N2IN
      IDIV=3
      IF(INT(1).EQ.2) GO TO 40
      N2=N2IN+N2IN
      IDIV=6
C-----HISTOGRAM MUST FIT INTO ONE PAGE.
      IF(N2.GT.NPSIZE) N2=NPSIZE
   40 MTSIZE=MTSIZE+1
      MTTAB(MTSIZE)=MT
C-----SAVE Q VALUE (FILE 3) OR INCIDENT ENERGY (FILE 4-5-26) (IN MEV)
      QEDTAB(MTSIZE)=DABS(EV2MEV*C2)
c-----Save MAT/MF/MT
      CALL MAXIE1(MATH,MFH,MTH)
c-----------------------------------------------------------------------
C
C     IF THIS IS CROSS SECTION (FILE 3) AND NO CROSS SECTION PLOTS
C     WERE REQUESTED, ONCE Q-VALUE IS DEFINED (FOR ANGULAR DISTRIBUTIONS
C     AND/OR ENERGY DISTRIBUTIONS) SIMPLY RETURN TO MAIN PROGRAM WHICH
C     WILL SKIP THE REMAINDER OF THE SECTION.
C
c-----------------------------------------------------------------------
      IF(MF.NE.3) GO TO 50
      MTOUT=IWANT(IZA,MAT,MF,MT,0.0d0,3)
      IF(MTOUT.LE.0) GO TO 320
c-----------------------------------------------------------------------
C
C     SET UP TO READ DATA.
C
c-----------------------------------------------------------------------
C-----INITIALIZE SCRATCH FILE AND INDICES WHEN FIRST SECTION IS READ.
   50 IF(MTSIZE.GT.1) GO TO 60
      IF(IMUSED.GT.0) REWIND ISCR
      IP1=1
      IP3=NPSIZE
      GO TO 100
   60 IF(INT(1).EQ.2) GO TO 70
C-----FOR HISTOGRAM IF REACTION WILL NOT FIT INTO CORE UNLOAD PAGE
C-----TO SCRATCH AND ADVANCE INDICES.
      IF((IP2+N2).LE.IP3) GO TO 90
      GO TO 80
C-----FOR LINEAR IF THERE IS LESS THAN ONE LINE (3 POINTS) OF ROOM LEFT
C-----IN THE CORE TABLE, UNLOAD IT TO SCRATCH AND ADVANCE INDICES.
   70 IF(JP2.LT.NPSM2) GO TO 90
   80 WRITE(ISCR) XYTAB
      IMUSED=1
      IP1=IP3+1
      IP3=IP3+NPSIZE
      GO TO 100
C-----DEFINE LOWER INDEX TO READ NEXT BATCH OF DATA, ALLOWING FOR ONLY
C-----FULL LINES OF DATA (HISTOGRAM 6 POINTS PER LINE, LINEAR 3 POINTS
C-----PER LINE).
   90 IPX=IP2/IDIV
      IF(IDIV*IPX.LT.IP2) IPX=IPX+1
      IP1=IDIV*IPX+1
C-----SAVE INDICES FOR POINTS FROM CURRENT SECTION.
  100 MTDEX1(MTSIZE)=IP1
      MTDEX2(MTSIZE)=IP1+N2-1
C-----DEFINE INDEX TO LAST POINT TO READ IN CURRENT PAGE.
  110 IP2=IP3
      IF(IP2.GT.MTDEX2(MTSIZE)) IP2=MTDEX2(MTSIZE)
C-----READ NEXT BATCH OF DATA.
      JP1=MOD(IP1,NPSIZE)
      JP2=MOD(IP2,NPSIZE)
      IF(JP2.EQ.0) JP2=NPSIZE
      IF(INT(1).EQ.2) GO TO 170
c-----------------------------------------------------------------------
C
C     HISTOGRAM INTERPOLATION. READ AND CONVERT TO LINEAR INTERPOLABLE.
C
c-----------------------------------------------------------------------
      JP2M1=JP2-1
C-----READ HISTOGRAM POINTS TO LOCATIONS AT LOWER LIMIT OF EACH STEP.
C-----COUNT THE NUMBER OF POINTS TO READ.
      JTOTAL=0
      DO 120 J=JP1,JP2M1,2
      JTOTAL=JTOTAL+1
  120 CONTINUE
C-----READ POINTS 3 AT A TIME = 1 LINE.
      J=JP1
      ELAST=-1.0d0
      DO 140 LL=1,JTOTAL,3
      LLP2=LL+2
      IF(LLP2.GT.JTOTAL) LLP2=JTOTAL
      JPOINT=(LLP2-LL)+1
      CALL POINTI(XTAB6,YTAB6,JPOINT)
c-----Save Maximum energy and value
      CALL MAXIE2(XTAB6(JPOINT),YTAB6(JPOINT))
C-----COPY THEM TO FINAL LOCATION
      DO 130 KK=1,JPOINT
      XTAB(J)=XTAB6(KK)
      YTAB(J)=YTAB6(KK)
      J=J+2
  130 CONTINUE
  140 CONTINUE
C-----DEFINE UPPER LIMIT OF EACH STEP.
      DO 150 J=JP1,JP2M1,2
C-----FOR MF=5 AND 15 MULTIPLY BY YIELD.
      IF(MULTY.GT.0) YTAB(J)=ZMULT*YTAB(J)
      YTAB(J+1)=YTAB(J)
      IF(J.LT.JP2M1) XTAB(J+1)=XTAB(J+2)
  150 CONTINUE
C-----ELIMINATE LAST POINT OF HISTOGRAM (ONLY GIVES UPPER LIMIT OF LAST
C-----STEP OF HISTOGRAM).
      IF(IP2.LT.MTDEX2(MTSIZE)) GO TO 190
      JP2=JP2-2
      IP2=IP2-2
      MTDEX2(MTSIZE)=IP2
C-----IF THIS IS A THRESHOLD REACTION INSERT A POINT WITH ZERO CROSS
C-----SECTION AT THRESHOLD.
      IF(XTAB(JP1).LE.1.0d0) GO TO 190
      II=JP2
      DO 160 J=JP1,JP2
      XTAB(II+1)=XTAB(II)
      YTAB(II+1)=YTAB(II)
      II=II-1
  160 CONTINUE
      YTAB(JP1)=0.0d0
      JP2=JP2+1
      IP2=IP2+1
      MTDEX2(MTSIZE)=IP2
      GO TO 190
c-----------------------------------------------------------------------
C
C     LINEAR INTERPOLATION. READ NEXT PAGE OF POINTS.
C
c-----------------------------------------------------------------------
  170 JPOINT=(JP2-JP1)+1
      ELAST=-1.0d0
      CALL POINTI(XTAB(JP1),YTAB(JP1),JPOINT)
c-----Save Maximum energy and value
      CALL MAXIE2(XTAB(JP2),YTAB(JP2))
C-----FOR MF=5 AND 15 MULTIPLY BY YIELD.
      IF(MULTY.LE.0) GO TO 190
      DO 180 J=JP1,JP2
      YTAB(J)=ZMULT*YTAB(J)
  180 CONTINUE
c-----------------------------------------------------------------------
C
C     CONVERT TO INTERNAL DATA UNITS.
C
c-----------------------------------------------------------------------
C-----FOR FORM FACTOR AND SCATTERING FUNCTION CONVERT FROM WAVELENGTH
C-----TO MEV.
  190 IF(MF.NE.27) GO TO 210
      IF(MT.NE.502.AND.MT.NE.504) GO TO 210
      DO 200 J=JP1,JP2
      XTAB(J)=WAVE*XTAB(J)
  200 CONTINUE
      GO TO 240
C-----CONVERT ENERGY FROM EV TO MEV.
  210 IF(MF.EQ.4.OR.MF.EQ.26) GO TO 240
      DO 220 J=JP1,JP2
      XTAB(J)=EV2MEV*XTAB(J)
  220 CONTINUE
C-----CONVERT PROBABILITY FROM PER EV TO PER MEV.
      IF(MF.NE.5) GO TO 240
      DO 230 J=JP1,JP2
      YTAB(J)=YTAB(J)/EV2MEV
  230 CONTINUE
c-----------------------------------------------------------------------
C
C     DEFINE X AND Y LIMITS.
C
c-----------------------------------------------------------------------
C-----SKIP LEADING ZERO X AND/OR Y VALUES UNLESS THEY ARE ALLOWED.
  240 IF(KMPLUS.NE.0) GO TO 290
      DO 260 JJ=JP1,JP2
      XNOW=XTAB(JJ)
      IF(MINUSX.EQ.0.AND.XNOW.LE.0.0d0) GO TO 250
      YNOW=YTAB(JJ)
      IF(MINUSY.NE.0.OR. YNOW.GT.0.0d0) GO TO 270
  250 XLAST=XNOW
      YLAST=YNOW
  260 CONTINUE
      GO TO 310
C-----INITIALIZE MINIMUM POSITIVE Y LIMIT.
  270 KMPLUS=1
      YLOTAB(MTSIZE)=YNOW
C-----INITIALIZE X AND Y RANGE INCLUDING THRESHOLD.
      IF(JJ.EQ.JP1) GO TO 280
      IF(MINUSX.EQ.0.AND.XLAST.LE.0.0d0) GO TO 280
      XNOW=XLAST
      YNOW=YLAST
  280 XYEVAL(1,1,MTSIZE)=XNOW
      XYEVAL(2,1,MTSIZE)=XNOW
      XYEVAL(1,2,MTSIZE)=YNOW
      XYEVAL(2,2,MTSIZE)=YNOW
C-----DETERMINE X AND Y SCALING INFORMATION.
  290 DO 300 J=JJ,JP2
      XNOW=XTAB(J)
      YNOW=YTAB(J)
      IF(XNOW.LT.XYEVAL(1,1,MTSIZE)) XYEVAL(1,1,MTSIZE)=XNOW
      IF(XNOW.GT.XYEVAL(2,1,MTSIZE)) XYEVAL(2,1,MTSIZE)=XNOW
      IF(YNOW.LT.XYEVAL(1,2,MTSIZE)) XYEVAL(1,2,MTSIZE)=YNOW
      IF(YNOW.GT.XYEVAL(2,2,MTSIZE)) XYEVAL(2,2,MTSIZE)=YNOW
      IF(YNOW.LE.0.0d0) GO TO 300
      IF(YNOW.LT.YLOTAB(MTSIZE)) YLOTAB(MTSIZE)=YNOW
  300 CONTINUE
c-----------------------------------------------------------------------
C
C     HAVE ALL DATA POINTS IN SECTION BEEN READ.
C
c-----------------------------------------------------------------------
  310 IF(IP2.GE.MTDEX2(MTSIZE)) GO TO 320
C-----NO. UNLOAD PAGE OF DATA TO SCRATCH, ADVANCE PAGE INDICES AND
C-----BRANCH TO READ NEXT PAGE OF DATA.
      WRITE(ISCR) XYTAB
      IMUSED=1
      IP1=IP3+1
      IP3=IP3+NPSIZE
      GO TO 110
C-----ALL DATA POINTS READ.
  320 CONTINUE
      RETURN
      END
      SUBROUTINE PAGEND
C=======================================================================
C
C     LAST SECTION HAS BEEN READ. SET UP INDICES TO PLOT DATA. IF
C     ALL DATA IS CORE RESIDENT JUST SET INCORE INDICES TO POINTS
C     TO BEGINNING AND END OF DATA. IF NOT ALL CORE RESIDENT WRITE
C     LAST PAGE TO SCRATCH, READ FIRST PAGE FROM SCRATCH INTO CORE
C     AND DEFINE IN CORE DATA INDICES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/LEADER/C1,C2,L1,LF,N1,N2,MAT,MF,MT
      COMMON/INPAGE/IXYLOW,IXYHI,ISCR,NPSIZE,NPSM2,IMUSED
      INCLUDE 'evalplot.h'
      N2=MTDEX2(MTSIZE)
      IF(MTDEX2(MTSIZE).GT.NPSIZE) GO TO 10
      IXYLOW=0
      IXYHI=MTDEX2(MTSIZE)
      RETURN
C-----OUTPUT LAST PAGE OF DATA TO SCRATCH.
   10 WRITE(ISCR) XYTAB
      IMUSED=1
C-----SET UP SCRATCH FILE TO READ.
      END FILE ISCR
      REWIND ISCR
C-----LOAD FIRST PAGE OF DATA FROM SCRATCH.
      IXYLOW=0
      IXYHI=NPSIZE
      READ(ISCR) XYTAB
      RETURN
      END
      SUBROUTINE PAGLEG
C=======================================================================
C
C     READ LEGENDRE COEFFICIENT DATA, INVERT IT INTO ENERGY ORDER AND
C     LOAD INTO PAGING SYSTEM. CONVERT ALL ENERGIES FROM EV TO MEV.
C     DETERMINE ALL SCALING INFORMATION FOR PLOT.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/LEADER/C1,C2,L1,LF,N1,N2,MAT,MF,MT
      COMMON/INPAGE/IXYLOW,IXYHI,ISCR,NPSIZE,NPSM2,IMUSED
      COMMON/WHO/IZA,IE,NE,LTT,LABCM
      COMMON/THREAD/EV2MEV
      COMMON/DRACUL/MTABLE(7),LTABLE(7),MPLOTS(7),LPLOTS(7)
      INCLUDE 'evalplot.h'
      DIMENSION CTAB4(1000)
C-----DEFINE LOW ENERGY LOW VALUE CUTOFF (ENERGY IN MEV).
      DATA XLOWL /1.0d-9/
      DATA XHIGHL/1.0d-4/
      DATA YLOWL /1.0d-5/
c-----------------------------------------------------------------------
C
C     READ ALL COEFFICIENTS AND RE-ORDER INTO ENERGY ORDER FOR EACH
C     LEGENDRE ORDER.
C
c-----------------------------------------------------------------------
C-----INITIALIZE ALL VALUES.
      DO 20 J=1,MAXLEGC
      DO 10 K=1,MAXLEGE
      YTAB4(K,J)=0.0d0
   10 CONTINUE
   20 CONTINUE
C-----INITIALIZE HIGHEST LEGENDRE ORDER (I.E. NUMBER OF CURVES) AND
C-----THE NUMBER OF ENERGY POINTS PER LEGENDRE ORDER.
      MTSIZE=0
      LEGTOP=0
      IEIN=1
C-----DEFINE INDEX TO IGNOR ALL BUT UP TO HIGHEST MAXLEGE ENERGIES.
      NELOW=1
      IF(NE.GT.MAXLEGE) NELOW=NE-(MAXLEGE-1)
      DO 100 IE=1,NE
C-----READ SECTION HEAD LINE AND INTERPOLATION LAW.
      CALL CARDI(C1,C2,L1,L2,N1IN,N2)
C-----SKIP READ IF NO COEFFICIENTS, BUT SAVE ENERGY.
      IF(N1IN.GT.0) GO TO 30
      IF(IE.lt.NELOW) go to 100
      IF(IE.eq.NELOW) go to 90
      IEIN=IEIN+1
      GO TO 90
   30 IF(IE.GT.NELOW) IEIN=IEIN+1
c-----------------------------------------------------------------------
C
C     IF OVER 100 LEGENDRE COEFFICIENTS ONLY USE THE FIRST 100.
C
c-----------------------------------------------------------------------
      IF(N1IN.LE.MAXLEGC) GO TO 60
      IF(N1IN.GT.LEGTOP) LEGTOP=N1IN
C-----STOP IF OVER 1000 = THIS WOULD BE CRAZY
      IF(N1IN.GT.1000) THEN
      WRITE(3,40) N1IN
   40 FORMAT(///' ERROR...LEGENDRE ORDER=',I5,' (EXCEEDS 1000)'///)
      CALL ENDERROR
      ENDIF
      CALL LISTI(CTAB4,N1IN)
      DO 50 J=1,MAXLEGC
      YTAB4(IEIN,J)=CTAB4(J)
   50 CONTINUE
      N1IN=MAXLEGC
      GO TO 80
C-----LINEAR INTERPOLATION. READ NEXT PAGE OF POINTS.
   60 CALL LISTI(CTAB4,N1IN)
      DO 70 J=1,N1IN
      YTAB4(IEIN,J)=CTAB4(J)
   70 CONTINUE
C-----IGNOR ALL BUT HIGHEST MAXLEGE ENERGIES.
   80 IF(IE.LT.NELOW) GO TO 100
C-----KEEP TRACK OF HIGHEST LEGENDRE ORDER.
      IF(MTSIZE.LT.N1IN) MTSIZE=N1IN
C-----DEFINE ENERGY FOR P0.
   90 XTAB4(IEIN,1)=EV2MEV*C2
  100 CONTINUE
c-----------------------------------------------------------------------
C
C     ALL COEFFICENTS HAVE BEEN READ. DEFINE START AND END INDICES
C     IGNORING LEADING ZEROES (ALL BUT LAST).
C
c-----------------------------------------------------------------------
      MTBASE=0
      DO 150 K=1,MTSIZE
C-----DEFINE LEGENDRE ORDER AND MT NUMBER.
      QEDTAB(K)=K
      MTTAB(K)=MT
C-----DEFINE UPPER POINT INDEX.
      MTDEX2(K)=MTBASE+IEIN
C-----DEFINE ENERGIES FOR ALL LEGENDRE ORDERS.
      DO 110 L=1,IEIN
      XTAB4(L,K)=XTAB4(L,1)
  110 CONTINUE
C-----DEFINE LOWER POINT INDEX FOR EACH LEGENDRE ORDER (IGNOR WERE
C-----COEFFGICENT IS ZERO, EXCEPT POSSIBLY HIGHEST ENERGY).
      DO 120 L=1,IEIN
      IF(DABS(YTAB4(L,K)).NE.0.0d0) GO TO 130
  120 CONTINUE
      L=IEIN
  130 IF(L.GT.1) L=L-1
C-----IGNORE VERY LOW ENERGY POINTS WHERE COEFFICIENT IS VERY SMALL.
      IF(DABS(YTAB4(L,K)).GT.YLOWL.OR.DABS(YTAB4(L+1,K)).GT.YLOWL)
     1 GO TO 140
      IF(XTAB4(L,K).LE.XLOWL.AND.XTAB4(L+1,K).GE.XHIGHL) L=L+1
  140 MTDEX1(K)=MTBASE+L
      MTBASE=MTBASE+MAXLEGE
  150 CONTINUE
C-----DETERMINE X AND Y SCALING INFORMATION.
      MTBASE=0
      DO 170 K=1,MTSIZE
      JLOW=MTDEX1(K)-MTBASE
      XNOW=XTAB4(JLOW,K)
      YNOW=YTAB4(JLOW,K)
      YLOTAB(K)=YNOW
      XYEVAL(1,1,K)=XNOW
      XYEVAL(2,1,K)=XNOW
      XYEVAL(1,2,K)=YNOW
      XYEVAL(2,2,K)=YNOW
      DO 160 J=JLOW,IEIN
      XNOW=XTAB4(J,K)
      YNOW=YTAB4(J,K)
      IF(YNOW.LT.YLOTAB(K)) YLOTAB(K)=YNOW
      IF(XNOW.LT.XYEVAL(1,1,K)) XYEVAL(1,1,K)=XNOW
      IF(XNOW.GT.XYEVAL(2,1,K)) XYEVAL(2,1,K)=XNOW
      IF(YNOW.LT.XYEVAL(1,2,K)) XYEVAL(1,2,K)=YNOW
      IF(YNOW.GT.XYEVAL(2,2,K)) XYEVAL(2,2,K)=YNOW
  160 CONTINUE
      MTBASE=MTBASE+MAXLEGE
  170 CONTINUE
c-----------------------------------------------------------------------
C
C     LAST SECTION HAS BEEN READ. SET UP INDICES TO PLOT DATA. ALL
C     DATA IS CORE RESIDENT.
C
c-----------------------------------------------------------------------
      N2=MTDEX2(MTSIZE)
      IXYLOW=0
      IXYHI=MTDEX2(MTSIZE)
      IF(NE.GT.MAXLEGE) WRITE(OUTP,190) NE,MAXLEGE
      IF(LEGTOP.GT.MAXLEGC) WRITE(OUTP,180) LEGTOP,MAXLEGC
C-----INCREMENT TABLE COUNT.
      LTABLE(2)=LTABLE(2)+MTSIZE
      RETURN
  180 FORMAT(34x,' Up to',I4,' Legendre Coefficients.'/
     1       34x,' Only the First',I5,' Will be Used.')
  190 FORMAT(34X,' Legendre Coefficents Given at',I4,' Energies.'/
     1       34X,' Only the Highest ',I7,' Energies Will be Used.')
      END
      REAL*8 FUNCTION XPAGE(I)
C=======================================================================
C
C     DEFINE X VALUE FROM PAGING SYSTEM.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/LEADER/C1,C2,L1,LF,N1,N2,MAT,MF,MT
      COMMON/INPAGE/IXYLOW,IXYHI,ISCR,NPSIZE,NPSM2,IMUSED
      INCLUDE 'evalplot.h'
C-----INSURE POINT INDEX IS IN LEGAL RANGE.
      IF(I.GT.0.AND.I.LE.N2) GO TO 10
C-----ILLEGAL POINT INDEX.
      IF(OUTP.GT.0) WRITE(OUTP,40) I,N2
      XPAGE=0.0d0
      RETURN
C-----IF DATA IS NOT IN CORE LOAD CORRECT PAGE.
   10 IF(I.GT.IXYLOW) GO TO 20
      REWIND ISCR
      IXYHI=0
   20 IF(I.LE.IXYHI) GO TO 30
      READ(ISCR) XYTAB
      IXYLOW=IXYHI
      IXYHI=IXYHI+NPSIZE
      GO TO 20
C-----DEFINE REQUIRED POINT.
   30 XPAGE=XTAB(I-IXYLOW)
      RETURN
   40 FORMAT(' XPAGE..Index=',I6,' (MUST be 1 to',I6,')')
      END
      REAL*8 FUNCTION YPAGE(I)
C=======================================================================
C
C     DEFINE Y VALUE FROM PAGING SYSTEM.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/LEADER/C1,C2,L1,LF,N1,N2,MAT,MF,MT
      COMMON/INPAGE/IXYLOW,IXYHI,ISCR,NPSIZE,NPSM2,IMUSED
      INCLUDE 'evalplot.h'
C-----INSURE POINT INDEX IS IN LEGAL RANGE.
      IF(I.GT.0.AND.I.LE.N2) GO TO 10
C-----ILLEGAL POINT INDEX.
      IF(OUTP.GT.0) WRITE(OUTP,40) I,N2
      YPAGE=0.0d0
      RETURN
C-----IF DATA IS NOT IN CORE LOAD CORRECT PAGE.
   10 IF(I.GT.IXYLOW) GO TO 20
      REWIND ISCR
      IXYHI=0
   20 IF(I.LE.IXYHI) GO TO 30
      READ(ISCR) XYTAB
      IXYLOW=IXYHI
      IXYHI=IXYHI+NPSIZE
      GO TO 20
C-----DEFINE REQUIRED POINT.
   30 YPAGE=YTAB(I-IXYLOW)
      RETURN
   40 FORMAT(' YPAGE..Index=',I6,' (MUST be 1 to',I6,')')
      END
      SUBROUTINE ZOMLIM(JP1,JP2,XYFILL,YLOFIL)
C=======================================================================
C
C     FOR ANY GIVEN RANGE OF THE X AXIS DEFINE THAT PORTION OF THE Y
C     AXIS THAT IS SPANNED BY ANY GIVEN CROSS SECTION.
C     THIS INFORMATION IS USED TO DETERMINE THE CROSS SECTION LIMITS OF
C     ZOOMED PLOTS AND BY BOXER TO FIND OPEN AREAS OF THE FRAME INTO
C     WHICH THE LEGEND BOX MAY BE POSITIONED.
C
C=======================================================================
      INCLUDE 'implicit.h'
      DIMENSION XYFILL(2,2)
      DATA XLAST/0.0d0/
      DATA YLAST/0.0d0/
C-----DEFINE ARITHMETIC STATEMENT FUNCTION FOR LINEAR INTERPOLATION.
      TERP(A,A1,A2,B1,B2)=((A2-A)*B1+(A-A1)*B2)/(A2-A1)
C-----KMPLUS IS USED TO INDICATE.
C-----KMPLUS = 0 - SEARCHING FOR CROSS SECTION AT LOWER ENERGY LIMIT.
C-----       = 1 - LOWER LIMIT CROSS SECTION FOUND.
C-----       = 2 - POSITIVE Y VALUE HAS BEEN FOUND.
      KMPLUS=0
C-----AT THE END OF THIS ROUTINE XYFILL(1,2) AND XYFILL(2,2) WILL BE
C-----THE MINIMUM AND MAXIMUM CROSS SECTION RANGE FOUND IN THE ENERGY
C-----RANGE. YLOFIL WILL BE THE MINIMUM POSITIVE CROSS SECTION.
      XYFILL(1,2)=0.0d0
      XYFILL(2,2)=0.0d0
      YLOFIL=0.0d0
C-----EXAMINE CROSS SECTIONS IN ENERGY RANGE AND DEFINE MAXIMUM AND
C-----MINIMUM CROSS SECTIONS.
      DO 100 J=JP1,JP2
      XNOW=XPAGE(J)
      YNOW=YPAGE(J)
      IF(KMPLUS.GT.0) GO TO 50
c-----------------------------------------------------------------------
C
C     DEFINE CROSS SECTION AT LOWER ENERGY LIMIT.
C
c-----------------------------------------------------------------------
C-----TEST FOR POINT IN X RANGE.
      IF(XNOW.le.XYFILL(1,1)) go to 90
      IF(XNOW.lt.XYFILL(2,1)) go to 10
C-----IF FIRST POINT IS ABOVE UPPER X LIMIT THERE IS NO DATA IN RANGE.
      IF(J.le.JP1) go to 110
      go to 20
C-----IN X RANGE. IF FIRST POINT USE IT. OTHERWISE INTERPOLATE TO LOWER
C-----X LIMIT.
   10 IF(J.le.JP1) go to 30
C-----INTERPOLATE TO DEFINE CROSS SECTION AT LOWER ENERGY LIMIT.
   20 IF(XLAST.GT.XYFILL(1,1)) GO TO 40
      YLAST=TERP(XYFILL(1,1),XLAST,XNOW,YLAST,YNOW)
      XLAST=XYFILL(1,1)
      GO TO 40
   30 YLAST=YNOW
      XLAST=XNOW
C-----CROSS SECTION AT BEGINNING OF ENERGY RANGE HAS BEEN FOUND.
   40 KMPLUS=1
      XYFILL(1,2)=YLAST
      XYFILL(2,2)=YLAST
C-----DEFINE LOWEST POSITIVE Y LIMIT.
      IF(YLAST.LE.0.0d0) GO TO 50
      KMPLUS=2
      YLOFIL=YNOW
c-----------------------------------------------------------------------
C
C     AT OR ABOVE LOWER ENERGY LIMIT.
C
C     SEARCH FOR LOWEST AND HIGHEST CROSS SECTION VALUE.
C
c-----------------------------------------------------------------------
C-----IF REQUIRED INTERPOLATE BACK TO UPPER ENERGY LIMIT.
   50 IF(XNOW.LE.XYFILL(2,1)) GO TO 60
      YNOW=TERP(XYFILL(2,1),XLAST,XNOW,YLAST,YNOW)
      XNOW=XYFILL(2,1)
C-----DEFINE Y LIMITS.
   60 IF(YNOW.LT.XYFILL(1,2)) XYFILL(1,2)=YNOW
      IF(YNOW.GT.XYFILL(2,2)) XYFILL(2,2)=YNOW
C-----DEFINE LOWEST POSITIVE Y LIMIT.
      IF(YNOW.LE.0.0d0) GO TO 80
      IF(KMPLUS.GT.1) GO TO 70
      KMPLUS=2
      YLOFIL=YNOW
      GO TO 80
   70 IF(YNOW.LT.YLOFIL) YLOFIL=YNOW
C-----SCALING IS COMPLETE WHEN UPPER ENERGY LIMIT IS REACHED.
   80 IF(XNOW.GE.XYFILL(2,1)) GO TO 110
C-----SAVE LAST ENERGY AND CROSS SECTION.
   90 XLAST=XNOW
      YLAST=YNOW
  100 CONTINUE
  110 RETURN
      END
      SUBROUTINE BOXER
C=======================================================================
C
C     THIS ROUTINE WILL FIND THE MOST OPEN PORTION OF THE FRAME AND
C     POSITION AND DRAW THE LEGEND BOX IN THE SELECTED POSITION.
C
C     LPLOT =NO. OF ENTRIES IN BOX
C     LPLOT1=LOWER INDEX TO IMNEXT TABLE
C     LPLOT2=UPPER INDEX TO IMNEXT TABLE
C     NREACT=MAXIMUM NUMBER OF CHARACTERS IN ANY LEGEND BOX I.D.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/BOXIN/BOXX(2,2),BOXY(2),TIPS(3),YNAME,YSPAC2,NREACT
      COMMON/BOXLIM/BIXMIN,BIXMAX,BIYMIN,BIYMAX
      COMMON/SIZES/XL(3),YL(6),XYMID(2),HT,HTX1,HTX2
      COMMON/LINLOG/IXYWAY(2,10)
      COMMON/SUBPLT/LFRAME,NFRAME
      COMMON/REALLY/XYREAL(2,2,10)
      COMMON/INCHES/XYINCH(2,2,10),XYSIZE(2),DXYP(2,10)
      COMMON/PLANE/XYPLAN(2,2,10)
      COMMON/BXLIMS/BOXR(2,2)
      COMMON/THICKY/THICK,ITHICK,NTHICK(3),IMTHIN
      INCLUDE 'evalplot.h'
      DIMENSION RANGER(2),XYFILL(2,2,60),NRSIDE(2),BIXMM(2,2)
      EQUIVALENCE (BIXMM(1,1),BIXMIN)
c-----------------------------------------------------------------------
C
C     DEFINE ARITHMETIC STATEMENT FUNCTIONS.
C
c-----------------------------------------------------------------------
C-----DEFINE FUNCTION FOR TRANSFORMATION FROM PLANE OF PLOT (INCH) TO
C-----PLANE OF THE DATA (LINEAR OR LOG SCALING).
      PTREAL(ZDIM,LDIM)=
     1 ((ZDIM-XYINCH(1,LDIM,LFRAME))*XYPLAN(2,LDIM,LFRAME)+
     2 (XYINCH(2,LDIM,LFRAME)-ZDIM)*XYPLAN(1,LDIM,LFRAME))
     3 /(XYINCH(2,LDIM,LFRAME)-XYINCH(1,LDIM,LFRAME))
C-----DEFINE FUNCTION FOR TRANSFORMATION INTO COORDINATES OF PLOT (INCH)
      PTINCH(ZDIM,LDIM)=
     1 ((ZDIM-XYPLAN(1,LDIM,LFRAME))*XYINCH(2,LDIM,LFRAME)+
     2 (XYPLAN(2,LDIM,LFRAME)-ZDIM)*XYINCH(1,LDIM,LFRAME))
     3 /DXYP(LDIM,LFRAME)
c-----------------------------------------------------------------------
C
C     DEFINE SIZE OF LEGEND BOX AND INITIALIZE OPEN SPACE PARAMETERS.
C
c-----------------------------------------------------------------------
      CALL PEN(2)
c-----------------------------------------------------------------------
C
C     DEFINE X AND Y SIZES OF BOX.
C     BOX WIDTH ALLOWS FOR,
C     (1) 1 LEADING BLANK SPACE
C     (2) 4 CHARACTER WIDE LINE (REACTION I.D.)
C     (3) 1 BLANK SPACE
C     (4) REACTION I.D.
C     (5) 1 BLANK SPACE
C
c-----------------------------------------------------------------------
      OFFX=(FLOAT(NREACT)+7.5)*HT
      OFFY=FLOAT(1+LPLOT)*YSPAC2
C-----INITIALIZE LARGEST OPEN SPACE AND INDEX TO LARGEST OPEN AREA
      DSPACE=0.0d0
c-----------------------------------------------------------------------
C
C     DEFINE X LIMITS OF BOX POSITIONED TO LEFT OR RIGHT HAND
C     SIDE OF PLOT (IN INCHES AND IN THE PLANE OF THE DATA)
C
c-----------------------------------------------------------------------
      BOXX(1,1)=XYINCH(1,1,LFRAME)+YSPAC2
      BOXX(2,1)=BOXX(1,1)+OFFX
      BOXX(2,2)=XYINCH(2,1,LFRAME)-YSPAC2
      BOXX(1,2)=BOXX(2,2)-OFFX
c-----------------------------------------------------------------------
C
C     SET UP LOOP TO LOOK AT LEFT AND THEN RIGHT OF PLOT FOR OPEN AREA
C     IN WHICH LEGEND BOX CAN BE POSITIONED.
C
c-----------------------------------------------------------------------
C-----SET UP LOOP OVER POSITIONING BOX TO LEFT OR RIGHT SIDE OF PLOT.
      DO 160 LBOX=1,2
C-----TRANSFORM BOX X (INCH) COORDINATES TO THE PLANE OF THE DATA.
      BOXR(1,LBOX)=PTREAL(BOXX(1,LBOX),1)
      BOXR(2,LBOX)=PTREAL(BOXX(2,LBOX),1)
      IF(IXYWAY(1,LFRAME).NE.2) GO TO 10
      BOXR(1,LBOX)=10.0d0**BOXR(1,LBOX)
      BOXR(2,LBOX)=10.0d0**BOXR(2,LBOX)
C-----INITIALIZE NUMBER OF REACTIONS ON THIS SIDE OF PLOT.
   10 NRSIDE(LBOX)=0
c-----------------------------------------------------------------------
C
C     DETERMINE Y RANGE OF EACH REACTION WITHIN X RANGE OF LEGEND BOX
C     POSITIONED TO THIS SIDE OF PLOT.
C
c-----------------------------------------------------------------------
      DO 40 N=LPLOT1,LPLOT2
      MTNOW=IMNEXT(N)
C-----IF REACTION LOWER ENERGY LIMIT IS ABOVE UPPER X LIMIT OF LEGEND
C-----BOX OR REACTION UPPER ENERGY LIMIT IS BELOW LOWER X LIMIT OF
C-----LEGEND BOX NO CONFLICT IS POSSIBLE.
      IF(XYEVAL(1,1,MTNOW).GE.BOXR(2,LBOX).OR.
     1   XYEVAL(2,1,MTNOW).LE.BOXR(1,LBOX)) GO TO 40
C-----DEFINE Y RANGE OF REACTION OVER X RANGE OF LEGEND BOX.
      NRSIDE(LBOX)=NRSIDE(LBOX)+1
      NNR=NRSIDE(LBOX)
      XYFILL(1,1,NNR)=BOXR(1,LBOX)
      XYFILL(2,1,NNR)=BOXR(2,LBOX)
      CALL ZOMLIM(MTDEX1(MTNOW),MTDEX2(MTNOW),XYFILL(1,1,NNR),
     1 YLOFIL)
C-----IGNOR IF MAXIMUM LESS THAN MINIMUM RANGE OF PLOT.
      IF(XYFILL(2,2,NNR).GT.XYREAL(1,2,LFRAME)) GO TO 20
      NNR=NNR-1
      GO TO 40
C-----TRUNCATE MINIMUM TO MINIMUM OF PLOT.
   20 IF(XYFILL(1,2,NNR).LT.XYREAL(1,2,LFRAME))
     1 XYFILL(1,2,NNR)=XYREAL(1,2,LFRAME)
C-----TRANSFORM Y RANGE TO PLANE OF THE PLOT.
      IF(IXYWAY(2,LFRAME).NE.2) GO TO 30
      XYFILL(1,2,NNR)=DLOG10(XYFILL(1,2,NNR))
      XYFILL(2,2,NNR)=DLOG10(XYFILL(2,2,NNR))
   30 XYFILL(1,2,NNR)=PTINCH(XYFILL(1,2,NNR),2)
      XYFILL(2,2,NNR)=PTINCH(XYFILL(2,2,NNR),2)
   40 CONTINUE
c-----------------------------------------------------------------------
C
C     SORT Y RANGES (IN INCHES) INTO ASCENDING ORDER.
C
c-----------------------------------------------------------------------
      IF(NNR.eq.1) go to 110
      IF(NNR.gt.1) go to 50
C-----ENTIRE PLOTTING AREA OPEN. STOP SEARCH AND PLOT LEGEND BOX IN
C-----UPPER CORNER.
      BOXY(2)=XYINCH(2,2,LFRAME)-YSPAC2
      BOXY(1)=BOXY(2)-OFFY
      GO TO 200
C-----SORT Y RANGES (IN INCHES) INTO DESCENDING ORDER.
   50 IHIGH=NNR+1
      DO 80 IIR=2,NNR
C-----FIND REMAINING HIGHEST UPPER LIMIT.
      IHIGH=IHIGH-1
      IMBIG=1
      DO 60 I=2,IHIGH
      IF(XYFILL(2,2,I).GT.XYFILL(2,2,IMBIG)) IMBIG=I
   60 CONTINUE
C-----MOVE HIGHEST UPPER LIMIT TO HIGHEST REMAINING POSITION.
      DO 70 L=1,2
      DUMXY=XYFILL(L,2,IHIGH)
      XYFILL(L,2,IHIGH)=XYFILL(L,2,IMBIG)
      XYFILL(L,2,IMBIG)=DUMXY
   70 CONTINUE
   80 CONTINUE
c-----------------------------------------------------------------------
C
C     ELIMINATE OVERLAPPING Y RANGES (I.E. IF TWO RANGES OVERLAP REPLACE
C     THEM BY A SINGLE RANGE THAT ENCOMPASSES BOTH PREVIOUS RANGES).
C
c-----------------------------------------------------------------------
      NNNR=1
      DO 100 I=2,NNR
C-----DOES TOP OF CURRENT Y RANGE OVERLAP WITH THE BOTTOM OF THE NEXT
C-----Y RANGE.
      IF(XYFILL(2,2,NNNR).ge.XYFILL(1,2,I)) go to 90
C-----NO. INCREASE NUMBER OF NON-OVERLAPPING RANGES AND MOVE Y RANGE
C-----OF NEXT RANGE INTO NEXT POSITION.
      NNNR=NNNR+1
      XYFILL(1,2,NNNR)=XYFILL(1,2,I)
      XYFILL(2,2,NNNR)=XYFILL(2,2,I)
      GO TO 100
C-----YES. RANGES OVERLAP. ELIMINATE ONE RANGE BY DEFINING A NEW UPPER
C-----LIMIT FOR CURRENT RANGE AND BY SELECTING THE LOWER OF THE TWO
C-----LOWER LIMITS.
   90 XYFILL(2,2,NNNR)=XYFILL(2,2,I)
      IF(XYFILL(1,2,NNNR).GT.XYFILL(1,2,I))
     1 XYFILL(1,2,NNNR)=XYFILL(1,2,I)
  100 CONTINUE
C-----DEFINE NUMBER OF NON-OVERLAPPING RANGES.
      NNR=NNNR
c-----------------------------------------------------------------------
C
C     FIND LARGEST OPEN AREA. IF IT IS BIG ENOUGH POSITION BOX IN
C     THE MIDDLE OF IT.
C
c-----------------------------------------------------------------------
C-----INITIALIZE BOTTOM OF FIRST OPEN AREA TO BOTTOM OF PLOTTING
C-----AREA.
  110 BOTTOM=XYINCH(1,2,LFRAME)
      NNRP1=NNR+1
      IMBIG=0
      DO 150 I=1,NNRP1
C-----DEFINE TOP OF NEXT OPEN SPACE TO BE AT THE BOTTOM OF THE NEXT
C-----Y RANGE OR THE TOP OF THE PLOTTING AREA.
      IF(I.LT.NNRP1) GO TO 120
      TOP=XYINCH(2,2,LFRAME)
      GO TO 130
  120 TOP=XYFILL(1,2,I)
C-----DEFINE SIZE OF OPEN AREA AND IF IT IS THE LARGEST AREA FOUND
C-----SO FAR KEEP TRACK OF WHERE IT IS LOCATED.
  130 DY=TOP-BOTTOM
      IF(DY.LE.DSPACE) GO TO 140
      DSPACE=DY
      IMBIG=I
      YMID=TOP+BOTTOM
      BOXY(2)=0.5d0*(YMID+OFFY)
      BOXY(1)=0.5d0*(YMID-OFFY)
C-----DEFINE BOTTOM OF NEXT OPEN AREA TO BE TOP OF CURRENT Y RANGE.
  140 BOTTOM=XYFILL(2,2,I)
  150 CONTINUE
C-----SAVE MAXIMUM IN CASE PLOTTING AREA MUST BE EXTENDED.
      RANGER(LBOX)=XYFILL(2,2,NNR)
C-----SAVE NUMBER OF RANGES
      NRSIDE(LBOX)=NNR
C-----IF LARGEST SPACE FOUND IS LARGE ENOUGH USE IT WITHOUT FURTHER
C-----SEARCHING.
      IF(DSPACE.GE.OFFY) GO TO 180
  160 CONTINUE
c-----------------------------------------------------------------------
C
C     LARGEST SPACE IS NOT LARGE ENOUGH FOR LEGEND BOX. EXTEND Y RANGE
C     OF PLOT UPWARDS TO MAKE ROOM FOR LEGEND BOX.
C
c-----------------------------------------------------------------------
C-----SELECT EITHER LEFT OR RIGHT HAND SIDE OF PLOT DEPENDING ON WHICH
C-----SIDE ALREADY HAS THE LARGEST OPEN AREA AT THE TOP.
      LBOX=1
      IF(RANGER(1).GT.RANGER(2)) LBOX=2
C-----DEFINE POSITION OF THE LEGEND BOX.
      BOXY(2)=XYINCH(2,2,LFRAME)-YSPAC2
      BOXY(1)=BOXY(2)-OFFY
C-----DEFINE REMAINING AREA OF PLOT IN INCHES.
      BOTNCH=XYINCH(1,2,LFRAME)+YSPAC2
      TOPNCH=BOXY(1)-YSPAC2
C-----DEFINE Y RANGE OF CURVES IN THE UNITS OF THE PLOT (LINEAR OR LOG)
      BOTPL=PTREAL(BOTNCH,2)
      TOPPL=PTREAL(RANGER(LBOX),2)
C-----DEFINE THE SCALE FACTOR REQUIRED TO MAP THE RANGE OF THE CURVES
C-----INTO THE REMAINING OPEN AREA OF THE PLOT.
      DSPACE=(TOPNCH-BOTNCH)/(TOPPL-BOTPL)
C-----DEFINE NEW Y LIMITS OF PLOT TO HAVE ALL CURVES BELOW LEGEND BOX.
      XYPLAN(2,2,LFRAME)=BOTPL+(XYINCH(2,2,LFRAME)-BOTNCH)/DSPACE
      XYPLAN(1,2,LFRAME)=BOTPL-YSPAC2/DSPACE
      DXYP(2,LFRAME)=XYPLAN(2,2,LFRAME)-XYPLAN(1,2,LFRAME)
      IF(IXYWAY(2,LFRAME).EQ.2) GO TO 170
      XYREAL(1,2,LFRAME)=XYPLAN(1,2,LFRAME)
      XYREAL(2,2,LFRAME)=XYPLAN(2,2,LFRAME)
      GO TO 200
  170 XYREAL(1,2,LFRAME)=10.0d0**XYPLAN(1,2,LFRAME)
      XYREAL(2,2,LFRAME)=10.0d0**XYPLAN(2,2,LFRAME)
      GO TO 200
c-----------------------------------------------------------------------
C
C     LARGEST SPACE IS LARGE ENOUGH FOR LEGEND BOX. IF LARGEST SPACE
C     IS IN A CORNER CENTER LEGEND BOX ON CORNER. OTHERWISE CENTER
C     IN THE MIDDLE OF THE OPEN SPACE.
C
c-----------------------------------------------------------------------
  180 IF(IMBIG.NE.1) GO TO 190
      BOXY(1)=XYINCH(1,2,LFRAME)+YSPAC2
      BOXY(2)=BOXY(1)+OFFY
      GO TO 200
  190 IF(IMBIG.NE.NRSIDE(LBOX)+1) GO TO 200
      BOXY(2)=XYINCH(2,2,LFRAME)-YSPAC2
      BOXY(1)=BOXY(2)-OFFY
c-----------------------------------------------------------------------
C
C     POSITION OF LEGEND BOX DEFINED. DEFINE ALL LEGEND PARAMETERS
C     AND THEN PLOT LEGEND BOX
C
c-----------------------------------------------------------------------
C-----INITIALIZE Y POSITION OF NEXT LEGEND LINE
  200 YNAME=BOXY(2)
C-----DEFINE START AND END OF LINE TYPE, AND START OF LEGEND I.D.
      TIPS(1)=BOXX(1,LBOX)+HT
      TIPS(2)=TIPS(1)+4.0d0*HT
      TIPS(3)=TIPS(2)+HT
C-----DEFINE FINAL BOX POSITION IN INCHES.
      BIXMIN=BOXX(1,LBOX)
      BIXMAX=BOXX(2,LBOX)
      BIYMIN=BOXY(1)
      BIYMAX=BOXY(2)
C-----FILL INTERIOR.
      CALL COLORBOX(BIXMM(1,1),BIXMM(1,2),0,2)
C-----PLOT LEGEND BOX.
      ITHICK=NTHICK(2)
      CALL PEN(2)
      CALL PLOT1(BIXMIN,BIYMIN,3)
      CALL PLOT1(BIXMIN,BIYMAX,2)
      CALL PLOT1(BIXMAX,BIYMAX,2)
      CALL PLOT1(BIXMAX,BIYMIN,2)
      CALL PLOT1(BIXMIN,BIYMIN,2)
      ITHICK=0
C-----DEFINE POSITION OF LEGEND BOX IN PLANE OF THE DATA.
      BOXR(1,1)=PTREAL(BIXMIN,1)
      BOXR(2,1)=PTREAL(BIXMAX,1)
      BOXR(1,2)=PTREAL(BIYMIN,2)
      BOXR(2,2)=PTREAL(BIYMAX,2)
      IF(IXYWAY(1,LFRAME).NE.2) GO TO 210
      BOXR(1,1)=10.0d0**BOXR(1,1)
      BOXR(2,1)=10.0d0**BOXR(2,1)
  210 IF(IXYWAY(2,LFRAME).NE.2) GO TO 220
      BOXR(1,2)=10.0d0**BOXR(1,2)
      BOXR(2,2)=10.0d0**BOXR(2,2)
  220 RETURN
      END
      SUBROUTINE SETPLT(MFRAME)
C=======================================================================
C
C     INITIALIZE ALL PLOTTING PARAMETERS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/INCHES/XYINCH(2,2,10),XYSIZE(2),DXYP(2,10)
      COMMON/LINLOG/IXYWAY(2,10)
      COMMON/EDGE/XYEDGE(2,2),XYMAJR(2,2),RASTER(2)
      COMMON/SUBPLT/LFRAME,NFRAME
      COMMON/SIZES/XL(3),YL(6),XYMID(2),HT,HTX1,HTX2
      COMMON/BOXIN/BOXX(2,2),BOXY(2),TIPS(3),YNAME,YSPAC2,NREACT
      COMMON/CLIPER/UPMOST,UPNEXT,NSTACK
      COMMON/THICKY/THICK,ITHICK,NTHICK(3),IMTHIN
C-----DEFINE LINE THICKNESS.
      NTHICK(1)=0
      NTHICK(2)=ITHICK
      NTHICK(3)=2*ITHICK
      ITHICK=0
C-----INITIALIZE PLOTTER.
      CALL FRAME0
C-----DEFINE THE NUMBER OF SUB-PLOTS PER PLOT (ONLY ALLOW 1 TO 10).
      NFRAME=MFRAME
      IF(NFRAME.LT.1) NFRAME=1
      IF(NFRAME.GT.10) NFRAME=10
C-----INITIALIZE SUB-PLOT COUNTERS TO FORCE FRAME ADVANCE BEFORE
C-----FIRST PLOT.
      LFRAME=NFRAME
C-----DEFINE X AND Y DIMENSIONS OF EACH SUB-PLOT.
      XYSIZE(1)=XYMAJR(2,1)-XYMAJR(1,1)
      YFRAME=(XYMAJR(2,2)-YL(4))/FLOAT(NFRAME)
      XYSIZE(2)=YFRAME-40.0d0*HT/14.0d0
C-----DEFINE CORNERS OF EACH SUB-PLOT AND INITIALIZE SCALES TO LOG.
      IXYWAY(1,1)=2
      IXYWAY(2,1)=2
      XYINCH(1,1,1)=XYMAJR(1,1)
      XYINCH(2,1,1)=XYMAJR(2,1)
      XYINCH(2,2,1)=XYMAJR(2,2)
      XYINCH(1,2,1)=XYINCH(2,2,1)-XYSIZE(2)
      IF(NFRAME.LE.1) GO TO 20
      DO 10 N=2,NFRAME
      IXYWAY(1,N)=2
      IXYWAY(2,N)=2
      XYINCH(1,1,N)=XYMAJR(1,1)
      XYINCH(2,1,N)=XYMAJR(2,1)
      XYINCH(1,2,N)=XYINCH(1,2,N-1)-YFRAME
      XYINCH(2,2,N)=XYINCH(2,2,N-1)-YFRAME
   10 CONTINUE
C-----DEFINE DISTANCE BETWEEN LINES IN LEGEND BOX.
   20 YSPAC2=2.0d0*HT
C-----X AXIS LABEL ONLY AT BOTTOM OF PLOT.
      NSTACK=1
C-----DEFINE X INCH LIMITS OF ALL PLOTS.
      DO 30 L=2,10
      XYINCH(1,1,L)=XYINCH(1,1,1)
      XYINCH(2,1,L)=XYINCH(2,1,1)
   30 CONTINUE
      RETURN
      END
      SUBROUTINE GRID
C=======================================================================
C
C     DRAW GRID ALONG ALL FOUR AXIS OF A PLOT. GRID IN X OR Y DIRECTION
C     MAY BE LINEAR OR LOG. GRID MARK SPACING IS COMPUTED TO ALLOW
C     VISUAL DISCRIMINATION TO WITHIN 1 PER-CENT.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 DIGIT
      COMMON/CLIPER/UPMOST,UPNEXT,NSTACK
      COMMON/INCHES/XYINCH(2,2,10),XYSIZE(2),DXYP(2,10)
      COMMON/LINLOG/IXYWAY(2,10)
      COMMON/GRIDLN/IDEC(2),ISCALE(2),VIRTIN(2,2),XYBASE(2),DXYBAS(2),
     1 IDIGIT(2)
      COMMON/EDGE/XYEDGE(2,2),XYMAJR(2,2),RASTER(2)
      COMMON/TRASH/ZGRID(1000),ZG(2),ZBASE,D,KDEC,KFINE,KULTRA,LROT,IWAY
      COMMON/SUBPLT/LFRAME,NFRAME
      COMMON/SIZES/XL(3),YL(6),XYMID(2),HT,HTX1,HTX2
      COMMON/PLOTXY/XYPLOT(2,2),NBORD
      COMMON/XYTICK/TICKXY(2)
      COMMON/THICKY/THICK,ITHICK,NTHICK(3),IMTHIN
      COMMON/GRIDDY/IMFINE(2)
      COMMON/PLTLIM/XLIM1,XLIM2,YLIM1,YLIM2
      DIMENSION Q(2),P(3,2),DIGIT(8)
      DATA DIGIT/'2','3','4','5','6','7','8','9'/
C-----SELECT GRID COLOR.
      CALL PEN(2)
C-----IF REQUESTED DRAW OUTLINE OF ENTIRE PLOT.
      IF(NBORD.NE.1) GO TO 10
      ITHICK=NTHICK(3)
      CALL PLOT1(XYEDGE(1,1),XYEDGE(1,2),3)
      CALL PLOT1(XYEDGE(1,1),XYEDGE(2,2),2)
      CALL PLOT1(XYEDGE(2,1),XYEDGE(2,2),2)
      CALL PLOT1(XYEDGE(2,1),XYEDGE(1,2),2)
      CALL PLOT1(XYEDGE(1,1),XYEDGE(1,2),2)
   10 ITHICK=NTHICK(2)
C-----DEFINE LIMITS OF PLOT FOR INTERNAL USE.
      XLIM1=XYINCH(1,1,LFRAME)
      XLIM2=XYINCH(2,1,LFRAME)
      YLIM1=XYINCH(1,2,LFRAME)
      YLIM2=XYINCH(2,2,LFRAME)
C-----DRAW OUTLINE FOR PLOTTING AREA.
      CALL PLOT1(XLIM1,YLIM1,3)
      CALL PLOT1(XLIM1,YLIM2,2)
      CALL PLOT1(XLIM2,YLIM2,2)
      CALL PLOT1(XLIM2,YLIM1,2)
      CALL PLOT1(XLIM1,YLIM1,2)
      ITHICK=0
C-----DEFINE FLOATING POINT NUMBER OF SUB-PLOTS.
      FNFRAM=NFRAME
C-----DEFINE HIGHEST POINT ON Y AXIS THAT CHARACTERS MAY BE WRITTEN
C-----WHILE STILL AVOIDING OVERLAP WITH CHARACTERS ON PRECEDING PLOTS.
      IF(LFRAME.GT.1) GO TO 20
      UPMOST=XYEDGE(2,2)
      GO TO 30
   20 UPMOST=UPNEXT
   30 UPNEXT=UPMOST
C-----DETERMINE ALL AXIS SCALING INFORMATION.
      CALL SCALER
C-----SET UP LOOP OVER X AND Y DIRECTIONS.
      DO 230 LROT=1,2
C-----DEFINE THE GRID TICK LENGTH IN ORTHOGONAL DIRECTION.
      TICK1=TICKXY(3-LROT)
      IWAY=IXYWAY(LROT,LFRAME)
      KDEC=IDEC(LROT)
      D=(VIRTIN(2,LROT)-VIRTIN(1,LROT))/FLOAT(KDEC)
C-----DEFINE EFFECTIVE NUMBER OF DECADES ON PLOT.
      EFFDEC=(XYINCH(2,LROT,LFRAME)-XYINCH(1,LROT,LFRAME))/D
      LL=3-LROT
      ZG(LL)=XYINCH(1,LL,LFRAME)
C-----DEFINE FINE AND ULTRA-FINE GRID STRUCTURE.
      CALL TICKER
C-----SET UP LOOP OVER LOWER AND UPPER AXIS.
      DO 220 LOOPX=1,2
      ZBASE=XYBASE(LROT)
      IF(DABS(ZBASE).LT.0.001d0) ZBASE=0.0d0
      TICK2=2.0d0*TICK1
      TICK3=4.0d0*TICK1
C-----DEFINE BASE LINE AND THREE TICK MARK OFFSET POSITIONS.
      Q(LL)=ZG(LL)
      P(1,LL)=ZG(LL)+TICK1
      P(2,LL)=ZG(LL)+TICK2
      P(3,LL)=ZG(LL)+TICK3
      ZG(LROT)=VIRTIN(1,LROT)
      KDECP1=KDEC+1
C-----ADD AXIS OFFSET SCALE FACTOR IF LINEAR SCALE OR
C-----NO LOG DECADE MARK APPEARS ON PLOT.
      IF(LOOPX.NE.1) GO TO 50
      IF(IWAY.EQ.2) GO TO 40
      ZSCALE=ISCALE(LROT)
      IF(NSTACK.LE.0.OR.LROT.EQ.2.OR.LFRAME.EQ.NFRAME)
     1 CALL AXISOF(ZSCALE)
      GO TO 50
   40 IF(ZG(LROT).GE.XYINCH(1,LROT,LFRAME)) GO TO 60
      IF(ZG(LROT)+D.LE.XYINCH(2,LROT,LFRAME)) GO TO 70
      IF(NSTACK.LE.0.OR.LROT.EQ.2.OR.LFRAME.EQ.NFRAME)
     1 CALL AXISOF(ZBASE)
   50 IF(ZG(LROT).LT.XYINCH(1,LROT,LFRAME)) GO TO 70
   60 CALL PLOT1(ZG(1),ZG(2),3)
C-----SET UP LOOP OVER COARSE TICK MARKS.
   70 DO 200 M=1,KDECP1
C-----ADD COARSE TICK MARK AND AXIS LABEL.
      IF(ZG(LROT).lt.XYINCH(1,LROT,LFRAME)) go to 100
      IF(ZG(LROT).GT.XYINCH(2,LROT,LFRAME)) GO TO 210
c-----------------------------------------------------------------------
C
C     SELECT GRID TYPE.
C
c-----------------------------------------------------------------------
      P(3,LROT)=ZG(LROT)
      IF(IMFINE(1).EQ.0) GO TO 80
C-----DASH OR SOLID. ONLY DRAW ONCE.
      IF(LOOPX.EQ.1) CALL PLOTZ(ZG(LROT),LROT,IMFINE(1))
      GO TO 90
C-----TICK MARKS.
   80 CALL PLOT1(P(3,1),P(3,2),2)
   90 IF(LOOPX.EQ.1.AND.(NSTACK.LE.0.OR.LROT.EQ.2.OR.LFRAME.EQ.NFRAME))
     1 CALL AXIS
  100 IF(M.GT.KDEC) GO TO 210
      ZBASE=ZBASE+DXYBAS(LROT)
      K=0
C-----SET UP LOOP OVER FINE TICK MARKS.
      DO 190 KK=1,KFINE
C-----SET UP LOOP OVER ULTRA-FINE TICK MARKS.
      DO 110 K3=1,KULTRA
      K=K+1
      Q(LROT)=ZG(LROT)+ZGRID(K)
      IF(Q(LROT).LE.XYINCH(1,LROT,LFRAME)) GO TO 110
      IF(Q(LROT).GT.XYINCH(2,LROT,LFRAME)) GO TO 210
      P(1,LROT)=Q(LROT)
      CALL PLOT1(Q(1),Q(2),3)
      CALL PLOT1(P(1,1),P(1,2),2)
  110 CONTINUE
C-----ADD FINE TICK MARK IF ON PLOTTING AREA.
      IF(Q(LROT).LE.XYINCH(1,LROT,LFRAME)) GO TO 190
      IF(IMFINE(2).LE.0) GO TO 120
      IF(LOOPX.EQ.1) CALL PLOTZ(Q(LROT),LROT,IMFINE(2))
      GO TO 130
  120 P(2,LROT)=Q(LROT)
      CALL PLOT1(P(2,1),P(2,2),2)
C-----IF THIS IS THE LOWER X OR Y AXIS
C-----AND A LOG SCALE WITH JUST A FEW DECADES ADD ADDITIONAL AXIS UNITS.
  130 IF(LOOPX.NE.1.OR.IWAY.EQ.1.OR.KK.EQ.KFINE) GO TO 190
      IF(LROT.EQ.2) GO TO 160
C-----LOWER X AXIS. ALL FINE MARKS FOR UP TO 2 DECADES, EVEN MARKS UP
C-----TO 4 DECADES AND ONLY THE NUMBER 5 FOR UP TO 6 DECADES.
      IF(EFFDEC.GT.6.0d0) GO TO 190
      IF(EFFDEC.LE.4.0d0) GO TO 140
      IF(KK.eq.4) go to 150
      go to 190
  140 IF(EFFDEC.LE.2.0d0) GO TO 150
      IF(MOD(KK,2).EQ.0) GO TO 190
  150 IF(NSTACK.LE.0.OR.LROT.EQ.2.OR.LFRAME.EQ.NFRAME) then
      QSS = Q(1)-HTX2
      CALL SYMBL1(QSS,YL(6),HTX1,DIGIT(KK),0.0,1)
      endif
      GO TO 190
C-----UPPER Y AXIS. ALL FINE MARKS FOR UP TO 0.6 DECADES, EVEN MARKS
C-----FOR UP TO 1 DECADE AND ONLY THE NUMBER 5 FOR UP TO 2.2 DECADES.
  160 IF(EFFDEC.GT.8.8d0/FNFRAM) GO TO 190
      IF(EFFDEC.LE.4.0d0/FNFRAM) GO TO 170
      IF(KK.eq.4) go to 180
      go to 190
  170 IF(EFFDEC.LT.2.4/FNFRAM) GO TO 180
      IF(MOD(KK,2).EQ.0) GO TO 190
  180 IF(Q(2).GT.UPMOST) GO TO 190
      CALL SYMBL1(XL(3),Q(2),HTX1,DIGIT(KK),0.0,1)
      UPTRY=Q(2)-HT
      IF(UPTRY.LT.UPNEXT) UPNEXT=UPTRY
  190 CONTINUE
C-----ADVANCE ONE DECADE.
      ZG(LROT)=ZG(LROT)+D
  200 CONTINUE
C-----SET BASE LINE AT UPPER AXIS FOR NEXT PASS.
  210 ZG(LL)=XYINCH(2,LL,LFRAME)
C-----REVERSE DIRECTION OF TICK MARKS FOR UPPER AXIS.
      TICK1=-TICK1
  220 CONTINUE
  230 CONTINUE
      RETURN
      END
      SUBROUTINE AXIS
C=======================================================================
C
C     PLOT SCALE DIVISION ON EITHER X OR Y AXIS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 TEN
      COMMON/CLIPER/UPMOST,UPNEXT,NSTACK
      COMMON/TRASH/ZGRID(1000),ZG(2),ZBASE,D,KDEC,KFINE,KULTRA,LROT,IWAY
      COMMON/SIZES/XL(3),YL(6),XYMID(2),HT,HTX1,HTX2
      COMMON/GRIDLN/IDEC(2),ISCALE(2),VIRTIN(2,2),XYBASE(2),DXYBAS(2),
     1 IDIGIT(2)
      COMMON/BIAS/NSPACE(2),KDENSE(2,2)
      DIMENSION TEN(2)
      DATA TEN/'1','0'/
C-----CORRECT AXIS LABEL FOR POSSIBLE ROUND-OFF.
      IF(DABS(ZBASE).LT.0.001d0) ZBASE=0.0d0
C-----INSURE AXIS LABELS ARE NOT TOO CLOSE TOGETHER.
      IF(KDEC.LE.NSPACE(LROT)) GO TO 10
      KSPACE=KDEC/NSPACE(LROT)+1
      NBASE=(DABS(ZBASE)+0.001d0)/DXYBAS(LROT)
      IF(MOD(NBASE,KSPACE).NE.0) GO TO 80
C-----SELECT X OR Y AXIS SCALE.
   10 GO TO (20,40),LROT
C-----X AXIS. SELECT LINEAR OR LOG SCALING.
   20 GO TO (30,60),IWAY
C-----LINEAR X. DEFINE NUMBER OF CHARACTERS THAT WILL BE PLOTTED.
   30 LDIG=IDIGIT(LROT)+2
      IF(ZBASE.LT.0.0d0) LDIG=LDIG+1
      NZBASE=1.00001d0*DABS(ZBASE)
      IF(NZBASE.GE.10) LDIG=LDIG+1
      IF(NZBASE.GE.100) LDIG=LDIG+1
      IF(NZBASE.GE.1000) LDIG=LDIG+1
C-----DEFINE OFFSET TO CENTER NUMBER BELOW AXIS TICK MARK.
      OFFZ=0.5d0*FLOAT(LDIG)*HT
C-----PLOT AXIS SCALE.
      ZSS = ZG(1)-OFFZ
      CALL NUMBR1(ZSS,YL(3),HT,ZBASE,0.0,IDIGIT(LROT))
      GO TO 80
C-----Y AXIS. SELECT LINEAR OR LOG.
   40 GO TO (50,70),IWAY
C-----LINEAR Y AXIS. IF NO CHARACTER OVERLAP PLOT AXIS SCALE.
   50 IF(ZG(2).GT.UPMOST) GO TO 80
C-----DEFINE NUMBER OF CHARACTERS THAT WILL BE PLOTTED.
      LDIG=IDIGIT(LROT)+2
      IF(ZBASE.LT.0.0d0) LDIG=LDIG+1
      NZBASE=1.00001d0*DABS(ZBASE)
      IF(NZBASE.GE.10) LDIG=LDIG+1
      IF(NZBASE.GE.100) LDIG=LDIG+1
      IF(NZBASE.GE.1000) LDIG=LDIG+1
C-----RIGHT ADJUST NUMBERS TO ALL END ONE SPACE FROM BORDER
      Z1P=XL(1)+(4-LDIG)*HT
      CALL NUMBR1(Z1P,ZG(2),HT,ZBASE,0.0,IDIGIT(LROT))
      UPTRY=ZG(2)-HT
      IF(UPTRY.LT.UPNEXT) UPNEXT=UPTRY
      GO TO 80
C-----LOG X. PLOT 10 TO GO WITH EXPONENT.
   60 ZSS = ZG(1)-HT
      CALL SYMBL1(ZSS,YL(4),HT,TEN(1),0.0,2)
C-----PLOT EXPONENT AS INTEGER.
      Z1P=ZG(1)
      IF(ZBASE.GE.0.0d0) Z1P=Z1P+HT
      CALL NUMBR1(Z1P,YL(3),HT,ZBASE,0.0,-1)
      GO TO 80
C-----LOG Y. DEFINE CENTER OF EXPONENT
   70 Z2PU=ZG(2)+HT
      IF(Z2PU.GT.UPMOST) GO TO 80
C-----PLOT 10 TO GO WITH EXPONENT.
      CALL SYMBL1(XL(1),ZG(2),HT,TEN(1),0.0,2)
C-----PLOT EXPONENT AS INTEGER.
      Z1P=XL(1)+HT
      IF(ZBASE.GE.0.0d0) Z1P=Z1P+HT
      CALL NUMBR1(Z1P,Z2PU,HT,ZBASE,0.0,-1)
      UPTRY=ZG(2)-HT
      IF(UPTRY.LT.UPNEXT) UPNEXT=UPTRY
   80 RETURN
      END
      SUBROUTINE AXISOF(EXPO)
C=======================================================================
C
C     PLOT AXIS SCALE FACTOR FOR X OR Y AXIS IN THE FORM X 10 TO SOME
C     POWER.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 TIME10
      COMMON/TRASH/ZGRID(1000),ZG(2),ZBASE,D,KDEC,KFINE,KULTRA,LROT,IWAY
      COMMON/SIZES/XL(3),YL(6),XYMID(2),HT,HTX1,HTX2
      COMMON/INCHES/XYINCH(2,2,10),XYSIZE(2),DXYP(2,10)
      COMMON/SUBPLT/LFRAME,NFRAME
      DIMENSION TIME10(3)
      DATA TIME10/'X','1','0'/
C-----NO NEED TO PLOT SCALE FACTOR IF IT IS UNITY.
      IF(EXPO.EQ.0.0d0) RETURN
C-----SELECT X OR Y AXIS.
      GO TO (10,20),LROT
C-----X AXIS LABEL IS ALWAYS AT BOTTOM, LEFT HAND SIDE.
   10 XNOW=XYINCH(1,1,LFRAME)+5.0d0*HT
      YNOW=YL(5)
      GO TO 30
C-----Y AXIS LABEL IS ALWAYS AT TOP, RIGHT HAND SIDE.
   20 YNOW=XYINCH(2,2,LFRAME)-4.0d0*HT
      XNOW=XL(2)
C-----PLOT X10 FOLLOWED BY EXPONENT.
   30 OFFZ=3.0d0*HT
      CALL SYMBL1(XNOW,YNOW,HT,TIME10(1),0.0,3)
      XSS = XNOW+OFFZ
      CALL NUMBR1(XSS,YNOW+HT,HT,EXPO,0.0,-1)
      RETURN
      END
      SUBROUTINE SCALER
C=======================================================================
C
C     DEFINE SCALING PARAMETERS IN ORDER TO ADEQUTELY ANNOTATE AXIS.
C     EACH AXIS IS TREATED SEPARATELY. IF THE SCALING IS LINEAR THE
C     RANGE OF THE AXIS IS USED TO SELECT A MAJOR SUB-DIVISION. THE
C     AXIS WILL THEN BE LABELLED AT EACH MULTIPLE OF THIS MAJOR
C     SUB-DIVISION. THE NUMBER OF MAJOR SUB-DIVISIONS WILL ALWAYS BE
C     5 TO 15, UNLESS THE PLOT COVERS AN EXTREMELY NARROW RANGE.
C     A VIRTUAL PLOT SIZE IS THEN DEFINED WHICH IS AN EXACT MULTIPLE
C     OF THE MAJOR SUB-DIVISION SIZE AND WHICH COVERS A RANGE AT LEAST
C     AS LARGE AS THE TRUE PLOTTING AREA. IF THE SCALING IS LOG THE
C     RANGE OF THE AXIS IS USED TO DEFINE AN INTEGRAL NUMBER OF LOG
C     DECADES THAT COVER A RANGE AT LEAST AS LARGE AS THE TRUE PLOTTING
C     AREA. THIS IF THE VIRTUAL LOG RANGE. WITHIN SUBROUTINE GRID
C     LOGICALLY THE VIRTUAL GRID WILL BE SET-UP AND DRAWN. HOWEVER
C     ONLY THAT PORTION WHICH APPEARS WITHIN THE TRUE PLOT AREA WILL
C     BE OUTPUT.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 ZABCD,XBCD,MFBCD,XWAY,YBCD,MTBCD,PARENL,PARENR
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/LABELC/ZABCD(12),MFBCD(60),MTBCD(60),XBCD(60),YBCD(60)
      COMMON/LABELI/IMFBCD,IMTBCD,IXBCD,IYBCD
      COMMON/GRIDLN/IDEC(2),ISCALE(2),VIRTIN(2,2),XYBASE(2),DXYBAS(2),
     1 IDIGIT(2)
      COMMON/INCHES/XYINCH(2,2,10),XYSIZE(2),DXYP(2,10)
      COMMON/SUBPLT/LFRAME,NFRAME
      COMMON/PLANE/XYPLAN(2,2,10)
      COMMON/LINLOG/IXYWAY(2,10)
      COMMON/WHO/IZA,IE,NE,LTT,LABCM
      DIMENSION DELTA(11),IDUG(11),XWAY(3,4),IXWAY(4)
C-----DEFINE ALLOWABLE UNITS FOR ENERGY AXIS.
      DATA IXWAY/3,2,3,3/
      DATA XWAY/
     1 'm','e','V',
     1 'e','V',' ',
     1 'k','e','V',
     1 'M','e','V'/
      DATA PARENL/'('/
      DATA PARENR/')'/
C-----DEFINE MAJOR SUB-DIVISIONS IN NORMAL FORM.
      DATA DELTA/2.0d0 ,1.0d0 ,0.5d0  ,0.2d0  ,0.1d0  ,0.05d0,
     1           0.02d0,0.01d0,0.005d0,0.002d0,0.001d0/
C-----DEFINE NUMBER OF DECIMAL DIGITS NECESSARY TO ADEQUATELY
C-----REPRESENT MULTIPLES OF THE ABOVE MAJOR SUB-DIVISIONS.
      DATA IDUG/0,0,1,1,1,2,2,2,3,3,3/
C-----DEFINE FUNCTION FOR TRANSFORMATION INTO COORDINATES OF PLOT (INCH)
      PTINCH(ZDIM,LDIM)=
     1 ((ZDIM-XYPLAN(1,LDIM,LFRAME))*XYINCH(2,LDIM,LFRAME)+
     2 (XYPLAN(2,LDIM,LFRAME)-ZDIM)*XYINCH(1,LDIM,LFRAME))
     3 /DXYP(LDIM,LFRAME)
C-----SET UP LOOP OVER X AND Y AXIS.
      DO 140 NROT=1,2
      KUNIT=4
C-----SELECT LINEAR OR LOG SCALING.
      NWAY=IXYWAY(NROT,LFRAME)
      IF(NWAY.EQ.2) GO TO 50
C-----LINEAR SCALING. SELECT LARGEST ABSOLUTE LIMIT OF PLOT AND PUT
C-----INTO NORMAL FORM.
      ZTRY=DABS(XYPLAN(2,NROT,LFRAME))
      ABSXY=DABS(XYPLAN(1,NROT,LFRAME))
      IF(ABSXY.GT.ZTRY) ZTRY=ABSXY
      ZSCALE=DLOG10(ZTRY)
      IF(ZSCALE.LT.0.0d0.AND.DMOD(ZSCALE,1.0d0).NE.0.0d0)
     1 ZSCALE=ZSCALE-1
      ISCALE(NROT)=ZSCALE
      ZEXP=10.0d0**(-ISCALE(NROT))
C-----DETERMINE MAXIMUM INTERVAL SPACING THAT WILL YIELD AT LEAST FIVE
C-----MAJOR SUB-DIVISIONS ON PLOT.
      ZTOP=XYPLAN(2,NROT,LFRAME)*ZEXP
      ZBOT=XYPLAN(1,NROT,LFRAME)*ZEXP
      DO 10 I=1,11
      ZZMAX=ZTOP/DELTA(I)
      ZZMIN=ZBOT/DELTA(I)
      IZZMAX=ZZMAX
      IZZMIN=ZZMIN
      IF(IZZMAX.GE.0.AND.FLOAT(IZZMAX).LT.ZZMAX) IZZMAX=IZZMAX+1
      IF(IZZMIN.LE.0.AND.FLOAT(IZZMIN).GT.ZZMIN) IZZMIN=IZZMIN-1
      NDEC=IZZMAX-IZZMIN
      IF(NDEC.GE.5) GO TO 20
   10 CONTINUE
C-----INSURE THAT THERE WILL BE AT LEAST ONE MAJOR SUB-DIVISION.
      IF(NDEC.LT.1) NDEC=1
      I=11
C-----DEFINE ALL MAJOR DIVISION SCALING INFORMATION FOR THE PLOT
C-----INCLUDING SIZE OF EACH MAJOR SUB-DIVISION, VIRTUAL SIZE OF THE
C-----PLOT IN FULL MULTIPLES OF MAJOR SUB-DIVISION, SCALED STEP SIZE,
C-----SCALED LOWER STARTING POINT AND NUMBER OF DIGITS TO USE WITH
C-----AXIS ANNOTATION.
   20 IDEC(NROT)=NDEC
      DZ=DELTA(I)
      VIRTIN(2,NROT)=FLOAT(IZZMAX)*DZ/ZEXP
      VIRTIN(1,NROT)=FLOAT(IZZMIN)*DZ/ZEXP
      DXYBAS(NROT)=DZ
      XYBASE(NROT)=FLOAT(IZZMIN)*DZ
      IF(DABS(XYBASE(NROT)).EQ.0.0d0) XYBASE(NROT)=0.0d0
      IDIGIT(NROT)=IDUG(I)
c-----------------------------------------------------------------------
C
C     IF X AXIS IS ENERGY (MF=3 OR 5) ATTEMPT TO CHANGE AXIS LABEL
C     UNITS TO PUT AXIS ANNOTATION NUMBERS IN NORMAL FORM. IN NORMAL
C     FORM NUMBERS WILL BE IN THE RANGE 1 TO 999 PLUS A DECIMAL
C     FRACTION OF FROM 0 TO 3 DECIMAL PLACES AND MAY BE IN UNITS OF
C     MILLI-EV, EV, KEV OR MEV.
C
c-----------------------------------------------------------------------
      IF(NROT.NE.1) GO TO 30
      IF(MFH.EQ. 4.AND.LTT.NE.1) GO TO 30
c-----2018/4/1 - Added Electron Large Angle
      IF(MFH.EQ.26             ) GO TO 30
C-----SELECT UNITS OF MILLI-EV, EV, KEV OR MEV BASED ON EXPONENT IN
C-----NORMAL FORM. WITH THE DATA INSIDE THE PROGRAM IN MEV A STANDARD
C-----UNIT CAN BE SELECTED FOR AN EXPONENT OF -9 TO +2 (1 MILLI-EV UP
C-----TO 999 MEV). OTHERWISE USE STANDARD UNITS OF MEV PLUS EXPONENT.
      IF(ISCALE(1).LT.-9.OR.ISCALE(1).GT.2) GO TO 90
C-----SELECT DIFFERENT UNIT EVERY 3 DECADES.
      II=ISCALE(1)+12
      KUNIT=II/3
C-----DEFINE CORRECTION FOR EXPONENT EXCESS, THEN CORRECT NUMBER OF
C-----DECIMAL DIGITS AND NORMALIZATION SCALE FACTOR.
      NNS=II-3*KUNIT
      IIDIG=IDIGIT(1)-NNS
      ZEXP=10.0d0**(-NNS)
      GO TO 40
C-----IF AXIS ANNOTATION CAN BE WRITTEN IN 5 OR FEWER CHARACTERS
C-----(E.G. 99999 TO 0.001) OUTPUT AXIS ANNOTATION DIRECTLY WITHOUT
C-----EXPONENT OFFSET.
   30 IF(ISCALE(NROT).GT.4.OR.ISCALE(NROT).LT.-3) GO TO 90
C-----ONLY ALLOW UP TO 3 DECIMAL DIGITS.
      IIDIG=IDIGIT(NROT)-ISCALE(NROT)
      IF(IIDIG.GT.3) GO TO 90
C-----DEFINE NUMBER OF DECIMAL DIGITS AND EXPONENT, THEN RE-CALCULATE
C-----BASE AND INCREMENT IN NORMALIZED UNITS FOR AXIS ANNOTATION.
   40 IDIGIT(NROT)=IIDIG
      ISCALE(NROT)=0
      DXYBAS(NROT)=DXYBAS(NROT)/ZEXP
      XYBASE(NROT)=XYBASE(NROT)/ZEXP
      GO TO 90
C-----LOG SCALING. DETERMINE NUMBER OF FULL LOG DECADES AND DEFINE
C-----VIRTUAL SIZE OF PLOT DEFINED BY FULL DECADES.
   50 ZZMAX=XYPLAN(2,NROT,LFRAME)
      IF(DMOD(ZZMAX,1.0d0).NE.0.0d0.AND.ZZMAX.GT.0.0d0)
     1 ZZMAX=ZZMAX+1.0d0
      ZZMIN=XYPLAN(1,NROT,LFRAME)
      IF(DMOD(ZZMIN,1.0d0).NE.0.0d0.AND.ZZMIN.LT.0.0d0)
     1 ZZMIN=ZZMIN-1.0d0
      IZZMAX=ZZMAX
      IZZMIN=ZZMIN
      IDEC(NROT)=IZZMAX-IZZMIN
      VIRTIN(2,NROT)=IZZMAX
      VIRTIN(1,NROT)=IZZMIN
      DXYBAS(NROT)=1.0d0
      XYBASE(NROT)=VIRTIN(1,NROT)
c-----------------------------------------------------------------------
C
C     IF X AXIS IS ENERGY (MF=3 OR 5) ATTEMPT TO CHANGE AXIS LABEL
C     UNITS TO PUT AXIS ANNOTATION NUMBERS IN NORMAL FORM. DATA IS
C     INTERNALLY STORED IN MEV AND THE LIMITS ARE STORED IN LOG10
C     FORM. USE MEV IF UPPER LIMIT IS 0 OR MORE (1 MEV OR MORE), USE
C     KEV IF IT IS -3 OR MORE (1 KEV OR MORE). USE EV IF IT IS -6 OR
C     MORE (1 EV OR MORE), OR OTHERWISE USE MILLI-EV.
C
c-----------------------------------------------------------------------
      IF(NROT.NE.1) go to 80
      IF(MFH.EQ. 4.AND.LTT.NE.1) GO TO 80
c-----2018/4/1 - Added Electron Large Angle
      IF(MFH.EQ.26             ) GO TO 80
      XYP=XYPLAN(2,NROT,LFRAME)
      IF(XYP.GE. 0.0d0) GO TO 80
      IF(XYP.GE.-3.0d0) GO TO 70
      IF(XYP.GE.-6.0d0) GO TO 60
C-----USE MILLI-EV.
      KUNIT=1
      XYBASE(NROT)=XYBASE(NROT)+9.0d0
      GO TO 80
C-----USE EV.
   60 KUNIT=2
      XYBASE(NROT)=XYBASE(NROT)+6.0d0
      GO TO 80
C-----USE KEV.
   70 KUNIT=3
      XYBASE(NROT)=XYBASE(NROT)+3.0d0
   80 IF(DABS(XYBASE(NROT)).EQ.0.0d0) XYBASE(NROT)=0.0d0
      ISCALE(NROT)=0
      IDIGIT(NROT)=0
C-----IF NO DECIMAL DIGITS IN AXIS LABEL REMOVE DECIMAL POINT.
   90 IF(IDIGIT(NROT).LE.0) IDIGIT(NROT)=-1
C-----DEFINE VIRTUAL SIZE OF PLOT IN PLANE OF THE PLOT (INCH)
      VIRTIN(1,NROT)=PTINCH(VIRTIN(1,NROT),NROT)
      VIRTIN(2,NROT)=PTINCH(VIRTIN(2,NROT),NROT)
C-----IF X AXIS IS ENERGY (MF=3 OR 5) DEFINE AXIS LABEL
C-----(MILLI-EV, EV, KEV OR MEV).
      IF(NROT.NE.1) go to 140
      IF(MFH.EQ. 4.AND.LTT.NE.1) GO TO 140 ! Legendre coeffic LTT=1
c-----2018/4/1 - Added Electron Large Angle
      IF(MFH.EQ.26             ) GO TO 140 ! Always Cosine
C-----SEARCH FOR UNITS IN EXISTING AXIS LABEL.
      K=IXBCD
      DO 100 L=1,IXBCD
      IF(XBCD(K).EQ.PARENL) GO TO 120
      K=K-1
  100 CONTINUE
C-----CANNOT LOCATE UNITS. LOAD ONLY UNITS.
      IXBCD=IXWAY(KUNIT)
      DO 110 K=1,IXBCD
      XBCD(K)=XWAY(K,KUNIT)
  110 CONTINUE
      GO TO 140
C-----LOAD NEW UNITS.
  120 KADD=IXWAY(KUNIT)
      IXBCD=K
      DO 130 K=1,KADD
      IXBCD=IXBCD+1
      XBCD(IXBCD)=XWAY(K,KUNIT)
  130 CONTINUE
      IXBCD=IXBCD+1
      XBCD(IXBCD)=PARENR
c-----------------------------------------------------------------------
C
C     END OF AXIS LOOP.
C
c-----------------------------------------------------------------------
  140 CONTINUE
      RETURN
      END
      SUBROUTINE TICKER
C=======================================================================
C
C     DEFINE TICK MARK SPACING FOR PLOT GRID.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/TRASH/ZGRID(1000),ZG(2),ZBASE,D,KDEC,KFINE,KULTRA,LROT,IWAY
      COMMON/BIAS/NSPACE(2),KDENSE(2,2)
      DIMENSION KOK(5)
C-----DEFINE THE ALLOWED NUMBER OF ULTRA-FINE GRID DIVISIONS PER FINE
C-----GRID DIVISION.
      DATA KOK/1,2,5,10,20/
      DENSE=10.0d0*D
      KFINE=1
      KULTRA=1
C-----SELECT LINEAR OR LOG SCALING.
      GO TO (10,20),IWAY
C-----LINEAR SCALING. DEFINE FINE GRID AS 10 DIVISIONS PER COARSE
C-----DIVISION UNLESS THE NUMBER OF COARSE DIVISIONS IS MORE THAN
C-----THE MAXIMUM ALLOWED. IF IT IS USE 5 FINE DIVISIONS PER
C-----COARSE DIVISION.
   10 KFINE=10
      IF(KDEC.GT.KDENSE(1,LROT)) KFINE=5
      GO TO 30
C-----LOG SCALING. DEFINE FINE GRID AS 9 DIVISIONS PER DECADE UNLESS
C-----THE NUMBER OF DECADES IS MORE THAN THE MAXIMUM ALLOWED. IF IT
C-----TURN OFF FINE AND ULTRA-FINE GRIDS (I.E. 1 DIVISION EACH).
   20 KFINE=9
      IF(KDEC.LE.KDENSE(2,LROT)) GO TO 30
      KFINE=1
      KULTRA=1
      GO TO 60
C-----DEFINE ULTRA-FINE GRID DIVISIONS SUCH THAT THERE ARE LESS THAN
C-----100 DIVISIONS PER COARSE DIVISIONS AND MORE THAN 10 PER INCH OF
C-----PLOT.
   30 DO 40 K=1,5
      KULTRA=KOK(K)
      KTAB=KULTRA*KFINE
      IF(KTAB.GT.100) GO TO 50
      IF(KTAB.GT.DENSE) GO TO 70
   40 CONTINUE
      GO TO 70
   50 IF(K.GT.1) K=K-1
      KULTRA=KOK(K)
   60 KTAB=KULTRA*KFINE
C-----CONSTRUCT TABLE OF TICK MARKS FOR ONE COARSE DIVISION (INCLUDING
C-----POSITION OF ALL FINE AND ULTRA-FINE TICK MARKS).
   70 GO TO (80,100),IWAY
C-----LINEAR TABLE. POINTS EQUALLY SPACED.
   80 DTAB=D/FLOAT(KTAB)
      ZGRID(1)=DTAB
      IF(KTAB.LE.1) RETURN
      DO 90 K=2,KTAB
      ZGRID(K)=ZGRID(K-1)+DTAB
   90 CONTINUE
      GO TO 120
C-----LOG TABLE. POINTS SPACED LOGARITHMICALLY OVER ONE DECADE.
  100 DTAB=9.0d0/FLOAT(KTAB)
      XX=1.0d0
      DO 110 K=1,KTAB
      XX=XX+DTAB
      ZGRID(K)=D*DLOG10(XX)
  110 CONTINUE
  120 RETURN
      END
      SUBROUTINE INSIDE(NX1,NX2)
C=======================================================================
C
C     PLOT THAT PORTION OF A LINEARLY INTERPOLABLE FUNCTION THAT LIES
C     WITHIN THE RECTANGULAR PLOTTING AS DEFINED BY XYREAL AND OUTSIDE
C     THE RECTANGULAR LEGEND BOX DEFINED BY BOXR.
C
C     THIS SUBROUTINE ONLY CHOOSES THAT PORTION OF THE LINE WHICH LIES
C     WITHIN THE PLOTTING AREA. SUBROUTINE OUTSID IS USED TO SELECT
C     AND PLOT THAT PORTION OF EACH LINE WHICH LIES OUTSIDE OF THE
C     LEGEND BOX.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 XOFF2,YOFF1,YOFF2
      COMMON/SUBPLT/LFRAME,NFRAME
      COMMON/LINLOG/IXYWAY(2,10)
      COMMON/REALLY/XYREAL(2,2,10)
      COMMON/TYPPLT/DINMAX,IMTYPE
      COMMON/THICKY/THICK,ITHICK,NTHICK(3),IMTHIN
      DATA YOFF2/0.0d0/
C-----DEFINE FUNCTION FOR INTERPOLATION.
      TERP(A,A1,A2,B1,B2)=((A2-A)*B1+(A-A1)*B2)/(A2-A1)
C-----DEFINE LINE THICKNESS.
      ITHICK=NTHICK(2)
c-----------------------------------------------------------------------
C
C     FIND FIRST ENERGY POINT ABOVE MINIMUM ENERGY OF PLOT.
C
c-----------------------------------------------------------------------
      DO 10 K=NX1,NX2
      X2=XPAGE(K)
      Y2=YPAGE(K)
      IF(X2.gt.XYREAL(1,1,LFRAME)) go to 20
      X1=X2
      Y1=Y2
   10 CONTINUE
      GO TO 230
c-----------------------------------------------------------------------
C
C     DEFINE CROSS SECTION AT LOWER ENERGY LIMIT OF PLOT, OR IF
C     THIS IS FIRST POINT REPEAT IT.
C
c-----------------------------------------------------------------------
   20 XOFF2=0
      IF(K.LE.NX1) GO TO 40
      IF(X2.le.X1) go to 30
      Y1=TERP(XYREAL(1,1,LFRAME),X1,X2,Y1,Y2)
   30 X1=XYREAL(1,1,LFRAME)
      GO TO 50
   40 IF(X2.GT.XYREAL(2,1,LFRAME)) GO TO 230
      X1=X2
      Y1=Y2
c-----------------------------------------------------------------------
C
C     DEFINE WHEATHER OR NOT PLOT FRAME IS LINEAR-LINEAR (WHICH DOES
C     REQUIRE INTERPOLATION OF THE DATA INTO THE FRAME OF THE PLOT).
C
c-----------------------------------------------------------------------
   50 IMTYPE=0
      IF(IXYWAY(1,LFRAME).EQ.2.OR.IXYWAY(2,LFRAME).EQ.2) IMTYPE=1
c-----------------------------------------------------------------------
C
C     IS CROSS SECTION OF LAST POINT BELOW, ON OR ABOVE CROSS SECTION
C     RANGE OF PLOT
C
c-----------------------------------------------------------------------
      IF(Y1.lt.XYREAL(1,2,LFRAME)) go to 70
      IF(Y1.eq.XYREAL(1,2,LFRAME)) go to 60
      IF(Y1.gt.XYREAL(2,2,LFRAME)) go to 80
C-----ON. SET FLAG AND MOVE BEAM TO STARTING POINT.
   60 YOFF1=0
      CALL OUTSID(X1,Y1,3)
      GO TO 100
C-----BELOW
   70 YOFF1=1
      GO TO 100
C-----ABOVE
   80 YOFF1=2
      GO TO 100
c-----------------------------------------------------------------------
C
C     IF ANY POINTS REMAIN SELECT NEXT POINT. RE-DEFINE REAL POSITION
C     OF LAST POINT AND SAVE REAL POSITION OF CURRENT POINT.
C
c-----------------------------------------------------------------------
   90 IF(K.GE.NX2) GO TO 230
      X1=X2
      Y1=Y2
      YOFF1=YOFF2
      K=K+1
      X2=XPAGE(K)
      Y2=YPAGE(K)
c-----------------------------------------------------------------------
C
C     IF ENERGY ABOVE MAXIMUM ENERGY OF PLOT INTERPOLATE BACK TO TOP
C     OF PLOT
C
c-----------------------------------------------------------------------
  100 IF(X2.lt.XYREAL(2,1,LFRAME)) go to 130
      IF(X2.eq.XYREAL(2,1,LFRAME)) go to 120
      IF(X2.le.X1) go to 110
      Y2=TERP(XYREAL(2,1,LFRAME),X1,X2,Y1,Y2)
  110 X2=XYREAL(2,1,LFRAME)
  120 XOFF2=2
c-----------------------------------------------------------------------
C
C      IS CROSS SECTION OF CURRENT POINT BELOW, ON OR ABOVE CROSS
C      SECTION RANGE OF PLOT.
C
c-----------------------------------------------------------------------
  130 IF(Y2.lt.XYREAL(1,2,LFRAME)) go to 150
      IF(Y2.eq.XYREAL(1,2,LFRAME)) go to 140
      IF(Y2.gt.XYREAL(2,2,LFRAME)) go to 160
C-----ON.
  140 YOFF2=0
      GO TO 180
C-----BELOW
  150 YOFF2=1
      GO TO 170
C-----ABOVE
  160 YOFF2=2
C-----CURRENT POINT IS NOT ON PLOT. IF LAST POINT IS ALSO OFF PLOT IN
C-----SAME DIRECTION, SKIP CURRENT POINT.
  170 IF(YOFF2.NE.YOFF1) GO TO 180
C-----IF ABOVE MAXIMUM ENERGY OF PLOT, PLOT IS FINISHED
      IF(XOFF2.le.0.0d0) go to 90
      go to 230
c-----------------------------------------------------------------------
C
C     IF CROSS SECTION OF LAST POINT WAS NOT IN RANGE OF PLOT
C     INTERPOLATE BACK TO PLOT BOUNDARY AND MOVE BEAM TO BOUNDARY
C
c-----------------------------------------------------------------------
  180 IF(YOFF1.EQ.0.0d0) GO TO 200
      IF(Y2.eq.Y1) go to 190
      X1=TERP(XYREAL(YOFF1,2,LFRAME),Y1,Y2,X1,X2)
  190 IF(X1.GT.XYREAL(2,1,LFRAME)) GO TO 230
      Y1=XYREAL(YOFF1,2,LFRAME)
      CALL OUTSID(X1,Y1,3)
c-----------------------------------------------------------------------
C
C     IF CROSS SECTION OF LAST POINT WAS NOT IN RANGE OF PLOT
C     INTERPOLATE BACK TO PLOT BOUNDARY
C
c-----------------------------------------------------------------------
  200 XP=X2
      YP=Y2
      IF(YOFF2.EQ.0.0d0) GO TO 220
      IF(Y2.eq.Y1) go to 210
      XP=TERP(XYREAL(YOFF2,2,LFRAME),Y1,Y2,X1,X2)
  210 YP=XYREAL(YOFF2,2,LFRAME)
c-----------------------------------------------------------------------
C
C     DRAW LINE TO NEXT POINT.
C
c-----------------------------------------------------------------------
  220 CALL OUTSID(XP,YP,2)
C-----IF ABOVE MAXIMUM ENERGY OF PLOT, PLOT IS FINISHED.
      IF(XOFF2.LE.0.0d0) GO TO 90
C-----RESET LINE THICKNESS.
  230 ITHICK=0
      RETURN
      END
      SUBROUTINE OUTSID(X2,Y2,IPEN)
C=======================================================================
C
C     DRAW THAT PORTION OF A LINE THAT LIES OUTSIDE OF THE LEGEND
C     BOX. THIS SUBROUTINE ASSUMES THAT BY THE TIME THIS SUBROUTINE IS
C     CALLED THE LINE HAS ALREADY BEEN TRUNCATED TO ONLY THAT PORTION
C     OF THE LINE WHICH LIES WITHIN THE PLOTTING AREA.
C
C     THE LINE TO BE DRAWN EXTENDS FROM THE COORDINATES OF THE LAST
C     POINT (X1,Y1) TO THE COORDINATES OF THE CURRENT POINT (X2,Y2).
C     THE LINE MAY BE BLANK (IPEN=3) OR DRAWN (IPEN NOT =3).
C
C     THE BEGINNING OF ANY CURVE TO BE DRAWN MUST BE STARTED BY A
C     CALL TO THIS ROUTINE WITH IPEN=3 (BLANK LINE) IN ORDER TO DEFINE
C     THE INITIALIZE COORDINATES OF THE CURVE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/BXLIMS/BOXR(2,2)
      EQUIVALENCE (BOXR(1,1),BOXMIN),(BOXR(2,1),BOXMAX),
     1 (BOXR(1,2),BOYMIN),(BOXR(2,2),BOYMAX)
C-----INITIALIZE COORDINATES OF LAST POINT TO ORIGIN.
      DATA X1/0.0d0/
      DATA Y1/0.0d0/
c-----------------------------------------------------------------------
C
C     DEFINE ARITHMETIC STATEMENT FUNCTION FOR LINEAR INTERPOLATION.
C
c-----------------------------------------------------------------------
      TERPX(X)=((X-X1)*Y2+(X2-X)*Y1)/(X2-X1)
      TERPY(Y)=((Y-Y1)*X2+(Y2-Y)*X1)/(Y2-Y1)
c-----------------------------------------------------------------------
C
C     IF LINE IS BLANK OR THE LINE DOES NOT OVERLAP THE LEGEND BOX IN
C     THE X OR Y DIRECTION DRAW ENTIRE LINE.
C
c-----------------------------------------------------------------------
      IF(IPEN.EQ.3) GO TO 90
      IF(X1.GE.BOXMAX.OR.X2.LE.BOXMIN) GO TO 90
      IF(Y1.LE.BOYMIN.AND.Y2.LE.BOYMIN) GO TO 90
      IF(Y1.GE.BOYMAX.AND.Y2.GE.BOYMAX) GO TO 90
c-----------------------------------------------------------------------
C
C     ADVANCE TO LOWER X LIMIT OF LEGEND BOX (IF NOT ALREADY THERE).
C
c-----------------------------------------------------------------------
      IF(X1.GE.BOXMIN) GO TO 10
      Y1=TERPX(BOXMIN)
      X1=BOXMIN
      CALL DASHP(X1,Y1,2)
c-----------------------------------------------------------------------
C
C     CHECK FOR ENTRY INTO LEGEND BOX.
C
c-----------------------------------------------------------------------
C-----CHECK FOR POSSIBLE INTERCEPT TOP OF LEGEND BOX.
   10 IF(Y1.LE.BOYMAX) GO TO 20
      IF(Y2.GE.BOYMAX) GO TO 90
c-----------------------------------------------------------------------
C
C     POSSIBLE INTERCEPT TOP OF LEGEND BOX.
C
c-----------------------------------------------------------------------
      XP=TERPY(BOYMAX)
      IF(XP.GE.X2) GO TO 90
C-----INTERCEPT BEFORE X2. DRAW TO INTERCEPT.
      X1=XP
      Y1=BOYMAX
      CALL DASHP(X1,Y1,2)
      GO TO 40
C-----CHECK FOR POSSIBLE INTERCEPT BOTTOM OF LEGEND BOX.
   20 IF(Y1.GE.BOYMIN) GO TO 30
      IF(Y2.LE.BOYMIN) GO TO 90
c-----------------------------------------------------------------------
C
C     POSSIBLE INTERCEPT BOTTOM OF LEGEND BOX.
C
c-----------------------------------------------------------------------
      XP=TERPY(BOYMIN)
      IF(XP.GE.X2) GO TO 90
C-----INTERCEPT BEFORE X2. DRAW TO INTERCEPT.
      X1=XP
      Y1=BOYMIN
      CALL DASHP(X1,Y1,2)
      GO TO 50
C-----WITHIN Y RANGE OF BOX. WILL LINE LEAVE AT BOOTOM Y, TOP X OR TOP Y
   30 IF(Y2.eq.Y1) go to 60
      IF(Y2.gt.Y1) go to 50
c-----------------------------------------------------------------------
C
C     CHECK FOR LEAVING LEGEND BOX.
C
c-----------------------------------------------------------------------
C-----LEAVE BOTTOM Y OR TOP X.
   40 XP=TERPY(BOYMIN)
      IF(XP.GT.BOXMAX) XP=BOXMAX
      GO TO 70
C-----LEAVE TOP Y OR TOP X.
   50 XP=TERPY(BOYMAX)
      IF(XP.GT.BOXMAX) XP=BOXMAX
      GO TO 70
C-----LEAVE TOP X.
   60 XP=BOXMAX
C-----IS LINE TO X2 STILL INSIDE LEGEND BOX.
   70 IF(XP.GE.X2) GO TO 80
c-----------------------------------------------------------------------
C
C     LEAVING LEGEND BOX.
C
c-----------------------------------------------------------------------
      Y1=TERPX(XP)
      X1=XP
      CALL DASHP(X1,Y1,3)
      GO TO 90
c-----------------------------------------------------------------------
C
C     STILL INSIDE LEGEND BOX.
C
c-----------------------------------------------------------------------
   80 CALL DASHP(X2,Y2,3)
      GO TO 100
c-----------------------------------------------------------------------
C
C     MOVE OR DRAW TO FINAL POSITION.
C
c-----------------------------------------------------------------------
   90 CALL DASHP(X2,Y2,IPEN)
c-----------------------------------------------------------------------
C
C     SAVE COORDINATES FOR NEXT CALL.
C
c-----------------------------------------------------------------------
  100 X1=X2
      Y1=Y2
      RETURN
      END
      SUBROUTINE DASH(X,Y,IPEN)
C=======================================================================
C
C     PLOT ONE OF FIVE POSSIBLE TYPES OF DASHED LINE FROM THE LAST POINT
C     TO THE COORDINATES (X,Y). LINTYP DEFINES THE TYPE OF DASHING. IF
C     IT IS NOT A NUMBER BETWEEN 1 AND 5 A SOLID LINE (TYPE 1) IS DRAWN.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/TYPLIN/STEPER(7,5),LINTYP
      DATA LPEN/3/
      DATA KPEN/2/
      DATA XLD  /0.0d0/
      DATA YLD  /0.0d0/
      DATA STEP /0.1d0/
      DATA DLEFT/0.1d0/
C-----PLOT SOLID LINE IF ILLEGAL LINE TYPE SPECIFIED.
      IF(LINTYP.GT.1.AND.LINTYP.LE.5) GO TO 10
      CALL PLOT1(X,Y,IPEN)
      RETURN
C-----DEFINE PEN OPTION FOR INTERNAL USE.
   10 MPEN=IPEN
      IF(MPEN.eq.0) go to 20
      LPEN=MPEN
      GO TO 30
   20 MPEN=LPEN
C-----ADVANCE FRAME IF PEN OPTION NEGATIVE.
   30 IF(MPEN.eq.0) go to 50
      IF(MPEN.gt.0) go to 60
   40 CALL PLOT1(X,Y,MPEN)
   50 RETURN
C-----IF BEAM IS OFF INITIALIZE DASH PARAMETERS.
   60 IF(MPEN.lt.2) go to 50
      IF(MPEN.eq.2) go to 70
      XLD=X
      YLD=Y
      ISTEP=1
      STEP=STEPER(1,LINTYP)
      DASHER=STEP
      KPEN=2
      GO TO 40
C-----CALCULATE DISTANCE TO NEXT POINT.
   70 DXY=SQRT((X-XLD)**2+(Y-YLD)**2)
      IF(DXY.LE.0.0d0) GO TO 110
C-----DEFINE DIRECTION COSINE AND SINE.
      COST=(Y-YLD)/DXY
      SINT=(X-XLD)/DXY
C-----INITIALIZE DASH LENGTH AND DECREASE IF REMAINDER LESS THAN FULL
C-----DASH.
   80 DLEFT=STEP
      IF(DASHER.LT.DLEFT) DLEFT=DASHER
      IF(DXY.LT.DLEFT) DLEFT=DXY
C-----DEFINE NEW COORDINATE AND MOVE TO IT.
      XLD=XLD+DLEFT*SINT
      YLD=YLD+DLEFT*COST
      CALL PLOT1(XLD,YLD,KPEN)
C-----SUBTRACT FROM LENGTH OF DASH.
      DASHER=DASHER-DLEFT
C-----IF END OF DASH FLIP BEAM AND RE-DEFINE LENGTH OF NEXT DASH.
      IF(DASHER.GT.0.0d0) GO TO 100
      KPEN=5-KPEN
      ISTEP=ISTEP+1
      IF(STEPER(ISTEP,LINTYP).GT.0.0d0) GO TO 90
      IF(ISTEP.EQ.2) KPEN=2
      ISTEP=1
   90 STEP=STEPER(ISTEP,LINTYP)
      DASHER=STEP
C-----SUBTRACT LENGTH OF LINE PLOTTED AND DETERMINE IF ANY LEFT.
  100 DXY=DXY-DLEFT
      IF(DXY.GT.0.0d0) GO TO 80
C-----END OF LINE. DEFINE NEW POSITION.
  110 XLD=X
      YLD=Y
      RETURN
      END
      SUBROUTINE DASHP(X2,Y2,IPEN)
C=======================================================================
C
C     STARTING FROM (X2,Y2) IN THE PLANE OF THE DATA TRANSFORM THE
C     COORDINATES TO THE PLANE OF THE PLOT AND PLOT ONE OF FIVE
C     POSSIBLE TYPES OF DASHED LINE FROM THE LAST POINT TO THE
C     COORDINATES DEFINED BY (X2,Y2). LINTYP DEFINES THE TYPE OF
C     DASHING. IF IT IS NOT A NUMBER BETWEEN 1 AND 5 A SOLID
C     LINE (TYPE 1) IS PLOTTED. IF THE PLOT IS NOT LIN-LIN THE CURVE
C     BETWEEN THE INITIAL (X1,Y1) AND FINAL POSITION (X2,Y2) WILL
C     BE INTERPOLATED IN SMALL STEPS INTO THE PLANE OF THE PLOT.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/INCHES/XYINCH(2,2,10),XYSIZE(2),DXYP(2,10)
      COMMON/SUBPLT/LFRAME,NFRAME
      COMMON/LINLOG/IXYWAY(2,10)
      COMMON/PLANE/XYPLAN(2,2,10)
      COMMON/EDGE/XYEDGE(2,2),XYMAJR(2,2),RASTER(2)
      COMMON/TYPPLT/DINMAX,IMTYPE
      DATA XINCH1/0.0d0/
      DATA YINCH1/0.0d0/
      DATA X1    /0.0d0/
      DATA Y1    /0.0d0/
C-----DEFINE FUNCTION FOR TRANSFORMATION INTO COORDINATES OF PLOT (INCH)
      PTINCH(ZDIM,LDIM)=
     1 ((ZDIM-XYPLAN(1,LDIM,LFRAME))*XYINCH(2,LDIM,LFRAME)+
     2 (XYPLAN(2,LDIM,LFRAME)-ZDIM)*XYINCH(1,LDIM,LFRAME))
     3 /DXYP(LDIM,LFRAME)
C-----DEFINE COORDINATES FOR INTERNAL USE.
      XP=X2
      YP=Y2
      IX=IXYWAY(1,LFRAME)
      IY=IXYWAY(2,LFRAME)
C-----IF LOG SCALING TRANSFORM TO LOG AND THEN TRANSFORM TO COORDINATES
C-----OF THE PLOT.
      IF(IX.NE.2) GO TO 20
      IF(XP.GT.0.0d0) GO TO 10
      XP=XYPLAN(1,1,LFRAME)
      GO TO 20
   10 XP=DLOG10(XP)
   20 XINCH2=PTINCH(XP,1)
      IF(IY.NE.2) GO TO 40
      IF(YP.GT.0.0d0) GO TO 30
      YP=XYPLAN(1,2,LFRAME)
      GO TO 40
   30 YP=DLOG10(YP)
   40 YINCH2=PTINCH(YP,2)
C-----NO INTERPOLATION REQUIRED IF BEAM IS OFF OR PLOT IS LIN-LIN.
      IF(IPEN.NE.2.OR.IMTYPE.EQ.0) GO TO 100
C-----COMPUTE INCH CHANGES IN X AND Y DIRECTION.
      DXINCH=XINCH2-XINCH1
      DYINCH=YINCH2-YINCH1
C-----NO INTERPOLATION IF X OR Y CHANGE IS LESS THAN ONE RASTER POINT
C-----SPACING.
      ABSDX=DABS(DXINCH)
      ABSDY=DABS(DYINCH)
      IF(ABSDX.LE.RASTER(1).OR.ABSDY.LE.RASTER(2)) GO TO 100
C-----SELECT LARGEST INCH CHANGE. IF LESS THAN ALLOWABLE LENGTH
C-----NO INTERPOLATION REQUIRED.
      IF(ABSDX.LT.ABSDY) ABSDX=ABSDY
      IF(ABSDX.LE.DINMAX) GO TO 100
C-----INTERPOLATION REQUIRED. DEFINE NUMBER AND SIZE OF STEP
      NSTEP=ABSDX/DINMAX+1.0d0
      FSTEP=NSTEP
C-----DEFINE REQUIRED STEP CHANGE IN X.
      IF(IX.EQ.1) DSTEP=(X2-X1)/FSTEP
      IF(IX.EQ.2) DSTEP=DEXP(DLOG(X2/X1)/FSTEP)
c-----------------------------------------------------------------------
C
C     SPACE POINTS IN EQUAL INCH INCREMENTS ALONG X AXIS
C
c-----------------------------------------------------------------------
C-----INITIALIZE COORDINATES AND X INTERVAL.
      X0=X1
      Y0=Y1
      DX=X2-X1
C-----SET UP LOOP OVER STEPS.
      DO 90 LSTEP=1,NSTEP
C-----INSURE LAST STEP ENDS UP AT (X2,Y2).
      IF(LSTEP.NE.NSTEP) GO TO 50
      X0=X2
      Y0=Y2
      GO TO 80
C-----INCREMENT X IN EQUAL PLOT INCHES.
   50 IF(IX.EQ.2) GO TO 60
      X0=X0+DSTEP
      GO TO 70
   60 X0=X0*DSTEP
C-----DEFINE Y BY LINEAR INTERPOLATION.
   70 Y0=((X2-X0)*Y1+(X0-X1)*Y2)/DX
C-----IF LOG PLOT TRANSFORM COORDINATE.
   80 XP=X0
      YP=Y0
      IF(IX.EQ.2) XP=DLOG10(XP)
      IF(IY.EQ.2) YP=DLOG10(YP)
C-----TRANSFORM TO THE COORDINATES OF THE PLOT.
      XINCH2=PTINCH(XP,1)
      YINCH2=PTINCH(YP,2)
C-----MOVE BEAM TO NEXT POINT.
      CALL DASH(XINCH2,YINCH2,IPEN)
   90 CONTINUE
      GO TO 110
C-----MOVE BEAM TO FINAL COORDINATES.
  100 CALL DASH(XINCH2,YINCH2,IPEN)
C-----SAVE COORDINATES OF LAST POINT.
  110 X1=X2
      Y1=Y2
      XINCH1=XINCH2
      YINCH1=YINCH2
      RETURN
      END
      SUBROUTINE WINDY
C=======================================================================
C
C     EXTEND X AND Y LIMITS OF THE PLOT OUTWARD TO INSURE THAT THE PLOT
C     GRID DOES NOT OVERLAP THE DATA TO BE PLOTTED. THIS INSURES ALL OF
C     THE DATA CAN BE EASILY SEEN WITHOUT INTERFERENCE FROM THE GRID.
C
C     SUBROUTINE NAME CHANGED FROM WINDOW TO WINDY TO AVOID NAME
C     CONFLICT WITH HARWELL GHOST SUBROUTINE WINDOW (10/14/81)
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/HEADER/C1H,C2H,L1H,L2H,N1H,N2H,MATH,MFH,MTH,NOSEQ
      COMMON/REALLY/XYREAL(2,2,10)
      COMMON/PLANE/XYPLAN(2,2,10)
      COMMON/SIZES/XL(3),YL(6),XYMID(2),HT,HTX1,HTX2
      COMMON/LINLOG/IXYWAY(2,10)
      COMMON/INCHES/XYINCH(2,2,10),XYSIZE(2),DXYP(2,10)
      COMMON/SUBPLT/LFRAME,NFRAME
      COMMON/LETMIN/MINUSOK
      COMMON/ZOOMCOM/IZOOM
      COMMON/RESET/LOOP
C-----SET UP LOOP OVER ALL PLOTS ON FRAME
      DO 70 NF=1,NFRAME
c-----2017/4/2 - Allow input parameters to override MF= 1 and 4 scaling
      if(IZOOM.le.0) then
C-----MF=1 is bunched with MF=3 as LOOP=13 - always X lin vs. Y log
      if(LOOP.EQ.14) IXYWAY(1,NF) = 1         ! Nu-bar
      if(LOOP.EQ.14) IXYWAY(2,NF) = 2         ! can't see delayed linear
C-----MF=4 X Linear - Allow Y to be either.
      IF(MFH.EQ. 4) IXYWAY(1,NF) = 1           ! Legendre coefficients
      IF(MFH.EQ.26) IXYWAY(1,NF) = 1           ! Electron Large ang.
      endif
C-----EXTEND THE ENERGY AND CROSS SECTION LIMITS OF THE PLOT OUTWARD
C-----TO PREVENT OVERLAP BETWEEN THE DATA AND THE TICK MARKS OF THE
C-----GRID.
      DO 60 L=1,2
      RAST14=HT
C-----CHECK FOR SMALL RANGE DATA.
      IF(L.EQ.1) GO TO 10
      XMID=0.5d0*(XYPLAN(1,L,NF)+XYPLAN(2,L,NF))
      IF(XYPLAN(1,L,NF).GT.0.8999d0*XMID)
     1 XYPLAN(1,L,NF)=0.8999d0*XMID
      IF(XYPLAN(2,L,NF).LT.1.1001d0*XMID)
     2 XYPLAN(2,L,NF)=1.1001d0*XMID
C-----CHECK FOR ZERO DATA.
   10 IF(XYPLAN(1,L,NF).NE.0.0d0.OR.XYPLAN(2,L,NF).NE.0.0d0) GO TO 20
      IXYWAY(L,NF)=1
      XYPLAN(1,L,NF)=-1.0d0
      XYPLAN(2,L,NF)= 1.0d0
      GO TO 30
C-----IF NEGATIVE LIMIT OR SMALL RANGE USE LINEAR SCALING.
   20 IXYWAY(L,NF)=2
c-----2017/4/2 - Allow input parameters to override MF= 4 scalking
      if(IZOOM.le.0) then
C-----MF=1 is bunched with MF=3 as LOOP=13 - always X lin vs. Y log
      if(LOOP.EQ.14) IXYWAY(1,NF) = 1         ! Nu-bar
      if(LOOP.EQ.14) IXYWAY(2,NF) = 2         ! can't see delayed linear
C-----MF=4 X Linear - Allow Y to be either.
      IF(MFH.EQ. 4) IXYWAY(1,NF) = 1           ! Legendre coefficients
      IF(MFH.EQ.26) IXYWAY(1,NF) = 1           ! Electron large ang.
      endif
      IF(XYPLAN(1,L,NF).LE.0.0d0) IXYWAY(L,NF)=1
      IF(XYPLAN(2,L,NF).LT.5.0d0*XYPLAN(1,L,NF)) IXYWAY(L,NF)=1
      IF(IXYWAY(L,NF).EQ.1) GO TO 30
      XYPLAN(1,L,NF)=DLOG10(XYPLAN(1,L,NF))
      XYPLAN(2,L,NF)=DLOG10(XYPLAN(2,L,NF))
   30 BOTTOM=XYINCH(1,L,NF)+RAST14
      TOP=XYINCH(2,L,NF)-RAST14
      DSCALE=(TOP-BOTTOM)/(XYPLAN(2,L,NF)-XYPLAN(1,L,NF))
      XYPLAN(1,L,NF)=XYPLAN(1,L,NF)-RAST14/DSCALE
      XYPLAN(2,L,NF)=XYPLAN(2,L,NF)+RAST14/DSCALE
C-----IF NEGATIVE Y RANGE NOT REQUESTED DO NOT ALLOW IT.
      IF(MINUSOK.GT.0) GO TO 40
      IF(L.EQ.2.AND.IXYWAY(2,NF).EQ.1.AND.XYPLAN(1,L,NF).LT.0.0d0)
     1 XYPLAN(1,L,NF)=0.0d0
   40 DXYP(L,NF)=XYPLAN(2,L,NF)-XYPLAN(1,L,NF)
C-----DEFINE PLOT LIMITS ON LIN-LIN SCALE
      IF(IXYWAY(L,NF).EQ.2) GO TO 50
      XYREAL(1,L,NF)=XYPLAN(1,L,NF)
      XYREAL(2,L,NF)=XYPLAN(2,L,NF)
      GO TO 60
   50 XYREAL(1,L,NF)=10.0d0**XYPLAN(1,L,NF)
      XYREAL(2,L,NF)=10.0d0**XYPLAN(2,L,NF)
   60 CONTINUE
   70 CONTINUE
      RETURN
      END
      SUBROUTINE MTHOL(MT,MTBCD,IMTBCD)
C=======================================================================
C
C     DEFINE HOLLERITH EQUIVALENT OF REACTION (MT).
C
C     DEFINITION OF TABLES
C
C     MTTABA = CHARACTER EQUIVALENT OF EACH MT NUMBER
C              UP TO 40 CHARACTERS PER MT - LEFT ADJUSTED
C     MTTABB = (1) NUMBER OF CHRACTERS IN EACH CHARACTER EQUIVALENT
C              (2) LOWER MT LIMIT....ENDF/B-VI
C              (3) UPPER MT LIMIT
C              (4) LOWER MT LIMIT....ENDF/B-V
C              (5) UPPER MT LIMIT
C
C     THE CHARACTER EQUIVALENT IS RETURNED IN MTBCD
C
C     MTBCD  = CHARACTER EQUIVALENT OF MT
C              UP TO CHARACTERS - LEFT ADJUSTED
C     IMTBCD = NUMBER OF CHARACTERS IN CHARACTER EQUIVALENT OF MT
C
C     WARNING...THIS ROUTINE WILL LOAD THE DEFINITION OF ALL MT
C               NUMBERS THE FIRST TIME THAT THIS ROUTINE IS CALLED.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 MTTABA,MTBCD,GOOF
c-----1/18/11 - increased dimension from 200 to 1,000
      COMMON/MTDAT1/MTTABA(40,1000)
      COMMON/MTDAT2/MTTABB(5,1000),MTLONG,MTTAPE
      COMMON/VERSON/IVERSE
c-----2015-2: Changed MTBCD(60) to MTBCD(*)
      DIMENSION MTBCD(*),GOOF(15)
      DATA IPASS/0/
      DATA IGOOF/15/
      DATA GOOF/
     1 '*','*','*','U','n','d','e','f','i','n','e','d','*','*','*'/
C-----READ THE DEFINITION OF ALL MT NUMBERS THE FIRST TIME THAT THIS
C-----ROUTINE IS CALLED.
      IF(IPASS.NE.0) GO TO 10
      CALL MTREAD
      IPASS=1
c-----------------------------------------------------------------------
C
C     USE EITHER ENDF/B-V OR VI DEFINITIONS.
C
c-----------------------------------------------------------------------
   10 IF(IVERSE.EQ.6) GO TO 30
C-----ENDF/B-V
      DO 20 M=1,MTLONG
      IF(MTTABB(4,M).LE.0) GO TO 20
      IF(MT.lt.MTTABB(4,M)) go to 20
      IF(MT.eq.MTTABB(4,M)) go to 70
      IF(MT.le.MTTABB(5,M)) go to 70
   20 CONTINUE
      GO TO 50
C-----ENDF/B-VI
   30 DO 40 M=1,MTLONG
      IF(MTTABB(2,M).LE.0) GO TO 40
      IF(MT.lt.MTTABB(2,M)) go to 40
      IF(MT.eq.MTTABB(2,M)) go to 70
      IF(MT.le.MTTABB(3,M)) go to 70
   40 CONTINUE
C-----MT NUMBER NOT DEFINED.
   50 DO 60 I=1,IGOOF
      MTBCD(I)=GOOF(I)
   60 CONTINUE
      IMTBCD=IGOOF
      RETURN
C-----DEFINE MT DEFINITION.
   70 DO 80 L=1,40
      MTBCD(L)=MTTABA(L,M)
   80 CONTINUE
      IMTBCD=MTTABB(1,M)
c-----2020/1/12 - No incident paticle in legend box
      RETURN
      END
      SUBROUTINE WHATIN(MTBCD,IMTBCD)
C=======================================================================
C
C     IF NOT NEUTRON INCIDENT TRY TO DEFINE INCIDENT PARTICLE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 MTBCD,BLANK,IMN,SHORTP,LONGP,MAJOR
      COMMON/PARTIN/INPART
c-----2015-2: Changed MTBCD(40) to MTBCD(*)
c-----2020/1/12 = Added Electron INPART = 11 (?)
c-----    "       Added Neutron - only fot Major
      DIMENSION MTBCD(*),IMN(3),SHORTP(6,0:7),LONGP(9,0:7),NOTN(0:7),
     1 MAJOR(5)
      DATA MAJOR/'M','a','j','o','r'/
      DATA IMN/'(','n',','/
C-----DEFINE CHARGED PARTICLES.
      DATA NOTN/   0,1001,1002,1003,2003,2004,11,1/
      DATA BLANK/' '/
      DATA SHORTP/
     1 '(',']','g',',',' ',' ',
     2 '(','p',',',' ',' ',' ',
     3 '(','d',',',' ',' ',' ',
     4 '(','t',',',' ',' ',' ',
     5 '(','H','e','-','3',',',
     6 '(',']','a',',',' ',' ',
     7 '(','e','-',',',' ',' ',
     8 '(','n',',',' ',' ',' '/
      DATA LONGP/
     1 'P','h','o','t','o','n',' ',' ',' ',
     2 'P','r','o','t','o','n',' ',' ',' ',
     3 'D','e','u','t','e','r','o','n',' ',
     4 'T','r','i','t','o','n',' ',' ',' ',
     5 'H','e','-','3',' ',' ',' ',' ',' ',
     6 ']','a',' ',' ',' ',' ',' ',' ',' ',
     7 'E','l','e','c','t','r','o','n',' ',
     8 'N','e','u','t','r','o','n',' ',' '/
C-----3/22/2012 - NOTHING TO DO IF INCIDENT PARTICLE IS NEUTRON.
c-----2020/1/12 - Added Neutron to Major
      IF(INPART.eq.1) then
      do kk=1,5
      if(MTBCD(kk).ne.MAJOR(kk)) return
      enddo
      NOTB  = 1
      KPART = 7   ! Neutron
      go to 110
      endif
      DO 10 KPART=0,6
      IF(INPART.EQ.NOTN(KPART)) GO TO 20
   10 CONTINUE
C-----CANNOT DEFINE INCIDENT PARTICLE.
      GO TO 160
C-----SKIP LEADING BLANKS IN TITLE.
   20 DO 30 NOTB=1,IMTBCD
      IF(MTBCD(NOTB).NE.BLANK) GO TO 40
   30 CONTINUE
      GO TO 160
C-----IF TITLE STARTS WITH BLANKS ASSUME IT IS FOLLOWED BY MEV BLANK -
C-----SPACE OVER THESE 4 CHARACTERS.
   40 IF(NOTB.GT.1) NOTB=NOTB+4
C-----DOES TITLES START WITH (N,
      K=NOTB-1
      DO 50 L=1,3
      K=K+1
      IF(MTBCD(K).NE.IMN(L)) GO TO 100
   50 CONTINUE
C-----REPLACE (N,
      DO 60 KK=1,6
      IF(SHORTP(KK,KPART).EQ.BLANK) GO TO 70
   60 CONTINUE
      KK=7
   70 KK=KK-1
      LEFT=KK-3
      DO 80 M=IMTBCD,NOTB,-1
      MTBCD(M+LEFT)=MTBCD(M)
   80 CONTINUE
      K=K-3
      DO 90 M=1,KK
      K=K+1
      MTBCD(K)=SHORTP(M,KPART)
   90 CONTINUE
      IMTBCD=IMTBCD+LEFT
      GO TO 160
C-----USE LONG FORM.
c-----Skip if same as title = no Photon Photon
  100 do kk=1,6
      if(LONGP(kk,kpart).ne.mtbcd(kk)) go to 110
      enddo
      go to 160
  110 DO 120 KK=1,9
      IF(LONGP(KK,KPART).EQ.BLANK) GO TO 130
  120 CONTINUE
      KK=9
  130 LEFT=KK
      DO 140 M=IMTBCD,NOTB,-1
      MTBCD(M+LEFT)=MTBCD(M)
  140 CONTINUE
      K=NOTB-1
      DO 150 M=1,KK
      K=K+1
      MTBCD(K)=LONGP(M,KPART)
  150 CONTINUE
      IMTBCD=IMTBCD+LEFT
  160 RETURN
      END
      SUBROUTINE MTREAD
C=======================================================================
C
C     READ TABLE OF MT DEFINITIONS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 MTTABA
c-----1/18/11 - increased dimension from 200 to 1,000
      COMMON/MTDAT1/MTTABA(40,1000)
      COMMON/MTDAT2/MTTABB(5,1000),MTLONG,MTTAPE
C-----SET UP LOOP TO READ MT DEFINITIONS (now dimensioned 1,000)
      DO 30 I=1,1000
      READ(MTTAPE,50) (MTTABB(J,I),J=2,5),(MTTABA(J,I),J=1,40)
C-----TERMINATE ON ALL MT LIMITS = ZERO.
      DO 10 J=2,5
      IF(MTTABB(J,I).GT.0) GO TO 20
   10 CONTINUE
      GO TO 40
C-----DEFINE LENGTH OF MT DEFINITION.
   20 CALL LONGX(MTTABA(1,I),MTTABB(1,I),40)
   30 CONTINUE
      I=1001           ! new length
   40 MTLONG=I-1
c-----2022/3/23 - added CLOSE
      CLOSE(MTTAPE)
      RETURN
   50 FORMAT(4I4,1X,40A1)
      END
      SUBROUTINE LONGX(BCD,IBCD,NBCD)
C=======================================================================
C
C     DEFINE LENGTH OF MT DEFINITION.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 BCD,BLANK
      DIMENSION BCD(NBCD)
      DATA BLANK/' '/
      IBCD=NBCD
      DO 10 I=1,NBCD
      IF(BCD(IBCD).NE.BLANK) GO TO 20
      IBCD=IBCD-1
   10 CONTINUE
   20 RETURN
      END
      SUBROUTINE SETUP
C=======================================================================
C
C     INITIALIZE VARIABLES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      REAL*4 XYSS
      COMMON/SIZES/XL(3),YL(6),XYMID(2),HT,HTX1,HTX2
      COMMON/THREAD/EV2MEV
      COMMON/PAGNOW/PAGE
      COMMON/BIAS/NSPACE(2),KDENSE(2,2)
      COMMON/EDGE/XYEDGE(2,2),XYMAJR(2,2),RASTER(2)
      COMMON/TYPLIN/STEPER(7,5),LINTYP
      COMMON/TYPPLT/DINMAX,IMTYPE
      COMMON/LETMIN/MINUSOK
      COMMON/THICKY/THICK,ITHICK,NTHICK(3),IMTHIN
      COMMON/XYTICK/TICKXY(2)
      COMMON/SIZEHT/HTSIZE
      COMMON/MULTHT/HTMULT
      DIMENSION XYSS(2,2)
C-----DEFINE SIZE OF PLOTTING AREA.
      CALL MYSIZE(XYSS(1,1),XYSS(1,2))
      XYEDGE(1,1)=XYSS(1,1)
      XYEDGE(2,1)=XYSS(2,1)
      XYEDGE(1,2)=XYSS(1,2)
      XYEDGE(2,2)=XYSS(2,2)
C-----DEFINE DISTANCE BETWEEN RASTER POINTS ON THE PLOT (IN INCHES).
      RASTER(1)=0.01d0
      RASTER(2)=0.01d0
C-----INITIALIZE MINIMUM RASTER MOVEMENT WITHOUT INTERPOLATION FROM
C-----PLANE OF DATA TO PLANE OF PLOT.
      DINMAX=RASTER(1)
C-----DEFINE HEIGHT OF CHARACTER IN INCHES.
      HT=0.10d0*HTMULT
      HTX1=HT/1.4d0
      HTX2=0.5d0*HTX1
C-----DEFINE LINE SPACING (FOR THICK LINES).
      THICK=0.002d0
      ITHICK=0
C-----DEFINE CHARACTER SIZE FOR STANDARD LINE WIDTH.
      HTSIZE=HT
C-----DEFINE LENGTH OF TICK MARKS IN X AND Y DIRECTION.
      TICKXY(1)=0.02d0
      TICKXY(2)=TICKXY(1)
C-----DEFINE INTERIOR PLOTTING AREA OF THE GRID ALLOWING FOR TITLE AND
C-----AXIS LABELS.
      XYMAJR(1,1)=XYEDGE(1,1)+10.75d0*HT
      XYMAJR(2,1)=XYEDGE(2,1)-3.0d0*HT
      XYMAJR(1,2)=XYEDGE(1,2)+8.5d0*HT
      XYMAJR(2,2)=XYEDGE(2,2)-6.5d0*HT
C-----2 LINES AT TOP OF PLOT.
      YL(2)=XYMAJR(2,2)+0.75d0*HT
      YL(1)=YL(2)+1.75d0*HT
C-----BOTTOM OF PLOT
C----- 3) LINEAR AND LOG POWERS
C----- 4) POWERS OF 10
C----- 5) AXIS LABEL
C----- 6) FINE DECADE DIGITS
      YL(3)=XYMAJR(1,2)-1.75*HT
      YL(4)=YL(3)-HT
      YL(5)=YL(4)-2.75*HT
      YL(6)=XYMAJR(1,2)-1.5*HT
C-----LEFT OF PLOT.
C----- 1) POWERS OF 10
C----- 2) AXIS LABEL
C----- 3) FINE DECADE DIGITS
      XL(1)=XYMAJR(1,1)-5.0d0*HT
      XL(2)=XYMAJR(1,1)-6.75d0*HT
      XL(3)=XYMAJR(1,1)-1.5d0*HT
C-----DEFINE THE MIDDLE OR THE GRID AREA.
      XYMID(1)=0.5d0*(XYMAJR(1,1)+XYMAJR(2,1))
      XYMID(2)=0.5d0*(XYMAJR(1,2)+XYMAJR(2,2))
C-----DEFINE EV TO MEV CONVERSION FACTOR.
      EV2MEV=1.0d-6
C-----INITIALIZE PLOT COUNTER.
      PAGE=0.0d0
C-----DEFINE MAXIMUM ALLOWABLE NUMBER OF MAJOR AXIS SUB-DIVISIONS ON
C-----X AND Y AXIS.
      NSPACE(1)=14
      NSPACE(2)=8
C-----FOR LINEAR AND LOG SCALING OF X AND Y AXIS DEFINE THE MAXIMUM
C-----NUMBER OF SUB-DIVISIONS FOR WHICH FINE TICK MARKS WILL BE
C-----INCLUDED ON THE PLOT.
      KDENSE(1,1)=16
      KDENSE(2,1)=20
      KDENSE(1,2)=8
      KDENSE(2,2)=10
C-----INITIALIZE OUTPUT LINE TYPE TO SOLID.
      LINTYP=1
C-----DEFINE 5 POSSIBLE DASH PATTERNS INCLUDING.
C-----(1) SOLID
C-----(2) SHORT DASH, BLANK
C-----(3) LONG DASH, BLANK,  SHORT DASH, BLANK
C-----(4) LONG DASH, BLANK
C-----(5) LONG DASH, BLANK, SORT DASH, BLANK, SHORT DASH, BLANK
      DO 20 L=1,7
      DO 10 I=1,5
      STEPER(L,I)=0.00d0
   10 CONTINUE
   20 CONTINUE
      STEPER(1,1)=1.00d0
      STEPER(1,2)=0.06d0
      STEPER(2,2)=0.04d0
      STEPER(1,3)=0.33d0
      STEPER(2,3)=0.04d0
      STEPER(3,3)=0.06d0
      STEPER(4,3)=0.04d0
      STEPER(1,4)=0.226666666d0
      STEPER(2,4)=0.04d0
      STEPER(1,5)=0.26d0
      STEPER(2,5)=0.04d0
      STEPER(3,5)=0.06d0
      STEPER(4,5)=0.04d0
      STEPER(5,5)=0.06d0
      STEPER(6,5)=0.04d0
C-----INITIALIZE FLAG TO ALLOW PLOTTING OF NEGATIVE DATA.
      MINUSOK=0
      RETURN
      END
      SUBROUTINE SYMIN
C=======================================================================
C
C     LOAD SPECIAL SYMBOL TABLE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 CHRTAB,CHRTRL
      COMMON/SYMTB1/CHRTAB(256),CHRTRL(256)
      COMMON/SYMTB2/XCHAR(5000),YCHAR(5000),ICHPEN(5000),INDCHR(2,256),
     1 ICHAR,ICNTRL,ISYM
C-----DEFINE AVAILABLE CORE SIZE.
      DATA ICORE/5000/
C-----INITIALIZE CHARACTER INDEX AND COUNT OF CONTROL CHARACTERS.
      IHIGH=0
      ICNTRL=0
C-----SET UP LOOP TO READ UP TO 256 SPECIAL CHARACTERS.
      DO 30 ICHAR=1,256
C-----READ FIRST LINE TO DEFINE CHARACTER AND NUMBER OF STROKES.
      READ(ISYM,60,ERR=40,END=40) CHRTAB(ICHAR),ICOUNT
      LOWEST=IHIGH+1
      IHIGH=IHIGH+ICOUNT
C-----INSURE AVAILABLE CORE WILL NOT BE EXCEEDED.
      IF(IHIGH.GT.ICORE) GO TO 40
C-----READ STROKES (X, Y, PEN POSITION).
      DO 10 I=LOWEST,IHIGH
      READ(ISYM,70,ERR=40,END=40) XCHAR(I),YCHAR(I),ICHPEN(I)
   10 CONTINUE
C-----SAVE CONTROL CHARACTERS.
      IF(ICOUNT.NE.1) GO TO 20
      IF(ICHPEN(LOWEST).GT.0) GO TO 20
      ICNTRL=ICNTRL+1
      CHRTRL(ICNTRL)=CHRTAB(ICHAR)
C-----DEFINE INDICES TO SPECIAL CHARACTER STROKE TABLE.
   20 INDCHR(1,ICHAR)=LOWEST
      INDCHR(2,ICHAR)=IHIGH
   30 CONTINUE
      ICHAR=256
      GO TO 50
C-----END OF DATA OR ERROR.
   40 ICHAR=ICHAR-1
c-----2022/3/23 - added CLOSE
      CLOSE(ISYM)
   50 RETURN
   60 FORMAT(1X,A1,I5)
   70 FORMAT(2F7.3,I5)
      END
      SUBROUTINE SPECAL(BCD,IBCD,NBCD,KBCD)
C=======================================================================
C
C     DEFINE NUMBER OF NON-BLANK CHARACTERS AND  PLOTTED CHARACTERS
C     (NON-BLANK MINUS CONTROL CHARACTERS).
C
C     BCD     = CHARACTER STRING
C     IBCD    = NUMBER OF NON-BLANK CHARACTERS
C     NBCD    = NUMBER OF PLOTTED CHARACTERS
C     KBCD    = TOTAL LENGTH OF CHARACTER STRING
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 BCD,BLANK,CHRTAB,CHRTRL
      COMMON/SYMTB1/CHRTAB(256),CHRTRL(256)
      COMMON/SYMTB2/XCHAR(5000),YCHAR(5000),ICHPEN(5000),INDCHR(2,256),
     1 ICHAR,ICNTRL,ISYM
      DIMENSION BCD(KBCD)
      DATA BLANK/' '/
C-----FIND LAST NON-BLANK CHARACTER.
      IBCD=KBCD
      DO 10 II=1,KBCD
      IF(BCD(IBCD).NE.BLANK) GO TO 20
      IBCD=IBCD-1
   10 CONTINUE
      IBCD=0
      NBCD=0
      GO TO 50
C-----COUNT SPECIAL NON-PRINTING CHARACTERS.
   20 NBCD=IBCD
      IF(ICNTRL.LE.0) GO TO 50
      DO 40 I=1,IBCD
      DO 30 J=1,ICNTRL
      IF(BCD(I).NE.CHRTRL(J)) GO TO 30
      NBCD=NBCD-1
      GO TO 40
   30 CONTINUE
   40 CONTINUE
   50 RETURN
      END
      SUBROUTINE FRAME0
C=======================================================================
C
C     INITIALIZE PLOTTER AND IDENTIFY PROGRAM.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 VERSES
      CHARACTER*32 VERSE1
      COMMON/THICKY/THICK,ITHICK,NTHICK(3),IMTHIN
      COMMON/VANCED/ISMALX,ISMALY,NSMALX,NSMALY
      COMMON/XYOFF/XOFF,YOFF,XSCALE,YSCALE,XSIZE,YSIZE
      COMMON/EDGE/XYEDGE(2,2),XYMAJR(2,2),RASTER(2)
      COMMON/PLOTXY/XYPLOT(2,2),NBORD
      COMMON/PALCOM/MYPAL
      DIMENSION VERSES(32,14),VERSE1(14),BOXZX(2),BOXZY(2),NVERSE(14)
      EQUIVALENCE (VERSES(1,1),VERSE1(1))
C-----DEFINE IDENTIFICATION FOR PROGRAM AND VERSION BY,
C-----(1) KVERSE - NUMBER OF LINES IN I.D.
C-----(3) VERSES - CHARACTERS FOR I.D.
      DATA KVERSE/14/
C       12345678901234567890123456789012
      DATA VERSE1/
     1 'Program EVALPLOT                ',
     2 '(Version 2023-1)                ',
     3 'by                              ',
     4 'Dermott E. Cullen               ',
     5 '(Present Contact Information)   ',
     4 'Dermott E. Cullen               ',
     7 '1466 Hudson Way                 ',
     8 'Livermore, CA 94550             ',
     9 'U.S.A.                          ',
     A 'Tele: 925-321-4177              ',
     1 'E.Mail:redcullen1@comcast.net   ',
     2 'Web:redcullen1.net/HOMEPAGE.NEW ',
     3 '                                ',
     4 'Press Mouse Button to Start     '/
C       12345678901234567890123456789012
C-----ONLY ALLOW PLOTTER TO BE INITIALIZED ONCE.
      DATA IPASS/0/
      DATA HTV/0.28D+00/
c-----------------------------------------------------------------------
C
C     DEFINE PLOT SIZE, SCALE FACTORS AND OFFSET.
C
c-----------------------------------------------------------------------
      DX=(XYPLOT(2,1)-XYPLOT(1,1))
      DY=(XYPLOT(2,2)-XYPLOT(1,2))
      XSIZE=DX/FLOAT(NSMALX)
      YSIZE=DY/FLOAT(NSMALY)
      XSCALE=XSIZE/XYEDGE(2,1)
      YSCALE=YSIZE/XYEDGE(2,2)
      XOFF=XYPLOT(1,1)
      YOFF=XYPLOT(1,2)
      ISMALX=NSMALX
      ISMALY=NSMALY
c-----------------------------------------------------------------------
C
C     INITIALIZE PLOTTER
C
c-----------------------------------------------------------------------
      IF(IPASS.NE.0) GO TO 10
      CALL STARPLOT
C-----OPTIONAL WHITE BACKGROUND
      IF(MYPAL.NE.0) CALL NEWBACK
   10 IPASS=IPASS+1
c-----------------------------------------------------------------------
C
C     IDENTIFY PROGRAM AND INSTALLATION ONLY THE FIRST TIME THIS
C     ROUTINE IS CALLED.
C
c-----------------------------------------------------------------------
      IF(IPASS.NE.1) GO TO 80
C-----SET COLOR.
      CALL PEN(2)
C-----IF REQUESTED DRAW OUTLINE FOR ENTIRE PLOTTING AREA.
      IF(NBORD.LE.0) GO TO 20
      ITHICK=NTHICK(3)
      CALL PLOT1(XYEDGE(1,1),XYEDGE(1,2),3)
      CALL PLOT1(XYEDGE(1,1),XYEDGE(2,2),2)
      CALL PLOT1(XYEDGE(2,1),XYEDGE(2,2),2)
      CALL PLOT1(XYEDGE(2,1),XYEDGE(1,2),2)
      CALL PLOT1(XYEDGE(1,1),XYEDGE(1,2),2)
      ITHICK=0
   20 Y=0.5d0*(XYEDGE(2,2)+HTV*FLOAT(KVERSE)+
     1 0.75d0*HTV*FLOAT(KVERSE-1))
      XMID=0.5d0*XYEDGE(2,1)
C-----DEFINE THE NUMBER OF CHARACTERS IN EACH LINE.
      DO 50 L=1,KVERSE
      DO 30 K=32,1,-1
      IF(VERSES(K,L).NE.' ') GO TO 40
   30 CONTINUE
      K=1
   40 NVERSE(L)=K
   50 CONTINUE
C-----OUTLINE ID.
      LL=NVERSE(1)
      DO 60 L=1,KVERSE
      IF(NVERSE(L).GT.LL) LL=NVERSE(L)
   60 CONTINUE
      XLL=LL
      BOXZX(1)=XMID-HTV*(0.5d0*XLL+2.0d0)
      BOXZX(2)=XMID+HTV*(0.5d0*XLL+3.0d0)
      BOXZY(1)=Y-(1.75d0*FLOAT(KVERSE-1)+2.0d0)*HTV
      BOXZY(2)=Y+3.0d0*HTV
      CALL COLORBOX(BOXZX,BOXZY,0,2)
C-----PLOT ID.
      CALL PEN(2)
      DO 70 L=1,KVERSE
      X=XMID-0.5d0*FLOAT(NVERSE(L))*HTV
      CALL SYMBL1(X,Y,HTV,VERSES(1,L),0.0,NVERSE(L))
      Y=Y-1.75*HTV
   70 CONTINUE
C-----ADVANCE TO NEXT FRAME AND DEFINE OFFSET FOR FIRST PLOT ON FRAME.
      CALL FRAME1
   80 RETURN
      END
      SUBROUTINE FRAME1
C=======================================================================
C
C     ADVANCE TO NEXT PLOTTING AREA. THERE CAN BE ANY NUMBER OF PLOTS
C     IN X AND/OR Y DIRECTION.
C
C=======================================================================
      INCLUDE 'implicit.h'
c-----2015-2: Corrected XMOUSE1 and YMOUSE1 to REAL*4
      REAL*4 XMOUSE1,YMOUSE1
      COMMON/EDGE/XYEDGE(2,2),XYMAJR(2,2),RASTER(2)
      COMMON/XYOFF/XOFF,YOFF,XSCALE,YSCALE,XSIZE,YSIZE
      COMMON/VANCED/ISMALX,ISMALY,NSMALX,NSMALY
      COMMON/PLOTXY/XYPLOT(2,2),NBORD
c-----------------------------------------------------------------------
c
C     2020/12/19 - Delay at END of PLOT.
c
c-----------------------------------------------------------------------
      CALL MOUSEY(KMOUSE,XMOUSE1,YMOUSE1,1,4)
C-----IF FRAME IS FULL ADVANCE TO NEXT FRAME.
      IF(ISMALX.ge.NSMALX.and.ISMALY.ge.NSMALY) CALL NEXTPLOT
C-----INCREMENT INDEX IN X DIRECTION. RESET X POSITION WHEN X DIRECTION
C-----IS FULL.
      ISMALX=ISMALX+1
      XOFF=XOFF+XSIZE
      IF(ISMALX.LE.NSMALX) GO TO 10
C-----X DIRECTION IS FULL. RESET X INDEX AND POSITION. INCREMENT INDEX
C-----IN Y DIRECTION. WHEN Y DIRECTION IS FULL FRAME IS COMPLETE.
      ISMALX=1
      XOFF=XYPLOT(1,1)
      ISMALY=ISMALY+1
      YOFF=YOFF-YSIZE
      IF(ISMALY.LE.NSMALY) GO TO 10
      ISMALY=1
      YOFF=XYPLOT(2,2)-YSIZE
C-----FILL INTERIOR.
   10 CALL COLORBOX(XYMAJR(1,1),XYMAJR(1,2),0,2)
      RETURN
      END
      SUBROUTINE ACTION(IMACTV,XZOOM1,XZOOM2)
C=======================================================================
C
C     ADVANCE TO NEXT PLOTTING AREA. THERE CAN BE ANY NUMBER OF PLOTS
C     IN X AND/OR Y DIRECTION.
C
C     Allow Interactive ZOOM or SHOW ALL = restore original X range.
C
C=======================================================================
      INCLUDE 'implicit.h'
c-----2015-2: Corrected XMOUSE1 and YMOUSE1 to REAL*4
      REAL*4 XMOUSE1,YMOUSE1,XMOUSE2,YMOUSE2
      COMMON/PLANE/XYPLAN(2,2,10)
      COMMON/EDGE/XYEDGE(2,2),XYMAJR(2,2),RASTER(2)
      COMMON/XYOFF/XOFF,YOFF,XSCALE,YSCALE,XSIZE,YSIZE
      COMMON/VANCED/ISMALX,ISMALY,NSMALX,NSMALY
      COMMON/PLOTXY/XYPLOT(2,2),NBORD
      COMMON/PLTLIM/XLIM1,XLIM2,YLIM1,YLIM2
      COMMON/LINLOG/IXYWAY(2,10)
      COMMON/FIRSTCOM/XFIRST(2),YFIRST(2)
c-----Linear to log base 10 transformation
      DATA TEN/10.0d0/
c-----Assume NO Interaction
      IMACTV = 0
      XZOOM1  = 0.0d0
      XZOOM2  = 0.0d0
c-----------------------------------------------------------------------
c
C     2020/12/19 - Delay at END of PLOT for possible ZOOM
c
c-----------------------------------------------------------------------
c
c     First limit of ZOOM - or return
c
      CALL MOUSEY(KMOUSE,XMOUSE1,YMOUSE1,1,4)
      if(KMOUSE.eq.4) go to 40                  ! 4 = Keyboard Input
      XM81 = XMOUSE1                 ! REAL*4 to REAL*8
      YM81 = YMOUSE1                 ! REAL*4 to REAL*8
      CALL VIEWXY(XM81,YM81)         ! Translate to real screen units
c-----Above top = SHOW ALL
      if(YM81.gt.YLIM2) go to 30
c-----Outside PLOT area = return with NO ZOOM
      if(XM81.lt.XLIM1.or.XM81.gt.XLIM2) go to 40
      if(YM81.lt.YLIM1.or.YM81.gt.YLIM2) go to 40
c-----Draw ZOOM limit bottom to top of frame
      CALL PEN(2)                   ! 2 = black
      CALL PLOTZ(XM81   ,1,1)
c
c     Second limit of ZOOM - or return
c
      CALL MOUSEY(KMOUSE,XMOUSE2,YMOUSE2,1,4)
      if(KMOUSE.eq.4) go to 40                  ! 4 = Keyboard Input
      XM82 = XMOUSE2                 ! REAL*4 to REAL*8
      YM82 = YMOUSE2                 ! REAL*4 to REAL*8
      CALL VIEWXY(XM82,YM82)         ! Translate to real screen units
      if(YM82.gt.YLIM2) go to 30
c-----Outside PLOT area = return with NO ZOOM
      if(XM82.lt.XLIM1.or.XM82.gt.XLIM2) go to 40
      if(YM82.lt.YLIM1.or.YM82.gt.YLIM2) go to 40
c-----Draw ZOOM limit bottom to top of frame
      CALL PEN(2)                   ! 2 = black
      CALL PLOTZ(XM82   ,1,1)
c
c     Define X Data units
c
c-----Put X limits into ascending order
      if(XM81.lt.XM82) go to 10
      if(XM81.eq.XM82) go to 40             ! Ignore NO X range
      XM83 = XM81
      XM81 = XM82
      XM82 = XM83
c-----Indicate ZOOMed limits defined
   10 IMACTV = 1
c-----Transform from inches to data units
      DXINCH = XLIM2 - XLIM1              ! inch range
      DATA1  = XYPLAN(1,1,1)              ! data limits
      DATA2  = XYPLAN(2,1,1)
      XZOOM1 = (DATA2*(XM81-XLIM1)+DATA1*(XLIM2-XM81))/DXINCH
      XZOOM2 = (DATA2*(XM82-XLIM1)+DATA1*(XLIM2-XM82))/DXINCH
      if(IXYWAY(1,1).eq.1) go to 20
      XZOOM1 = TEN**XZOOM1
      XZOOM2 = TEN**XZOOM2
c-----Do not go below 1.0d-5 eV
   20 if(XZOOM1.lt.1.0d-5) XZOOM1 = 1.0d-5
      go to 40
c-----------------------------------------------------------------------
c
c     Reset to Max. Initial E Range
c
c-----------------------------------------------------------------------
c-----SHOW ALL
   30 IMACTV = 1
      XZOOM1        = XFIRST(1)
      XZOOM2        = XFIRST(2)
      XYPLAN(1,2,1) = YFIRST(1)
      XYPLAN(2,2,1) = YFIRST(2)
c-----------------------------------------------------------------------
c
C     2020/12/19 - Next Frame
c
c-----------------------------------------------------------------------
C-----IF FRAME IS FULL ADVANCE TO NEXT FRAME.
   40 IF(ISMALX.ge.NSMALX.and.ISMALY.ge.NSMALY) CALL NEXTPLOT
C-----INCREMENT INDEX IN X DIRECTION. RESET X POSITION WHEN X DIRECTION
C-----IS FULL.
      ISMALX=ISMALX+1
      XOFF=XOFF+XSIZE
      IF(ISMALX.LE.NSMALX) GO TO 50
C-----X DIRECTION IS FULL. RESET X INDEX AND POSITION. INCREMENT INDEX
C-----IN Y DIRECTION. WHEN Y DIRECTION IS FULL FRAME IS COMPLETE.
      ISMALX=1
      XOFF=XYPLOT(1,1)
      ISMALY=ISMALY+1
      YOFF=YOFF-YSIZE
      IF(ISMALY.LE.NSMALY) GO TO 50
      ISMALY=1
      YOFF=XYPLOT(2,2)-YSIZE
C-----FILL INTERIOR.
   50 CALL COLORBOX(XYMAJR(1,1),XYMAJR(1,2),0,2)
      RETURN
      END
      SUBROUTINE VIEWXY(XIN,YIN)
C=======================================================================
C
C     TRANSLATE (XIN,YIN) FROM ABSOLUTE COORDINATES OF SCREEN, AS
C     SUPPLIED BY MOUSE, TO INTERNAL STANDARD UNITS.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/XYOFF/XOFF,YOFF,XSCALE,YSCALE,XSIZE,YSIZE
C-----X HORIZONTAL/Y VERTICAL.
      XIN=(XIN-XOFF)/XSCALE
      YIN=(YIN-YOFF)/YSCALE
      RETURN
      END
      SUBROUTINE PLOT1(X,Y,IPEN)
C=======================================================================
C
C     PLOT FROM LAST (X,Y) TO CURRENT (X,Y) EITHER NORMAL OR THICK LINE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/THICKY/THICK,ITHICK,NTHICK(3),IMTHIN
      DATA X1/0.0d0/
      DATA Y1/0.0d0/
C-----IF MOVE, NOT DRAW OR NORMAL LINE DO IT WITH 1 STROKE.
      IF(IPEN.NE.2.OR.ITHICK.LE.0) GO TO 30
      DXY=SQRT((X-X1)**2+(Y-Y1)**2)
      IF(DXY.LE.0.0d0) GO TO 40
C-----DEFINE DIRECTION COSINE AND SINE.
      COST=(Y-Y1)/DXY
      SINT=(X-X1)/DXY
C-----DEFINE OFFSET FOR LINE THICKNESS.
      DXT=-THICK*COST
      DYT=THICK*SINT
C-----DRAW THICK LINE.
      CALL PLOTP(X,Y,2)
      DXT1=DXT
      DYT1=DYT
      DO 10 I=1,ITHICK
      CALL PLOTP(X1+DXT,Y1+DYT,3)
      CALL PLOTP(X+DXT,Y+DYT,2)
      DXT=DXT+DXT1
      DYT=DYT+DYT1
   10 CONTINUE
      DXT=DXT1
      DYT=DYT1
      DO 20 I=1,ITHICK
      CALL PLOTP(X1-DXT,Y1-DYT,3)
      CALL PLOTP(X-DXT,Y-DYT,2)
      DXT=DXT+DXT1
      DYT=DYT+DYT1
   20 CONTINUE
      CALL PLOTP(X,Y,3)
      GO TO 40
C-----DRAW NORMAL WIDTH LINE.
   30 CALL PLOTP(X,Y,IPEN)
   40 X1=X
      Y1=Y
      RETURN
      END
      SUBROUTINE PLOTZ(Z,IWAY,MYGRID)
C=======================================================================
C
C     DRAW SOLID OR DASHED GRID LINE THAT LIES OUTSIDE OF LEGEND BOX.
C
C     Z      = CONSTANT X OR Y VALUE
C     IWAY   = 1 - X AXIS - CONSTANT X FROM YLIM1 TO YLIM2
C            = 2 - Y AXIS - CONSTANT Y FROM XLIM1 TO XLIM2
C     MYGRID = 1 - SOLID
C            = 2 - DASHED
C
C     THE X AND Y LIMITS OF THE PLOT ARE DEFINED BY PLTLIM
C     THE X AND Y LIMITS OF THE BOX  ARE DEFINED BY BOXLIM
C
C=======================================================================
      INCLUDE 'implicit.h'
      COMMON/PLTLIM/XLIM1,XLIM2,YLIM1,YLIM2
      COMMON/BOXLIM/BIXMIN,BIXMAX,BIYMIN,BIYMAX
      DIMENSION ZDASH(3)
      DATA ZDASH/0.0d0,0.0d0,0.0d0/
c-----------------------------------------------------------------------
C
C     DEFINE LENGTH OF TICK MARKS (FOR 10 PATTERNS PER INCH -
C     1 DASH, 6 BLANKS.
C
c-----------------------------------------------------------------------
      ZDASH(2)=1.0d0/70.0d0
      ZDASH(3)=6.0d0*ZDASH(2)
c-----------------------------------------------------------------------
C
C     SELECT X OR Y AXIS.
C
c-----------------------------------------------------------------------
      IF(IWAY.NE.1) GO TO 110
c-----------------------------------------------------------------------
C
C     X AXIS - VERTICAL LINE FROM YLIM1 TO YLIM2.
C
c-----------------------------------------------------------------------
C-----START AT LOWER Y AXIS.
      CALL PLOTP(Z,YLIM1,3)
C-----CHECK FOR NO OVERLAP WITH LEGEND BOX.
      IF(Z.LE.BIXMIN.OR.Z.GT.BIXMAX) GO TO 70
      IF(YLIM1.GE.BIYMAX.OR.YLIM2.LE.BIYMIN) GO TO 70
      IF(MYGRID.EQ.2) GO TO 10
C-----SOLID EXCEPT IN BOX.
      CALL PLOTP(Z,BIYMIN,2)
      CALL PLOTP(Z,BIYMAX,3)
      CALL PLOTP(Z,YLIM2,2)
      RETURN
C-----DASHED EXCEPT IN BOX.
   10 YLAST=YLIM1
      KPEN=3
C-----UP TO LOWER LIMIT OF BOX.
   20 KPEN=5-KPEN
      YLAST=YLAST+ZDASH(KPEN)
      IF(YLAST.ge.BIYMIN) go to 30
      CALL PLOTP(Z,YLAST,KPEN)
      GO TO 20
C-----ACROSS BOX.
   30 CALL PLOTP(Z,BIYMIN,KPEN)
   40 KPEN=5-KPEN
      YLAST=YLAST+ZDASH(KPEN)
      IF(YLAST.lt.BIYMAX) go to 40
C-----TO UPPER Y AXIS.
      CALL PLOTP(Z,BIYMAX,3)
      IF(YLAST.GT.YLIM2) GO TO 60
      CALL PLOTP(Z,YLAST,KPEN)
   50 KPEN=5-KPEN
      YLAST=YLAST+ZDASH(KPEN)
      IF(YLAST.ge.YLIM2) go to 60
      CALL PLOTP(Z,YLAST,KPEN)
      GO TO 50
   60 CALL PLOTP(Z,YLIM2,KPEN)
      RETURN
c-----------------------------------------------------------------------
C
C     NO OVERLAP WITH LEGEND BOX.
C
c-----------------------------------------------------------------------
   70 IF(MYGRID.EQ.2) GO TO 80
C-----SOLID.
      CALL PLOTP(Z,YLIM2,2)
      RETURN
C-----DASHED.
   80 YLAST=YLIM1
      KPEN=3
   90 KPEN=5-KPEN
      YLAST=YLAST+ZDASH(KPEN)
      IF(YLAST.ge.YLIM2) go to 100
      CALL PLOTP(Z,YLAST,KPEN)
      GO TO 90
  100 CALL PLOTP(Z,YLIM2,KPEN)
      RETURN
c-----------------------------------------------------------------------
C
C     Y AXIS - HORIZONTAL LINE FROM XLIM1 TO XLIM2.
C
c-----------------------------------------------------------------------
C-----START AT LOWER X AXIS.
  110 CALL PLOTP(XLIM1,Z,3)
C-----CHECK FOR NO OVERLAP WITH LEGEND BOX.
      IF(Z.LE.BIYMIN.OR.Z.GT.BIYMAX) GO TO 180
      IF(XLIM1.GE.BIXMAX.OR.XLIM2.LE.BIXMIN) GO TO 180
      IF(MYGRID.EQ.2) GO TO 120
C-----SOLID EXCEPT IN BOX.
      CALL PLOTP(BIXMIN,Z,2)
      CALL PLOTP(BIXMAX,Z,3)
      CALL PLOTP(XLIM2,Z,2)
      RETURN
C-----DASHED EXCEPT IN BOX.
  120 XLAST=XLIM1
      KPEN=3
C-----UP TO LOWER LIMIT OF BOX.
  130 KPEN=5-KPEN
      XLAST=XLAST+ZDASH(KPEN)
      IF(XLAST.ge.BIXMIN) go to 140
      CALL PLOTP(XLAST,Z,KPEN)
      GO TO 130
C-----ACROSS BOX.
  140 CALL PLOTP(BIXMIN,Z,KPEN)
  150 KPEN=5-KPEN
      XLAST=XLAST+ZDASH(KPEN)
      IF(XLAST.lt.BIXMAX) go to 150
C-----TO UPPER Y AXIS.
      CALL PLOTP(BIXMAX,Z,3)
      IF(XLAST.GT.XLIM2) GO TO 170
      CALL PLOTP(XLAST,Z,KPEN)
  160 KPEN=5-KPEN
      XLAST=XLAST+ZDASH(KPEN)
      IF(XLAST.ge.XLIM2) go to 170
      CALL PLOTP(XLAST,Z,KPEN)
      GO TO 160
  170 CALL PLOTP(XLIM2,Z,KPEN)
      RETURN
c-----------------------------------------------------------------------
C
C     NO OVERLAP WITH LEGEND BOX.
C
c-----------------------------------------------------------------------
  180 IF(MYGRID.EQ.2) GO TO 190
C-----SOLID.
      CALL PLOTP(XLIM2,Z,2)
      RETURN
C-----DASHED.
  190 XLAST=XLIM1
      KPEN=3
  200 KPEN=5-KPEN
      XLAST=XLAST+ZDASH(KPEN)
      IF(XLAST.ge.XLIM2) go to 210
      CALL PLOTP(XLAST,Z,KPEN)
      GO TO 200
  210 CALL PLOTP(XLIM2,Z,KPEN)
      RETURN
      END
      SUBROUTINE NUMBR1(XI,YI,HT,Z,ANG,IZ)
C=======================================================================
C
C     CONVERT FLOATING POINT NUMBER OF CHARACTER STRING AND PLOT WIDE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      REAL*4 ANG
      CHARACTER*1 DIGIT,MINUS,DOT,FIELD
      DIMENSION DIGIT(10),FIELD(16)
      DATA DIGIT/'1','2','3','4','5','6','7','8','9','0'/
      DATA MINUS/'-'/
      DATA DOT/'.'/
c-----------------------------------------------------------------------
C
C     ROUND-OFF NUMBER TO REQUIRED DIGITS, E.G. IF WRITING 54.321 WITH
C     2 DIGITS AFTER DECIMAL POINT DEFINE MR=5432 (ENTIRE STRING) AND
C     MR1=54 (DIGITS PRECEDING DECIMAL POINT).
C
c-----------------------------------------------------------------------
      AZ=DABS(Z)
      IIZ=IZ
      IF(IIZ.LE.0) IIZ=0
      Z10=10.0d0**IIZ
      MR=AZ*Z10+0.5d0
      IZ10=Z10
      MR1=MR/IZ10
c-----------------------------------------------------------------------
C
C     DETERMINE NUMBER OF DIGITS PRECEDING DECIMAL POINT.
C
c-----------------------------------------------------------------------
      M10=1
      DO 10 IDIG=1,12
      NR=MR1/M10
      IF(NR.LE.0) GO TO 20
      M10=10*M10
   10 CONTINUE
c-----------------------------------------------------------------------
C
C     NUMBER IS TOO BIG...NO PLOTTING.
C
c-----------------------------------------------------------------------
      RETURN
   20 IF(IDIG.EQ.1) GO TO 30
      IDIG=IDIG-1
      M10=M10/10
c-----------------------------------------------------------------------
C
C     ADD DIGITS AFTER DECIMAL POINT.
C
c-----------------------------------------------------------------------
   30 IDIG=IDIG+IIZ
      M10=M10*IZ10
c-----------------------------------------------------------------------
C
C     IF NUMBER IS ZERO, PLOT ZERO AND RETURN.
C
c-----------------------------------------------------------------------
      IF(IDIG.GT.0) GO TO 40
      IFIELD=1
      FIELD(1)=DIGIT(10)
      GO TO 80
c-----------------------------------------------------------------------
C
C     INITIALIZE CHARACTER COUNT.
C
c-----------------------------------------------------------------------
   40 IFIELD=0
c-----------------------------------------------------------------------
C
C     IF NUMBER IS NEGATIVE INSERT MINUS SIGN.
C
c-----------------------------------------------------------------------
      IF(Z.GE.0.0d0) GO TO 50
      FIELD(1)=MINUS
      IFIELD=1
c-----------------------------------------------------------------------
C
C     DEFINE POSITION OF DECIMAL POINT (IF ANY).
C
c-----------------------------------------------------------------------
   50 IDOT=IDIG-IZ
      IF(IZ.LT.0) IDOT=IDIG+2
c-----------------------------------------------------------------------
C
C     INSERT DIGITS AND DECIMAL POINT (IF ANY) IN STRING.
C
c-----------------------------------------------------------------------
      DO 70 I=1,IDIG
      NDIG=MR/M10
      KDIG=NDIG
      IF(KDIG.EQ.0) KDIG=10
      IFIELD=IFIELD+1
      FIELD(IFIELD)=DIGIT(KDIG)
c-----------------------------------------------------------------------
C
C     INSERT DECIMAL POINT AT APPROPRIATE POSITION.
C
c-----------------------------------------------------------------------
      IF(I.NE.IDOT) GO TO 60
      IFIELD=IFIELD+1
      FIELD(IFIELD)=DOT
   60 MR=MR-M10*NDIG
      M10=M10/10
   70 CONTINUE
c-----------------------------------------------------------------------
C
C     ENTIRE FIELD FORMATTED. PLOT IT.
C
c-----------------------------------------------------------------------
   80 CALL SYMBL1(XI,YI,HT,FIELD(1),ANG,IFIELD)
      RETURN
      END
      SUBROUTINE NUMBR2(Z,IZ,FIELD,IFIELD)
C=======================================================================
C
C     CONVERT FLOATING POINT NUMBER OF CHARACTER STRING AND RETURN IT
C     (DO NOT PLOT).
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 DIGIT,MINUS,DOT,FIELD
      DIMENSION DIGIT(10),FIELD(16)
      DATA DIGIT/'1','2','3','4','5','6','7','8','9','0'/
      DATA MINUS/'-'/
      DATA DOT/'.'/
c-----------------------------------------------------------------------
C
C     ROUND-OFF NUMBER TO REQUIRED DIGITS, E.G. IF WRITING 54.321 WITH
C     2 DIGITS AFTER DECIMAL POINT DEFINE MR=5432 (ENTIRE STRING) AND
C     MR1=54 (DIGITS PRECEDING DECIMAL POINT).
C
c-----------------------------------------------------------------------
      AZ=DABS(Z)
      IIZ=IZ
      IF(IIZ.LE.0) IIZ=0
      Z10=10.0d0**IIZ
      MR=AZ*Z10+0.5d0
      IZ10=Z10
      MR1=MR/IZ10
c-----------------------------------------------------------------------
C
C     DETERMINE NUMBER OF DIGITS PRECEDING DECIMAL POINT.
C
c-----------------------------------------------------------------------
      M10=1
      DO 10 IDIG=1,12
      NR=MR1/M10
      IF(NR.LE.0) GO TO 20
      M10=10*M10
   10 CONTINUE
      IFIELD=0
c-----------------------------------------------------------------------
C
C     NUMBER IS TOO BIG...NO PLOTTING.
C
c-----------------------------------------------------------------------
      RETURN
   20 IF(IDIG.EQ.1) GO TO 30
      IDIG=IDIG-1
      M10=M10/10
c-----------------------------------------------------------------------
C
C     ADD DIGITS AFTER DECIMAL POINT.
C
c-----------------------------------------------------------------------
   30 IDIG=IDIG+IIZ
      M10=M10*IZ10
c-----------------------------------------------------------------------
C
C     IF NUMBER IS ZERO, PLOT ZERO AND RETURN.
C
c-----------------------------------------------------------------------
      IF(IDIG.GT.0) GO TO 40
      IFIELD=1
      FIELD(1)=DIGIT(10)
      GO TO 80
c-----------------------------------------------------------------------
C
C     INITIALIZE CHARACTER COUNT.
C
c-----------------------------------------------------------------------
   40 IFIELD=0
c-----------------------------------------------------------------------
C
C     IF NUMBER IS NEGATIVE INSERT MINUS SIGN.
C
c-----------------------------------------------------------------------
      IF(Z.GE.0.0d0) GO TO 50
      FIELD(1)=MINUS
      IFIELD=1
c-----------------------------------------------------------------------
C
C     DEFINE POSITION OF DECIMAL POINT (IF ANY).
C
c-----------------------------------------------------------------------
   50 IDOT=IDIG-IZ
      IF(IZ.LT.0) IDOT=IDIG+2
c-----------------------------------------------------------------------
C
C     INSERT DIGITS AND DECIMAL POINT (IF ANY) IN STRING.
C
c-----------------------------------------------------------------------
      DO 70 I=1,IDIG
      NDIG=MR/M10
      KDIG=NDIG
      IF(KDIG.EQ.0) KDIG=10
      IFIELD=IFIELD+1
      FIELD(IFIELD)=DIGIT(KDIG)
c-----------------------------------------------------------------------
C
C     INSERT DECIMAL POINT AT APPROPRIATE POSITION.
C
c-----------------------------------------------------------------------
      IF(I.NE.IDOT) GO TO 60
      IFIELD=IFIELD+1
      FIELD(IFIELD)=DOT
   60 MR=MR-M10*NDIG
      M10=M10/10
   70 CONTINUE
c-----------------------------------------------------------------------
C
C     ENTIRE FIELD FORMATTED. RETURN IT.
C
c-----------------------------------------------------------------------
   80 RETURN
      END
      SUBROUTINE UNITED(E,EUNIT,NUNIT)
C=======================================================================
C
C     SELECT UNITS FOR OUTPUT AND DEFINE I.D. FOR CURVE.
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 EUNIT,EUNITS
      DIMENSION EUNIT(20),EMULT(4),EUNITS(4,4)
      DATA EMULT/1.0d0,1.0d3,1.0d6,1.0d9/
      DATA EUNITS/
     1 ' ','M','e','V',
     2 ' ','k','e','V',
     3 ' ','e','V',' ',
     4 ' ','m','e','V'/
C-----SELECT UNITS ASSUMING ENERGY IS IN MEV.
      DO 10 IUNIT=1,3
      EOUT=E*EMULT(IUNIT)
      IF(EOUT.GE.0.9995d0) GO TO 20
   10 CONTINUE
      IUNIT=4
C-----ALWAYS USE 4 DIGIT ACCURACY.
   20 NDIG=3
      IF(EOUT.GT. 9.995) NDIG=2
      IF(EOUT.GT. 99.95) NDIG=1
      IF(EOUT.GT. 999.5) NDIG=0
C-----CONVERT ENERGY TO CHARACTERS.
      CALL NUMBR2(EOUT,NDIG,EUNIT,NUNIT)
C-----ADD UNITS.
      DO 30 K=1,4
      NUNIT=NUNIT+1
      EUNIT(NUNIT)=EUNITS(K,IUNIT)
   30 CONTINUE
      RETURN
      END
      SUBROUTINE SYMBL1(X,Y,HTIN,MESS,ANG,NMESS)
C=======================================================================
C
C     DRAW THICK CHARACTERS DEFINED BY STROKES IN SYMBOL TABLE
C
C=======================================================================
      INCLUDE 'implicit.h'
      REAL*4 ANG
      CHARACTER*1 MESS,CHRTAB,CHRTRL
      COMMON/SYMTB1/CHRTAB(256),CHRTRL(256)
      COMMON/SYMTB2/XCHAR(5000),YCHAR(5000),ICHPEN(5000),INDCHR(2,256),
     1 ICHAR,ICNTRL,ISYM
      COMMON/THICKY/THICK,ITHICK,NTHICK(3),IMTHIN
      COMMON/SIZEHT/HTSIZE
      DIMENSION MESS(NMESS)
C-----INITIALIZE FLAG TO USE STANDARD CHARACTER SET.
      DATA IALTER/0/
C-----INITIALIZE X AND Y OFFSET (USED FOR SUB AND SUPER SCRIPTS).
      DATA XOFFS/0.0d0/
      DATA YOFFS/0.0d0/
C-----IF NO SOFTWARE CHARACTERS RETURN.
      IF(ICHAR.LE.0) RETURN
C-----SELECT LINE THICKNESS.
      IF(IMTHIN.LE.0) GO TO 10
      ITHICK=0
      GO TO 20
   10 ITHICK=NTHICK(2)
      IF(HTIN.LT.HTSIZE) ITHICK=NTHICK(1)
      IF(HTIN.GT.HTSIZE) ITHICK=NTHICK(3)
C-----INITIALIZE POSITION AND DEFINE INCREMENTS.
   20 X1=X
      Y1=Y
      NWAY=0
      IF(ABS(ANG).GT.1.0d0) NWAY=1
      IF(NWAY.NE.0) GO TO 30
      DX1=HTIN
      DY1=0.0d0
      GO TO 40
   30 DX1=0.0d0
      DY1=HTIN
C-----SET UP LOOP TO PLOT CHARACTERS ONE AT A TIME.
   40 DO 140 N=1,NMESS
C-----INITIALIZE COUNT OF THE NUMBER OF TIMES CHARACTER HAS BEEN FOUND
C-----(TO SELECT STANDARD OR ALTERNATE CHARACTER SET).
      NALTER=0
      DO 60 I=1,ICHAR
      IF(MESS(N).NE.CHRTAB(I)) GO TO 60
C-----ALWAYS USE CONTROL CHARACTERS REGARDLESS OF CHARACTER SET.
      I1=INDCHR(1,I)
      IF(ICHPEN(I1).LE.0) GO TO 70
C-----SELECT STANDARD OR ALTERNATE CHARACTER SET.
      IF(NALTER.NE.IALTER) GO TO 50
C-----CHARACTER FOUND.
      I2=INDCHR(2,I)
      GO TO 90
   50 NALTER=NALTER+1
   60 CONTINUE
C-----NOT SPECIAL CHARACTER...IGNORE.
      GO TO 140
C-----CONTROL CHARACTER...CHANGE CHARACTER SET OR RE-DEFINE OFFSET.
   70 IF(ICHPEN(I1).EQ.0) GO TO 80
C-----CHANGE CHARACTER SETS.
      IALTER=1-IALTER
      GO TO 140
C-----DEFINE OFFSET.
   80 XOFFS=XOFFS+XCHAR(I1)
      YOFFS=YOFFS+YCHAR(I1)
      GO TO 140
   90 IF(NWAY.NE.0) GO TO 110
C-----HORIZONTAL.
      DO 100 I=I1,I2
      CALL PLOT1(X1+HTIN*(XOFFS+XCHAR(I)),Y1+HTIN*(YOFFS+YCHAR(I)),
     1 ICHPEN(I))
  100 CONTINUE
C-----ALL FOLLOWING CHARACTERS WILL BE POSITIONED RELATIVE TO THE OFFSET
      X1=X1+XOFFS*HTIN
      GO TO 130
C-----VERTICAL.
  110 DO 120 I=I1,I2
      CALL PLOT1(X1-HTIN*(YOFFS+YCHAR(I)),Y1+HTIN*(XOFFS+XCHAR(I)),
     1 ICHPEN(I))
  120 CONTINUE
C-----ALL FOLLOWING CHARACTERS WILL BE POSITIONED RELATIVE TO THE OFFSET
      Y1=Y1+XOFFS*HTIN
C-----MOVE TO NEXT CHARACTER POSITION.
  130 X1=X1+DX1
      Y1=Y1+DY1
C-----TURN OFF ALTERNATE CHARACTER SET FLAG AND SET OFFSET TO ZERO.
      IALTER=0
      XOFFS=0.0d0
      YOFFS=0.0d0
  140 CONTINUE
C-----RESET LINE THICKNESS.
      ITHICK=0
      RETURN
      END
      SUBROUTINE PLOTP(XIN,YIN,IPEN)
C=======================================================================
C
C     TRANSLATE AND SCALE EACH STROKE TO THE PLANE OF THE PLOTTER AND
C     PLOT.
C
C     NOW INCLUDE DOUBLE PRECISION TO REAL COORDINATE CHANGE
C
C=======================================================================
      INCLUDE 'implicit.h'
      REAL*4 XP,YP
      COMMON/XYOFF/XOFF,YOFF,XSCALE,YSCALE,XSIZE,YSIZE
      XP=XSCALE*XIN+XOFF
      YP=YSCALE*YIN+YOFF
      CALL PLOT(XP,YP,IPEN)
      RETURN
      END
      SUBROUTINE COLORBOX(X,Y,IFILL,IBORDER)
C=======================================================================
C
C     FILL A RECTANGULAR AREA (A BOX) WITH COLOR
C
C     NOW INCLUDE DOUBLE PRECISION TO REAL COORDINATE CHANGE
C
C=======================================================================
      INCLUDE 'implicit.h'
      REAL*4 XP,YP
      COMMON/XYOFF/XOFF,YOFF,XSCALE,YSCALE,XSIZE,YSIZE
      DIMENSION X(2),Y(2),XP(2),YP(2)
      XP(1)=XSCALE*X(1)+XOFF
      YP(1)=YSCALE*Y(1)+YOFF
      XP(2)=XSCALE*X(2)+XOFF
      YP(2)=YSCALE*Y(2)+YOFF
      CALL BOXCOLOR(XP,YP,IFILL,IBORDER)
      RETURN
      END
      SUBROUTINE FILIO1
C=======================================================================
C
C     DEFINE ALL I/O UNITS AND OPTIONALLY DEFINE FILENAMES.
C
C=======================================================================
      INCLUDE 'implicit.h'
      INTEGER*4 OUTP,OTAPE
      CHARACTER*72 NAMEIN
      COMMON/ENDFIO/INP,OUTP,ITAPE,OTAPE
      COMMON/IOSTATUS/ISTAT1,ISTAT2
      COMMON/SYMTB2/XCHAR(5000),YCHAR(5000),ICHPEN(5000),INDCHR(2,256),
     1 ICHAR,ICNTRL,ISYM
      COMMON/INPAGE/IXYLOW,IXYHI,ISCR,NPSIZE,NPSM2,IMUSED
      COMMON/MTDAT2/MTTABB(5,1000),MTLONG,MTTAPE
      COMMON/NAMEX/NAMEIN
      INP=2
      OUTP=3
      MTTAPE=9
      ITAPE=10
      OTAPE= 0
      ISCR=11
      ISYM=12
      IMUSED=0
C-----DEFINE ALL FILE NAMES.
      ISTAT2 = 0
      OPEN(OUTP,FILE='EVALPLOT.LST',STATUS='UNKNOWN')
      CALL SCRATCH1(ISCR,'EVALPLOT.001')
      OPEN(MTTAPE,FILE='MT.DAT',STATUS='OLD',ERR=10)
      GO TO 30
   10 ISTAT2 = 1
      WRITE(OUTP,20)
   20 FORMAT(//' ERROR - Opening MT.DAT file')
   30 OPEN(ISYM,FILE='PLOT.CHR',STATUS='OLD',ERR=40)
      GO TO 60
   40 ISTAT2 = 1
      WRITE(OUTP,50)
   50 FORMAT(//' ERROR - Opening PLOT.CHR file')
   60 OPEN(INP,FILE='EVALPLOT.INP',STATUS='OLD',ERR=70)
      ISTAT1 = 0
      IF(ISTAT2.EQ.1) CALL ENDERROR
      RETURN
   70 ISTAT1 = 1
      IF(ISTAT2.EQ.1) CALL ENDERROR
      RETURN
      ENTRY FILIO2
C=======================================================================
C
C     ENTRY POINT TO DEFINE ENDF/B DATA FILE
C
C=======================================================================
      OPEN(ITAPE,FILE=NAMEIN,STATUS='OLD',ERR=80)
      ISTAT2 = 0
      RETURN
   80 ISTAT2 = 1
      RETURN
      END
      SUBROUTINE TIT10(IZAP,LFS,MTBOX,IMTBOX)
C=======================================================================
C
C     DEFINE CHARACTER TITLE FOR THE LEGEND BOX MF=10
C
C=======================================================================
      INCLUDE 'implicit.h'
      CHARACTER*1 MTBOX,DIGITS(0:9)
      DIMENSION MTBOX(40)
      DATA DIGITS/'0','1','2','3','4','5','6','7','8','9'/
C-----------------------------------------------------------------------
C
C     CHARACTER EQUIVALENT OF ZAP
C
C-----------------------------------------------------------------------
C-----in initialize all blank
      DO I=1,40
      MTBOX(I) = ' '
      ENDDO
c-----define ZAP
      CALL ZAHOL(IZAP,MTBOX)
c-----define length
      DO IMTBOX=40,1,-1
      IF(MTBOX(IMTBOX).NE.' ') GO TO 10
      ENDDO
c-----length = 0 = ERROR - ZAP Undefined? Very unlikely.
      IMTBOX = 1
      RETURN
C-----------------------------------------------------------------------
C
C     ADD FINAL STATE = blank, g or m#
C
C-----------------------------------------------------------------------
   10 IF(LFS.ge.99) return    ! Assume LFS=99 means ALL
c----- "g" for ground state
      IF(LFS.LE.0) THEN
      IF(IZAP.lt.3000) return ! No state for neutron or light particles.
      IMTBOX = IMTBOX + 1
      MTBOX(IMTBOX) = 'g'
      RETURN
      ENDIF
c-----------------------------------------------------------------------
c
c     "m" followed by #
c
c-----------------------------------------------------------------------
c-----by here LFS = 1 to 98 = 1 or 2 digits
      IMTBOX = IMTBOX + 1
      MTBOX(IMTBOX) = 'm'
      I1 = LFS/10                ! First digit
      I2 = LFS - 10*I1           ! Second digit
      IF(I1.gt.0) THEN           ! First digit, if any (must be >0)
      IMTBOX = IMTBOX + 1
      MTBOX(IMTBOX) = DIGITS(I1)
      ENDIF
      IMTBOX = IMTBOX + 1
      MTBOX(IMTBOX) = DIGITS(I2) ! second digit, always
      RETURN
      END
